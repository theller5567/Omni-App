[{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/App.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/App.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your React context(s) to a separate file.","line":67,"column":14,"nodeType":"Identifier","messageId":"reactContext","endLine":67,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_newTheme' is defined but never used.","line":69,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6498,6501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6498,6501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":118,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":121,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6792,6795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6792,6795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6850,6853],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6850,6853],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// App.tsx\nimport React, { useState, useEffect, lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Sidebar from './components/Sidebar/Sidebar';\nimport { ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { lightTheme, darkTheme } from './theme';\nimport './App.scss';\nimport ProtectedRoute from './components/ProtectedRoute';\nimport axios from 'axios';\nimport { Box, CircularProgress, useMediaQuery } from '@mui/material';\n// React Query imports\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\n// Import ToastContainer for centralized toast notifications\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n// Import the necessary hooks\nimport { useMediaTypesWithUsageCounts, useUserProfile } from './hooks/query-hooks';\nimport type { User } from './hooks/query-hooks';\n// Remove Redux imports if no longer used for user state here\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState, AppDispatch } from './store/store';\n// import MediaApprovalPage from './pages/MediaApprovalPage'; // Adjust path as needed\n\n// Create React Query client with improved configuration\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false, // Disable refetching when window regains focus\n      staleTime: 1000 * 60 * 5, // Data is considered fresh for 5 minutes\n      retry: 1, // Only retry failed requests once\n      // Adding a custom retry function to avoid retrying on 404 errors\n      retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000), // Exponential backoff\n    },\n    mutations: {\n      // Configure mutation defaults\n      retry: 1,\n      retryDelay: 1000,\n    },\n  },\n});\n\n// Lazy load components\nconst MediaDetail = lazy(() => import('./components/MediaDetail/MediaDetail'));\nconst Account = lazy(() => import('./pages/Account'));\nconst Home = lazy(() => import('./components/Home'));\nconst AuthPage = lazy(() => import('./pages/AuthPage'));\nconst PasswordSetupPage = lazy(() => import('./pages/PasswordSetup'));\nconst MediaLibraryPage = lazy(() => import('./pages/MediaLibraryPage'));\nconst AccountUsers = lazy(() => import('./pages/AccountUsers'));\nconst AccountTags = lazy(() => import('./pages/AccountTags'));\nconst AccountMediaTypes = lazy(() => import('./pages/AccountMediaTypes'));\nconst AccountAdminDashboard = lazy(() => import('./pages/AccountAdminDashboard'));\nconst StyleGuidePage = lazy(() => import('./pages/StyleGuidePage'));\nconst AcceptInvitation = lazy(() => import('./pages/AcceptInvitation'));\nconst UserPage = lazy(() => import('./pages/User'));\n\n// Loading fallback component\nconst LoadingFallback = () => (\n  <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n    <CircularProgress />\n  </Box>\n);\n\n// Create a context for theme toggling\nexport const ThemeContext = React.createContext({\n  isDarkMode: true,\n  toggleTheme: (_newTheme: 'light' | 'dark') => {}\n});\n\n// Create an axios interceptor to handle auth errors globally\naxios.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Check if the error is a 401 Unauthorized\n    if (error.response && error.response.status === 401) {\n      console.log('[AXIOS INTERCEPTOR] 401 Unauthorized detected. Current path:', window.location.pathname);\n      console.log('[AXIOS INTERCEPTOR] Removing authToken and refreshToken from localStorage.');\n      // Clear all auth data\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('refreshToken');\n      // Only redirect if we're not already on the login page\n      if (!window.location.pathname.includes('/login')) {\n        console.log('[AXIOS INTERCEPTOR] Redirecting to login page.');\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Define an internal component to use React Query hooks\n// This is needed because the main App component provides the QueryClientProvider\nconst AppContent: React.FC = () => {\n  // Check localStorage for saved theme preference\n  const savedTheme = localStorage.getItem('theme');\n  const [isDarkMode, setIsDarkMode] = useState(savedTheme ? savedTheme === 'dark' : true);\n  // const dispatch = useDispatch<AppDispatch>(); // Removed, not used for user init\n  // const isLoadingRedux = useSelector((state: RootState) => state.user.currentUser.isLoading); // Removed\n  // const userRoleRedux = useSelector((state: RootState) => state.user.currentUser.role); // Removed\n  // const userStateRedux = useSelector((state: RootState) => state.user.currentUser); // Removed\n  const [isInitialized, setIsInitialized] = useState(false);\n  // Check for mobile view to determine toast position\n  const isMobile = useMediaQuery('(max-width:600px)');\n  \n  // --- User Profile with TanStack Query ---\n  const { \n    data: userProfile, \n    isLoading: isUserLoading, \n    error: userError,\n    isSuccess: isUserSuccess,\n    isError: isUserFetchError\n  } = useUserProfile();\n\n  // Prefetch media types data using TanStack Query\n  // This replaces the Redux mediaTypes initialization\n  useMediaTypesWithUsageCounts(userProfile);\n\n  useEffect(() => {\n    // This effect block was primarily for the old custom callbacks.\n    // The core logic of clearing userProfile on auth error is now in useUserProfile's internal onError.\n    // The logic for localStorage.removeItem('authToken') on 401 is handled by the axios interceptor.\n    // If additional side-effects are needed in App.tsx based on userProfile changes, \n    // a new useEffect watching userProfile, isUserFetchError, and userError can be added.\n    if (isUserFetchError) {\n      // Example: if a specific action is needed in App.tsx when user fetch fails, beyond what useUserProfile does.\n      if (process.env.NODE_ENV === 'development') {\n        console.error('App.tsx: User profile fetch resulted in an error state.', userError);\n      }\n      // If the error indicates an auth failure and the token is somehow still present, clear it.\n      // This is a defensive check, as the interceptor and useUserProfile's onError should handle most cases.\n      const token = localStorage.getItem('authToken');\n      if (token && userError && typeof userError === 'object' && 'message' in userError) {\n        const errorMessage = (userError as any).message || '';\n        let isAuthFailure = errorMessage.includes('Authentication token missing');\n        // Check for shape of Axios error without relying on isAxiosError\n        if (!isAuthFailure && userError && typeof userError === 'object' && 'response' in userError && (userError as any).response) {\n            const status = (userError as any).response.status;\n            if (status === 401 || status === 403) {\n                isAuthFailure = true;\n            }\n        }\n        if (isAuthFailure) {\n            localStorage.removeItem('authToken');\n            // Optionally, redirect here if not handled by other mechanisms\n            // window.location.href = '/login'; \n        }\n      }\n    }\n  }, [isUserFetchError, userError]);\n\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', isDarkMode ? 'dark' : 'light');\n    // Save preference to localStorage\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n  }, [isDarkMode]);\n\n  // useEffect to manage overall app initialization status\n  // This effect now primarily waits for user and media types to settle.\n  useEffect(() => {\n    if (isUserSuccess || isUserFetchError) { // Considered initialized once user fetch attempt is complete\n      setIsInitialized(true);\n      if (process.env.NODE_ENV === 'development') {\n        console.log('App initialization status: User fetch attempt complete.');\n        if (isUserSuccess) console.log('User profile:', userProfile);\n        if (isUserFetchError) console.log('User fetch error:', userError);\n      }\n    }\n  }, [isUserSuccess, isUserFetchError, userProfile, userError]);\n\n  // Updated to handle direct theme changes\n  const toggleTheme = (newTheme: 'light' | 'dark') => {\n    setIsDarkMode(newTheme === 'dark');\n  };\n\n  // Show loading fallback if user profile is loading or app is not yet initialized.\n  // Ensure mediaTypes loading is also considered if it's critical before rendering.\n  if (isUserLoading || !isInitialized) { \n    // Only show loading screen for protected routes, not for login/auth page\n    // Check if userProfile is null (meaning not fetched or error) when deciding to show loading for protected routes.\n    const currentPath = window.location.pathname;\n    const isAuthPath = currentPath === '/login' || currentPath.includes('/auth');\n    \n    // If on an auth path, don't show global loading, let the auth page handle its own state.\n    // If not on an auth path AND user is loading OR app not initialized, show fallback.\n    if (!isAuthPath && (isUserLoading || !isInitialized)) {\n      return <LoadingFallback />;\n    }\n  }\n\n  return (\n    <ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}>\n      <CssBaseline />\n      <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\n        <Router>\n          <div id=\"app-container\" style={{ display: 'flex', flexDirection: 'row', width: '100vw', height: '100vh', overflow: 'hidden' }}>\n            {/* Sidebar is shown if user profile fetch was successful and userProfile has an _id */}\n           {(isUserSuccess && userProfile && userProfile._id && (<Sidebar /> as React.ReactNode))}\n            <div\n              style={{\n                flexGrow: 1,\n                height: '100vh', // Ensure the content area can scroll independently\n                overflow: 'auto', // Allows content to scroll\n                // Removed position: 'absolute' and related top, left, right, bottom, width properties\n              }}\n            >\n              <Suspense fallback={<LoadingFallback />}>\n                <Routes>\n                  {/* Pass userProfile to ProtectedRoutes */}\n                  <Route path=\"/media/slug/:slug\" element={<ProtectedRoute element={<MediaDetail />} />} />\n                  <Route path=\"/media-library\" element={<ProtectedRoute element={<MediaLibraryPage />} />} />\n                  <Route path=\"/account\" element={<ProtectedRoute element={<Account />} />} />\n                  <Route path=\"/user/:id\" element={<ProtectedRoute element={<UserPage />} />} />\n                  <Route path=\"/admin-users\" element={<ProtectedRoute element={<AccountUsers />} adminOnly />} />\n                  <Route path=\"/admin-tags\" element={<ProtectedRoute element={<AccountTags />} adminOnly />} />\n                  <Route path=\"/admin-media-types\" element={<ProtectedRoute element={<AccountMediaTypes />} adminOnly />} />\n                  {/* Conditional route based on userProfile role */}\n                  {(userProfile as User | null | undefined)?.role === 'superAdmin' && (\n                    <Route path=\"/manage-media-types\" element={<ProtectedRoute element={<AccountMediaTypes />} adminOnly />} />\n                  )}\n                  <Route path=\"/admin-dashboard\" element={<ProtectedRoute element={<AccountAdminDashboard />} adminOnly />} />\n                  <Route path=\"/accept-invitation/:token\" element={<AcceptInvitation />} /> {/* Consider if this needs protection */}\n                  <Route path=\"/home\" element={<ProtectedRoute element={<Home />} />} />\n                  <Route path=\"/password-setup\" element={<ProtectedRoute element={<PasswordSetupPage />} />} />\n                  <Route path=\"/style-guide\" element={<ProtectedRoute element={<StyleGuidePage />} adminOnly />} />\n                  <Route path=\"/login\" element={<AuthPage />} />\n                  <Route path=\"/\" element={<AuthPage />} />\n                  {/* <Route path=\"/admin-media-approvals\" element={<ProtectedRoute element={<MediaApprovalPage />} adminOnly />} /> */}\n                </Routes>\n              </Suspense>\n            </div>\n          </div>\n        </Router>\n      </ThemeContext.Provider>\n      \n      {/* Centralized ToastContainer for the entire application */}\n      <ToastContainer\n        position={isMobile ? \"bottom-center\" : \"top-right\"}\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={true}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss={false}\n        draggable\n        pauseOnHover\n        limit={3}  // Limit concurrent notifications\n      />\n    </ThemeProvider>\n  );\n};\n\n// Main App component that provides the QueryClientProvider\nconst App: React.FC = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppContent />\n      {/* Only show React Query Devtools in development */}\n      {process.env.NODE_ENV === 'development' && <ReactQueryDevtools initialIsOpen={false} />}\n    </QueryClientProvider>\n  );\n};\n\nexport default App;","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/__mocks__/envMock.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/__mocks__/fileMock.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/__mocks__/styleMock.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/api/apiClient.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/api/apiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/AdminDashboard/DatabaseStats.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is assigned a value but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3816,3819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3816,3819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Paper, \n  Typography, \n  Box, \n  Card, \n  CardContent,\n  LinearProgress,\n  Tooltip,\n  IconButton,\n  Divider\n} from '@mui/material';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport StorageIcon from '@mui/icons-material/Storage';\nimport CloudIcon from '@mui/icons-material/Cloud';\nimport GroupIcon from '@mui/icons-material/Group';\nimport CollectionsIcon from '@mui/icons-material/Collections';\nimport CategoryIcon from '@mui/icons-material/Category';\nimport TagIcon from '@mui/icons-material/Tag';\nimport { formatFileSize } from '../../utils/formatFileSize';\nimport { useDatabaseStats, useUserProfile } from '../../hooks/query-hooks';\n\nconst DatabaseStats: React.FC = () => {\n  const [_error, setError] = useState<string | null>(null);\n  \n  // Get userProfile for enabling the query\n  const { data: userProfile } = useUserProfile();\n  \n  // Use TanStack Query for fetching database stats, passing userProfile\n  const { \n    data: stats, \n    isLoading, \n    isError, \n    error: queryError,\n    refetch \n  } = useDatabaseStats(userProfile);\n  \n  // Create mock data function for fallback\n  const createMockData = () => {\n    // Mock data should be self-contained or use minimal external dependencies if Redux is removed\n    // For now, this will likely break or return less accurate mock data without Redux state.\n    // Consider removing or refactoring mock data if live data and loading/error states are sufficient.\n    const mockTags = new Set<string>();\n    // allMedia.forEach(media => { // allMedia from Redux is removed\n    //   if (media.metadata?.tags && Array.isArray(media.metadata.tags)) {\n    //     media.metadata.tags.forEach(tag => mockTags.add(tag));\n    //   }\n    // });\n    \n    return {\n      totalUsers: 2, // Was mongoUsers.length || 2\n      activeUsers: 1, // Was Math.max(1, Math.floor(mongoUsers.length / 2)) || 1\n      totalMediaFiles: 0, // Was allMedia.length\n      totalMediaTypes: 0, // Was mediaTypes.length\n      totalTags: mockTags.size,\n      storageUsed: 0, // Was allMedia.reduce(...)\n      storageLimit: 5 * 1024 * 1024 * 1024, // 5GB\n      dbSize: 256 * 1024 * 1024, // 256MB\n      lastBackup: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(),\n      uptime: 15 * 24 * 60 * 60 // 15 days in seconds\n    };\n  };\n  \n  // Handle refresh button click\n  const handleRefresh = () => {\n    refetch();\n  };\n  \n  // Format uptime from seconds to days, hours, minutes\n  const formatUptime = (seconds: number) => {\n    const days = Math.floor(seconds / (24 * 60 * 60));\n    const hours = Math.floor((seconds % (24 * 60 * 60)) / (60 * 60));\n    const minutes = Math.floor((seconds % (60 * 60)) / 60);\n    \n    return `${days}d ${hours}h ${minutes}m`;\n  };\n  \n  // Show loading state\n  if (isLoading) {\n    return (\n      <Paper elevation={2} className=\"dashboard-card\">\n        <Typography variant=\"h6\" gutterBottom>Database Statistics</Typography>\n        <Box sx={{ width: '100%', mt: 2 }}>\n          <LinearProgress />\n        </Box>\n      </Paper>\n    );\n  }\n  \n  // Show error state with fallback data\n  if (isError) {\n    setError(queryError instanceof Error ? queryError.message : 'Failed to load database stats');\n    \n    // If we have no stats data, create mock data\n    if (!stats) {\n      const mockStats = createMockData();\n      \n      // Render the component with mock data\n      // (We continue to the main return statement and use mockStats instead)\n      return renderDashboard(mockStats, true);\n    }\n  }\n  \n  // If we still don't have stats after error handling, return nothing\n  if (!stats) return null;\n  \n  // Render the dashboard with real data\n  return renderDashboard(stats, isLoading);\n  \n  // Helper function to render the dashboard with given stats\n  function renderDashboard(statsData: any, isLoadingState: boolean) {\n    // Calculate storage usage percentage\n    const storagePercentage = (statsData.storageUsed / statsData.storageLimit) * 100;\n    \n    return (\n      <Paper elevation={2} className=\"dashboard-card\">\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h6\">Database Statistics</Typography>\n          <Tooltip title=\"Refresh\">\n            <IconButton onClick={handleRefresh} size=\"small\" color=\"primary\">\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n        \n        {isLoadingState && (\n          <Box sx={{ width: '100%', mb: 2 }}>\n            <LinearProgress />\n          </Box>\n        )}\n        \n        <div className=\"grid-container\" style={{ gridTemplateRows: 'auto auto', minHeight: '450px' }}>\n          {/* Storage Usage */}\n          <div className=\"grid-item\" style={{ gridColumn: 'span 12' }}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                  <StorageIcon color=\"primary\" sx={{ mr: 1 }} />\n                  <Typography variant=\"subtitle1\" fontWeight=\"medium\">Storage Usage</Typography>\n                </Box>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {formatFileSize(statsData.storageUsed)} used of {formatFileSize(statsData.storageLimit)}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {storagePercentage.toFixed(1)}%\n                  </Typography>\n                </Box>\n                <Box sx={{ width: '100%', height: 8, bgcolor: 'background.paper', borderRadius: 4, overflow: 'hidden' }}>\n                  <Box \n                    sx={{ \n                      width: `${storagePercentage}%`, \n                      height: '100%', \n                      bgcolor: storagePercentage > 90 ? 'error.main' : storagePercentage > 70 ? 'warning.main' : 'success.main',\n                      borderRadius: 4\n                    }} \n                  />\n                </Box>\n              </CardContent>\n            </Card>\n          </div>\n          \n          <div className=\"cards-grid\" style={{ \n            display: 'grid', \n            gridTemplateColumns: 'repeat(3, 1fr)', \n            gap: '16px',\n            marginTop: '16px'\n          }}>\n            {/* Database Metrics */}\n            <Card sx={{ height: '100%' }}>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                  <CloudIcon color=\"info\" sx={{ mr: 1 }} />\n                  <Typography variant=\"subtitle1\" fontWeight=\"medium\">Database</Typography>\n                </Box>\n                \n                <Box sx={{ mb: 1 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">Database Size</Typography>\n                  <Typography variant=\"h6\">{formatFileSize(statsData.dbSize)}</Typography>\n                </Box>\n                \n                <Box sx={{ mb: 1 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">Last Backup</Typography>\n                  <Typography variant=\"h6\">\n                    {statsData.lastBackup ? new Date(statsData.lastBackup).toLocaleDateString() : 'Never'}\n                  </Typography>\n                </Box>\n                \n                <Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\">Uptime</Typography>\n                  <Typography variant=\"h6\">{formatUptime(statsData.uptime)}</Typography>\n                </Box>\n              </CardContent>\n            </Card>\n            \n            {/* Users */}\n            <Card sx={{ height: '100%' }}>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                  <GroupIcon color=\"success\" sx={{ mr: 1 }} />\n                  <Typography variant=\"subtitle1\" fontWeight=\"medium\">Users</Typography>\n                </Box>\n                \n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n                  <Typography variant=\"body1\">Total Users</Typography>\n                  <Typography variant=\"h5\" fontWeight=\"medium\">{statsData.totalUsers}</Typography>\n                </Box>\n                \n                <Divider sx={{ my: 1 }} />\n                \n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Typography variant=\"body1\">Active Users</Typography>\n                  <Typography variant=\"h5\" fontWeight=\"medium\">{statsData.activeUsers}</Typography>\n                </Box>\n              </CardContent>\n            </Card>\n            \n            {/* Content */}\n            <Card sx={{ height: '100%' }}>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                  <CollectionsIcon color=\"secondary\" sx={{ mr: 1 }} />\n                  <Typography variant=\"subtitle1\" fontWeight=\"medium\">Content</Typography>\n                </Box>\n                \n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <CollectionsIcon fontSize=\"small\" sx={{ mr: 0.5, opacity: 0.7 }} />\n                    <Typography variant=\"body2\">Media Files</Typography>\n                  </Box>\n                  <Typography variant=\"body1\" fontWeight=\"medium\">{statsData.totalMediaFiles}</Typography>\n                </Box>\n                \n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <CategoryIcon fontSize=\"small\" sx={{ mr: 0.5, opacity: 0.7 }} />\n                    <Typography variant=\"body2\">Media Types</Typography>\n                  </Box>\n                  <Typography variant=\"body1\" fontWeight=\"medium\">{statsData.totalMediaTypes}</Typography>\n                </Box>\n                \n                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <TagIcon fontSize=\"small\" sx={{ mr: 0.5, opacity: 0.7 }} />\n                    <Typography variant=\"body2\">Tags</Typography>\n                  </Box>\n                  <Typography variant=\"body1\" fontWeight=\"medium\">{statsData.totalTags}</Typography>\n                </Box>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </Paper>\n    );\n  }\n};\n\nexport default DatabaseStats; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/AdminDashboard/MediaApprovalSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/AdminDashboard/MediaTypeDistribution.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[845,848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[845,848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1102,1105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1102,1105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1818,1821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1818,1821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7239,7242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7239,7242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Paper, Typography, Box, CircularProgress } from '@mui/material';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\nimport { useTransformedMedia, useMediaTypesWithUsageCounts, TransformedMediaFile, useUserProfile } from '../../hooks/query-hooks';\n\nconst COLORS: Record<string, string> = {\n  'Product Image': '#3f8cff',\n  'Webinar Video': '#8bc34a',\n  'Protocol': '#ff4081',\n  'Application Note': '#ffc107',\n  'Application Header Image': '#03a9f4'\n};\n\nconst DEFAULT_COLORS = [\n  '#3f8cff', // blue\n  '#ffc107', // amber\n  '#8bc34a', // light green\n  '#ff4081', // pink\n  '#03a9f4', // light blue\n  '#9c27b0', // purple\n  '#f44336', // red\n  '#4caf50', // green\n  '#ff9800', // orange\n  '#2196f3', // blue\n];\n\n// Custom legend with proper spacing\nconst CustomLegend = (props: any) => {\n  const { payload } = props;\n  \n  return (\n    <ul style={{ \n      display: 'flex', \n      flexWrap: 'wrap', \n      justifyContent: 'center',\n      padding: 0,\n      margin: '10px 0 0 0',\n      listStyle: 'none'\n    }}>\n      {payload.map((entry: any, index: number) => (\n        <li \n          key={`legend-item-${index}`} \n          style={{ \n            display: 'flex', \n            alignItems: 'center', \n            marginRight: 20,\n            marginBottom: 8,\n            fontSize: '12px',\n            color: 'var(--text-primary)'\n          }}\n        >\n          <span style={{ \n            display: 'block',\n            width: 10,\n            height: 10,\n            borderRadius: '50%',\n            backgroundColor: entry.color,\n            marginRight: 8\n          }} />\n          {entry.value}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n// Custom tooltip component with typescript\ninterface CustomTooltipProps {\n  active?: boolean;\n  payload?: Array<any>;\n}\n\nconst CustomTooltip: React.FC<CustomTooltipProps> = ({ active, payload }) => {\n  if (active && payload && payload.length) {\n    const data = payload[0];\n    const totalCount = data.payload.totalCount || 1;\n    const percentage = ((data.value / totalCount) * 100).toFixed(1);\n    \n    return (\n      <div style={{ \n        backgroundColor: '#333',\n        padding: '10px',\n        border: 'none',\n        borderRadius: '4px', \n        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.5)'\n      }}>\n        <p style={{ \n          color: '#fff', \n          fontWeight: 'bold',\n          margin: '0 0 5px 0',\n          fontSize: '13px'\n        }}>{data.name}</p>\n        <p style={{ \n          color: 'var(--text-primary)',\n          margin: '0',\n          fontSize: '12px' \n        }}>\n          <span style={{ marginRight: '6px' }}>{data.value} files</span>\n          <span style={{ \n            color: 'var(--text-primary)',\n            fontSize: '11px'\n          }}>({percentage}%)</span>\n        </p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nconst MediaTypeDistribution: React.FC = () => {\n  const { data: userProfile, isLoading: isLoadingUserProfile } = useUserProfile();\n\n  const { \n    data: allMedia = [], \n    isLoading: isLoadingMedia, \n    isError: isMediaError \n  } = useTransformedMedia(userProfile);\n  \n  const { \n    data: mediaTypes = [], \n    isLoading: isLoadingMediaTypes, \n    isError: isMediaTypesError \n  } = useMediaTypesWithUsageCounts(userProfile);\n  \n  // Loading state\n  if (isLoadingUserProfile || isLoadingMedia || isLoadingMediaTypes) {\n    return (\n      <Paper elevation={2} className=\"dashboard-card media-types-chart\">\n        <Typography variant=\"h6\" gutterBottom>Media Type Distribution</Typography>\n        <Box sx={{ \n          display: 'flex', \n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '300px' \n        }}>\n          <CircularProgress />\n        </Box>\n      </Paper>\n    );\n  }\n  \n  // Error state\n  if (isMediaError || isMediaTypesError) {\n    return (\n      <Paper elevation={2} className=\"dashboard-card media-types-chart\">\n        <Typography variant=\"h6\" gutterBottom>Media Type Distribution</Typography>\n        <Box sx={{ \n          display: 'flex', \n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '300px' \n        }}>\n          <Typography variant=\"body1\" color=\"error\">\n            Error loading data. Please try refreshing the page.\n          </Typography>\n        </Box>\n      </Paper>\n    );\n  }\n  \n  // Calculate distribution data\n  const getDistributionData = () => {\n    // Create a count map of media types\n    const mediaTypeCounts = allMedia.reduce((acc: {[key: string]: number}, media: TransformedMediaFile) => {\n      const type = media.mediaType || 'Uncategorized';\n      acc[type] = (acc[type] || 0) + 1;\n      return acc;\n    }, {});\n    \n    // Convert to array format for the chart and assign consistent colors\n    return Object.entries(mediaTypeCounts).map(([name, value], index) => ({\n      name,\n      value,\n      totalCount: allMedia.length, // Add total count to each item for percentage calculation\n      // Use predefined color if available, otherwise use color from mediaTypes or default colors\n      color: COLORS[name] || mediaTypes.find(type => type.name === name)?.catColor || DEFAULT_COLORS[index % DEFAULT_COLORS.length]\n    })).sort((a, b) => b.value - a.value); // Sort by count descending\n  };\n  \n  const data = getDistributionData();\n  \n  // Empty state\n  if (data.length === 0) {\n    return (\n      <Paper elevation={2} className=\"dashboard-card media-types-chart\">\n        <Typography variant=\"h6\" gutterBottom>Media Type Distribution</Typography>\n        <Box sx={{ \n          display: 'flex', \n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '300px' \n        }}>\n          <Typography variant=\"body1\" color=\"textSecondary\">\n            No media files available to display distribution.\n          </Typography>\n        </Box>\n      </Paper>\n    );\n  }\n  \n  return (\n    <div className=\"dashboard-grid\" style={{ \n      display: 'grid',\n      gridTemplateColumns: 'repeat(12, 1fr)',\n      gap: '1.25rem',\n      marginBottom: '1.25rem'\n    }}>\n      <Paper \n        elevation={2} \n        className=\"dashboard-card media-types-chart\" \n        style={{ gridColumn: 'span 7' }}\n      >\n        <Typography variant=\"h6\" sx={{ mb: 1 }}>Media Type Distribution</Typography>\n        <Box sx={{ \n          width: '100%', \n          height: 'calc(100% - 40px)', \n          minHeight: '350px',\n          position: 'relative'\n        }}>\n          <ResponsiveContainer width=\"100%\" height=\"100%\" minHeight={350}>\n            <PieChart \n              width={500} \n              height={350} \n              margin={{ top: 20, right: 20, bottom: 40, left: 20 }}\n            >\n              <Pie\n                data={data}\n                cx=\"50%\"\n                cy=\"45%\"\n                labelLine={false}\n                outerRadius={110}\n                innerRadius={60}\n                paddingAngle={2}\n                cornerRadius={3}\n                dataKey=\"value\"\n                stroke=\"rgba(0, 0, 0, 0.2)\"\n                strokeWidth={1}\n                // Add labels directly to the Pie component\n                label={({ \n                  cx, cy, midAngle, outerRadius, percent, name, index\n                }: any) => {\n                  if (index >= 5 || percent < 0.08) return null;  // Only show for top 5 and significant slices\n                  const RADIAN = Math.PI / 180;\n                  const radius = outerRadius * 1.1;\n                  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n                  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n                  \n                  return (\n                    <text\n                      x={x}\n                      y={y}\n                      fill=\"var(--color-text-primary)\"\n                      textAnchor={x > cx ? 'start' : 'end'}\n                      dominantBaseline=\"central\"\n                      fontSize={12}\n                    >\n                      {`${name} ${(percent * 100).toFixed(0)}%`}\n                    </text>\n                  );\n                }}\n              >\n                {data.map((entry, index) => (\n                  <Cell \n                    key={`cell-${index}`} \n                    fill={entry.color} \n                  />\n                ))}\n              </Pie>\n              <Tooltip content={<CustomTooltip />} />\n              <Legend \n                content={<CustomLegend />}\n                layout=\"horizontal\"\n                verticalAlign=\"bottom\"\n                align=\"center\"\n              />\n            </PieChart>\n          </ResponsiveContainer>\n        </Box>\n      </Paper>\n      \n      <Paper \n        elevation={2} \n        className=\"dashboard-card has-scroll\" \n        style={{ gridColumn: 'span 5', padding: '1rem' }}\n      >\n        <Box sx={{ \n          display: 'flex', \n          flexDirection: 'column', \n          height: '100%'\n        }}>\n          {/* Total Files Header */}\n          <Box sx={{ \n            mb: 2, \n            pb: 2, \n            borderBottom: '1px solid rgba(255, 255, 255, 0.1)',\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'flex-end'\n          }}>\n            <Box>\n              <Typography variant=\"subtitle2\" color=\"textSecondary\" sx={{ fontSize: '0.75rem' }}>\n                Total Files\n              </Typography>\n              <Typography variant=\"h4\" color=\"primary\" sx={{ mt: 0.5, fontWeight: 600 }}>\n                {allMedia.length}\n              </Typography>\n            </Box>\n            \n            <Box sx={{ textAlign: 'right' }}>\n              <Typography variant=\"subtitle2\" color=\"textSecondary\" sx={{ fontSize: '0.75rem' }}>\n                Media Types\n              </Typography>\n              <Typography variant=\"h6\" sx={{ mt: 0.5 }}>\n                {data.length}\n              </Typography>\n            </Box>\n          </Box>\n          \n          {/* Media Types List */}\n          <Box sx={{ flexGrow: 1, overflow: 'auto' }}>\n            {data.map((item, index) => {\n              const percentage = allMedia.length ? (item.value / allMedia.length * 100) : 0;\n              \n              return (\n                <Box \n                  key={index} \n                  sx={{ \n                    mb: 1.25,\n                    '&:last-child': { mb: 0 } \n                  }}\n                >\n                  <Box sx={{ \n                    display: 'flex', \n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    mb: 0.5 \n                  }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', maxWidth: '75%' }}>\n                      <Box \n                        sx={{ \n                          width: 8, \n                          height: 8, \n                          borderRadius: '50%', \n                          bgcolor: item.color,\n                          flexShrink: 0,\n                          mr: 1\n                        }} \n                      />\n                      <Typography \n                        variant=\"body2\" \n                        sx={{ \n                          fontSize: '0.85rem',\n                          fontWeight: index === 0 ? 600 : 400,\n                          whiteSpace: 'nowrap',\n                          overflow: 'hidden',\n                          textOverflow: 'ellipsis'\n                        }}\n                      >\n                        {item.name}\n                      </Typography>\n                    </Box>\n                    <Typography \n                      variant=\"body2\" \n                      sx={{ \n                        fontWeight: index === 0 ? 600 : 400,\n                        fontSize: '0.85rem'\n                      }}\n                    >\n                      {item.value}\n                    </Typography>\n                  </Box>\n                  \n                  {/* Progress Bar */}\n                  <Box \n                    sx={{ \n                      width: '100%', \n                      height: 4, \n                      bgcolor: 'rgba(255, 255, 255, 0.1)', \n                      borderRadius: 2,\n                      overflow: 'hidden'\n                    }}\n                  >\n                    <Box \n                      sx={{ \n                        width: `${percentage}%`, \n                        height: '100%', \n                        bgcolor: item.color,\n                        borderRadius: 2 \n                      }} \n                    />\n                  </Box>\n                  \n                  {/* Percentage */}\n                  <Typography \n                    variant=\"caption\" \n                    sx={{ \n                      color: 'text.secondary',\n                      fontSize: '0.7rem',\n                      mt: 0.25,\n                      display: 'block',\n                      textAlign: 'right'\n                    }}\n                  >\n                    {percentage.toFixed(1)}%\n                  </Typography>\n                </Box>\n              );\n            })}\n          </Box>\n        </Box>\n      </Paper>\n    </div>\n  );\n};\n\nexport default MediaTypeDistribution; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/AdminDashboard/RecentActivity.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'logs' is never reassigned. Use 'const' instead.","line":91,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":91,"endColumn":28,"fix":{"range":[2732,2777],"text":"const logs: ActivityLog[] = activityLogs || [];"}},{"ruleId":"prefer-const","severity":2,"message":"'details' is never reassigned. Use 'const' instead.","line":152,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":152,"endColumn":16,"fix":{"range":[4907,4957],"text":"const details = activity.details || activity.action;"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6637,6640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6637,6640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8955,8958],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8955,8958],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":255,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9035,9038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9035,9038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'displayTextAfter' is never reassigned. Use 'const' instead.","line":313,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":313,"endColumn":25,"fix":{"range":[11502,11528],"text":"const displayTextAfter = '';"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Paper, \n  Typography, \n  List, \n  ListItem, \n  ListItemAvatar, \n  ListItemText, \n  Avatar,\n  Divider,\n  Box, \n  Chip,\n  Button,\n  CircularProgress\n} from '@mui/material';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport PersonIcon from '@mui/icons-material/Person';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport { FaTag } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport { \n  useActivityLogs, \n  useAllUsers, \n  useTransformedMedia, \n  useUserProfile,\n  TransformedMediaFile \n} from '../../hooks/query-hooks';\n\n// ActivityLog interface - ensure this matches the data from fetchActivityLogs\ninterface ActivityLog {\n  _id: string; // Assuming API returns _id\n  userId?: string; // Optional if system activities don't have a user\n  username?: string;\n  action: string;\n  details?: string;\n  targetType?: string; // e.g., 'media', 'user', 'mediaType'\n  targetId?: string;\n  targetSlug?: string; // If API provides a direct slug for the target\n  ip?: string;\n  userAgent?: string;\n  timestamp: string;\n  mediaSlug?: string;\n  mediaTitle?: string;\n  resourceType?: string;\n  tagName?: string;\n  tagCategoryName?: string;\n}\n\nconst RecentActivity: React.FC = () => {\n  const [displayError, setDisplayError] = useState<string | null>(null);\n\n  // Get user profile\n  const { data: userProfile } = useUserProfile();\n\n  // Use TanStack Query hooks\n  const { \n    data: activityLogs = [], // Assuming useActivityLogs directly returns ActivityLog[]\n    isLoading: isLoadingActivities,\n    isError: isActivitiesError,\n    error: activitiesError,\n    refetch,\n    isRefetching\n  } = useActivityLogs(userProfile, 20); // Pass userProfile, Fetch latest 20\n\n  const { \n    data: allUsers = [], \n    isLoading: isLoadingUsers \n  } = useAllUsers();\n  \n  const { \n    data: allMedia = [], \n    isLoading: isLoadingMedia \n  } = useTransformedMedia(userProfile); // Pass userProfile, implicitly uses 'All' for mediaTypeId\n\n  useEffect(() => {\n    if (isActivitiesError && activitiesError) {\n      const errorMessage = activitiesError instanceof Error \n        ? activitiesError.message \n        : typeof activitiesError === 'string' ? activitiesError : 'Failed to load activity logs'; // Handle non-Error objects\n      setDisplayError(errorMessage);\n    } else {\n      setDisplayError(null);\n    }\n  }, [isActivitiesError, activitiesError]);\n\n  // Process activities (enrichment, filtering) once all data is available\n  const processedActivities = React.useMemo(() => {\n    let logs: ActivityLog[] = activityLogs || []; // Use activityLogs directly\n    // For now, just return the fetched logs directly, assuming backend provides sufficient info\n    return logs;\n  }, [activityLogs]);\n\n  const finalActivities: ActivityLog[] = (activityLogs && activityLogs.length > 0) \n                          ? processedActivities \n                          : []; // Simplified: show processed or empty, no mock, no loading check needed here as UI handles loading\n\n  const handleRefresh = () => {\n    refetch();\n  };\n\n  const getActionIcon = (action: string, resourceType?: string) => {\n    switch (action.toUpperCase()) {\n      case 'UPLOAD':\n      case 'CREATE':\n        return resourceType === 'media' ? <CloudUploadIcon /> : <FaTag />;\n      case 'DELETE':\n        return <DeleteIcon />;\n      case 'EDIT':\n      case 'UPDATE':\n        return <EditIcon />;\n      case 'LOGIN':\n      case 'REGISTER':\n      case 'PROFILE_UPDATE':\n        return <PersonIcon />;\n      default:\n        return <SettingsIcon />;\n    }\n  };\n\n  const getAvatarColor = (action: string, resourceType?: string) => {\n    const actionUpper = action.toUpperCase();\n    // Specific handling for tag creation to match chip color more directly if needed\n    if (resourceType === 'tag' && actionUpper === 'CREATE') return 'var(--color-success)'; \n    if (resourceType === 'tag' && actionUpper === 'UPDATE') return 'var(--color-info)';\n    if (resourceType === 'tag' && actionUpper === 'DELETE') return 'var(--color-error)';\n\n    switch (actionUpper) {\n      case 'UPLOAD':\n        return 'var(--color-warning)';\n      case 'CREATE': \n        return 'var(--color-success)';\n      case 'DELETE': \n        return 'var(--color-error)';\n      case 'EDIT': \n      case 'UPDATE': \n        return 'var(--color-info)';\n      case 'LOGIN': \n      case 'REGISTER': \n      case 'PROFILE_UPDATE':\n        return 'var(--color-primary)';\n      default: \n        return 'var(--color-text-secondary)'; // More neutral default\n    }\n  };\n\n  const renderActivityDetails = (activity: ActivityLog) => {\n    // Debug: log the full activity object\n    console.log('RecentActivity: activity object', activity);\n    let details = activity.details || activity.action;\n    let changedFields: string[] = [];\n    let mainDetails = details;\n    let mediaLink: string | null = null;\n    let mediaLabel: string | null = null;\n\n    // Determine the consistent color for this activity item\n    const itemColor = getAvatarColor(activity.action, activity.resourceType);\n\n    // Handle Tag related activities first\n    if (activity.resourceType === 'tag' && activity.tagName) { \n      let actionText = 'Tag activity:';\n      // Color is already determined by itemColor from getAvatarColor\n\n      const actionUpper = activity.action.toUpperCase();\n      if (actionUpper === 'CREATE') {\n        actionText = 'Created tag:';\n      } else if (actionUpper === 'UPDATE') {\n        actionText = 'Updated tag:';\n      } else if (actionUpper === 'DELETE') {\n        actionText = 'Deleted tag:';\n      }\n\n      return (\n        <Box sx={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap', gap: 0.5 }}>\n          <Typography variant=\"body2\" component=\"span\" sx={{ mr: 0.5 }}>\n            {actionText}\n          </Typography>\n          <Chip \n            label={activity.tagName} \n            size=\"small\" \n            variant=\"outlined\" \n            sx={{ \n              color: itemColor, // Use itemColor\n              borderColor: itemColor, // Use itemColor\n              fontSize: \"12px\" \n            }}\n          />\n        </Box>\n      );\n    }\n\n    // Handle Tag CATEGORY related activities\n    if (activity.resourceType === 'tagCategory') {\n      let actionText = 'Tag category activity:';\n      // Use tagCategoryName if available, otherwise try to parse from details or use a default\n      const categoryName = activity.tagCategoryName || (activity as any).resourceName || 'Unnamed Category';\n      let associatedTags: Array<{ id?: string; name: string }> = [];\n\n      // Check if backend provides a direct array of tags in the log (ideal scenario)\n      // Example: if (Array.isArray(activity.loggedTags)) { associatedTags = activity.loggedTags; }\n      // For now, we parse from 'details' as per the provided log structure\n\n      if (typeof activity.details === 'string') {\n        // Regex to capture text after \"containing tags: \" or \"with tags: \"\n        const tagsStringMatch = activity.details.match(/(?:containing|with) tags: (.*)/i);\n        if (tagsStringMatch && tagsStringMatch[1]) {\n          associatedTags = tagsStringMatch[1]\n            .split(',')\n            .map(name => name.trim())\n            .filter(name => name !== '…' && name.length > 0) // Remove ellipsis and empty strings\n            .map(name => ({ name })); // Create objects { name: string }\n        }\n      }\n\n      const actionUpper = activity.action.toUpperCase();\n      if (actionUpper === 'CREATE') {\n        actionText = `Created category \"${categoryName}\" with tags:`;\n      } else if (actionUpper === 'UPDATE') {\n        actionText = `Updated category \"${categoryName}\" with tags:`;\n      } else if (actionUpper === 'DELETE') {\n        actionText = `Deleted category \"${categoryName}\".`;\n      }\n\n      return (\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: 0.5 }}>\n          <Typography variant=\"body2\" component=\"span\">\n            {actionText}\n          </Typography>\n          {associatedTags.length > 0 && (\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n              {associatedTags.map((tag, index) => (\n                <Chip \n                  key={tag.id || `tag-${index}`}\n                  label={tag.name}\n                  size=\"small\" \n                  variant=\"outlined\" \n                  sx={{ \n                    color: 'var(--color-success)', \n                    borderColor: 'var(--color-success)', \n                    fontSize: \"12px\" \n                  }}\n                />\n              ))}\n            </Box>\n          )}\n        </Box>\n      );\n    }\n\n    // Media link rendering logic (updated to use itemColor)\n    {\n      const mediaSlug = activity.mediaSlug || (activity as any)['mediaslug'];\n      const mediaTitle = activity.mediaTitle || (activity as any)['mediatitle'];\n      console.log('RecentActivity: resolved mediaSlug', mediaSlug, 'mediaTitle', mediaTitle);\n      if (activity.resourceType === 'media' && mediaSlug && mediaTitle) {\n        let displayTextBefore = '';\n        if (activity.action === 'UPLOAD') {\n          displayTextBefore = 'Uploaded media file: ';\n        } else if (activity.action === 'EDIT' || activity.action === 'UPDATE') {\n          displayTextBefore = 'Updated media file: ';\n        } else if (activity.action.toLowerCase().includes('thumbnail')) {\n          displayTextBefore = 'Updated video thumbnail for ';\n        }\n        if (typeof details === 'string' && details.includes('(') && details.includes(')')) {\n          const match = details.match(/\\(([^)]+)\\)/);\n          if (match && match[1]) {\n            changedFields = match[1].split(',').map(f => f.trim());\n          }\n        }\n        return (\n          <Box sx={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap', gap: 1 }}>\n            <Typography variant=\"body2\" component=\"span\" noWrap sx={{ mr: 1 }}>\n              {displayTextBefore}\n              <Link \n                to={`/media/slug/${mediaSlug}`} \n                style={{ \n                  textDecoration: 'underline', \n                  color: itemColor, // Use itemColor for the link\n                  fontWeight: 500 \n                }}\n              >\n                {mediaTitle}\n              </Link>\n            </Typography>\n            {changedFields.length > 0 && (\n              <Box sx={{ display: 'flex', gap: 0.5, flexWrap: 'wrap' }}>\n                {changedFields.map((field, idx) => (\n                  <Chip key={field + idx} label={field} size=\"small\" color=\"info\" variant=\"outlined\" />\n                ))}\n              </Box>\n            )}\n          </Box>\n        );\n      }\n    }\n\n    // Fallback logic for other types of links or details if needed (updated to use itemColor for links)\n    if (typeof details === 'string' && details.includes('(') && details.includes(')')) {\n      const match = details.match(/\\(([^)]+)\\)/);\n      if (match && match[1]) {\n        changedFields = match[1].split(',').map(f => f.trim());\n        mainDetails = details.replace(/\\s*\\([^)]+\\)/, '').trim();\n      }\n    }\n\n    const actionType = (activity.action || '').toUpperCase();\n    let foundTitle: string = '';\n    let foundMedia: TransformedMediaFile | undefined;\n    let shouldTryUpdateLink = false;\n    let displayTextBefore = '';\n    let displayTextAfter = '';\n\n    if (actionType === 'UPLOAD') {\n      if (activity.targetSlug) {\n        mediaLink = `/media/slug/${activity.targetSlug}`;\n        foundMedia = allMedia.find(m => m.slug === activity.targetSlug);\n        mediaLabel = foundMedia?.title || foundMedia?.metadata?.fileName || 'Media File';\n        displayTextBefore = 'Uploaded media file: ';\n      } else if (activity.targetId) {\n        foundMedia = allMedia.find(m => m._id === activity.targetId || m.id === activity.targetId);\n        if (foundMedia && foundMedia.slug) {\n          mediaLink = `/media/slug/${foundMedia.slug}`;\n          mediaLabel = foundMedia.title || foundMedia.metadata?.fileName || 'Media File';\n          displayTextBefore = 'Uploaded media file: ';\n        }\n      } else if (details.startsWith('Uploaded media file:')) {\n        foundTitle = details.split(':').pop()?.trim() || '';\n        foundMedia = allMedia.find(\n          m => (m.title && m.title.toLowerCase() === foundTitle.toLowerCase()) ||\n               (m.metadata?.fileName && m.metadata.fileName.toLowerCase() === foundTitle.toLowerCase())\n        );\n        if (foundMedia && foundMedia.slug) {\n          mediaLink = `/media/slug/${foundMedia.slug}`;\n          mediaLabel = foundTitle;\n          displayTextBefore = 'Uploaded media file: ';\n        }\n      }\n    } else {\n      if (typeof details === 'string') {\n        if (details.startsWith('Updated media file:')) {\n          foundTitle = details.split(':').pop()?.trim() || '';\n          shouldTryUpdateLink = true;\n          displayTextBefore = 'Updated media file: ';\n        } else if (details.toLowerCase().includes('updated video thumbnail')) {\n          const forIdx = details.toLowerCase().lastIndexOf(' for ');\n          if (forIdx !== -1) {\n            foundTitle = details.substring(forIdx + 5).trim();\n            shouldTryUpdateLink = true;\n            displayTextBefore = 'Updated video thumbnail for ';\n          }\n        }\n        if (shouldTryUpdateLink && foundTitle) {\n          foundMedia = allMedia.find(\n            m => (m.title && m.title.toLowerCase() === foundTitle.toLowerCase()) ||\n                 (m.metadata?.fileName && m.metadata.fileName.toLowerCase() === foundTitle.toLowerCase())\n          );\n          if (foundMedia && foundMedia.slug) {\n            mediaLink = `/media/slug/${foundMedia.slug}`;\n            mediaLabel = foundTitle;\n          }\n        }\n      }\n    }\n\n    return (\n      <Box sx={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap', gap: 1 }}>\n        <Typography variant=\"body2\" component=\"span\" noWrap sx={{ mr: 1 }}>\n          {mediaLink && mediaLabel ? (\n            <>\n              {displayTextBefore}\n              <Link \n                to={mediaLink} \n                style={{ \n                  textDecoration: 'underline', \n                  color: itemColor, // Use itemColor for this link too\n                  fontWeight: 500 \n                }}\n              >\n                {mediaLabel}\n              </Link>\n              {displayTextAfter}\n            </>\n          ) : (\n            mainDetails\n          )}\n        </Typography>\n        {changedFields.length > 0 && (\n          <Box sx={{ display: 'flex', gap: 0.5, flexWrap: 'wrap' }}>\n            {changedFields.map((field, idx) => (\n              <Chip key={field + idx} label={field} size=\"small\" color=\"info\" variant=\"outlined\" />\n            ))}\n          </Box>\n        )}\n      </Box>\n    );\n  };\n\n  const formatRelativeTime = (timestamp: string) => {\n    // ... (keep existing logic)\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n\n    if (diffInSeconds < 60) return `${diffInSeconds}s ago`;\n    const diffInMinutes = Math.floor(diffInSeconds / 60);\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    return date.toLocaleDateString();\n  };\n\n  if (isLoadingActivities || isLoadingUsers || isLoadingMedia) {\n    return (\n      <Paper sx={{ padding: 2, textAlign: 'center', minHeight: 300, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n        <CircularProgress />\n        <Typography sx={{ ml: 2 }}>Loading recent activities...</Typography>\n      </Paper>\n    );\n  }\n\n  // const testAuthentication = async () => { ... }; // This can be removed or adapted if still needed\n\n  return (\n    <Paper elevation={3} sx={{ p: 2, display: 'flex', flexDirection: 'column', height: '100%' }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h6\">Recent Activity</Typography>\n        <Button \n          variant=\"outlined\" \n          size=\"small\"\n          onClick={handleRefresh} \n          startIcon={isRefetching ? <CircularProgress size={16} color=\"inherit\" /> : <RefreshIcon />}\n          disabled={isRefetching || isLoadingActivities}\n        >\n          Refresh\n        </Button>\n      </Box>\n      {displayError && (\n        <Typography color=\"error\" sx={{ mb: 2 }}>Error: {displayError}</Typography>\n      )}\n      {finalActivities.length === 0 && !displayError && (\n        <Typography sx={{ textAlign: 'center', py: 3 }}>No recent activity found.</Typography>\n      )}\n      <List dense>\n        {finalActivities.map((activity: ActivityLog, index: number) => { // Added types for activity and index\n          const user = activity.userId ? allUsers.find(u => u._id === activity.userId) : null;\n          const userDisplayName = user?.username || activity.username || 'System';\n          // const avatarText = user?.firstName && user?.lastName \n          //                   ? `${user.firstName[0]}${user.lastName[0]}` \n          //                   : userDisplayName.substring(0, 1).toUpperCase();\n\n          return (\n            <React.Fragment key={activity._id || index}>\n              <ListItem alignItems=\"flex-start\">\n                <ListItemAvatar>\n                  <Avatar sx={{ bgcolor: getAvatarColor(activity.action, activity.resourceType), width: 36, height: 36 }}>\n                    {getActionIcon(activity.action, activity.resourceType)}\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={renderActivityDetails(activity)}\n                  secondary={\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      By: {userDisplayName} - {formatRelativeTime(activity.timestamp)}\n                    </Typography>\n                  }\n                />\n              </ListItem>\n              {index < finalActivities.length - 1 && <Divider variant=\"inset\" component=\"li\" />}\n            </React.Fragment>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n};\n\nexport default RecentActivity;","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/AdminDashboard/StorageUsageChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/AdminDashboard/SystemSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3089,3092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3089,3092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3790,3793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3790,3793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":396,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":396,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13124,13127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13124,13127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Paper,\n  Typography,\n  Switch,\n  FormControl,\n  FormControlLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Button,\n  Chip,\n  IconButton,\n  Divider,\n  CircularProgress,\n  Tooltip,\n  Alert,\n  Box,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  InputLabel,\n  Checkbox,\n  ListItemText,\n  Tab,\n  Tabs\n} from '@mui/material';\nimport { FaPlus, FaTrash, FaEdit, FaSave, FaEnvelope } from 'react-icons/fa';\nimport { \n  useNotificationSettings,\n  useUpdateNotificationSettings,\n  useAddNotificationRule,\n  useUpdateNotificationRule,\n  useDeleteNotificationRule,\n  useEligibleRecipients,\n  useSendTestNotification,\n  useUserProfile,\n  User\n} from '../../hooks/query-hooks';\nimport './systemSettings.scss';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`system-settings-tabpanel-${index}`}\n      aria-labelledby={`system-settings-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n};\n\ninterface NotificationSettingsProps {\n  userProfile: User | null | undefined; // Use the actual User type if available\n}\n\nconst NotificationSettings: React.FC<NotificationSettingsProps> = ({ userProfile }) => {\n  // Query hooks for data fetching\n  const { data: settings, isLoading, isError, error } = useNotificationSettings(userProfile);\n  const { \n    data: eligibleRecipients = [], \n    isLoading: isLoadingRecipients,\n    isError: isRecipientsError,\n    error: recipientsError,\n    refetch: refetchRecipients\n  } = useEligibleRecipients(userProfile);\n  const { mutateAsync: updateSettings } = useUpdateNotificationSettings(userProfile);\n  const { mutateAsync: addRule } = useAddNotificationRule(userProfile);\n  const { mutateAsync: updateRule } = useUpdateNotificationRule(userProfile);\n  const { mutateAsync: deleteRule } = useDeleteNotificationRule(userProfile);\n  const { mutateAsync: sendTestNotification, isPending: isSendingTest } = useSendTestNotification(userProfile);\n  \n  // Local state for form\n  const [isEnabled, setIsEnabled] = useState(false);\n  const [frequency, setFrequency] = useState('immediate');\n  const [recipients, setRecipients] = useState<string[]>([]);\n  const [scheduledTime, setScheduledTime] = useState('09:00');\n  const [showRuleDialog, setShowRuleDialog] = useState(false);\n  const [editingRuleId, setEditingRuleId] = useState<string | null>(null);\n  const [ruleForm, setRuleForm] = useState({\n    name: '',\n    enabled: true,\n    actionTypes: ['ALL'],\n    resourceTypes: ['ALL'],\n    triggerRoles: ['ALL'],\n    priority: 'normal',\n    includeDetails: true\n  });\n  \n  // Initialize form state from fetched data\n  React.useEffect(() => {\n    if (settings) {\n      setIsEnabled(settings.enabled);\n      setFrequency(settings.frequency);\n      setRecipients(settings.recipients.map((r: any) => r._id));\n      setScheduledTime(settings.scheduledTime);\n    }\n  }, [settings]);\n  \n  // Handle form submission\n  const handleSaveSettings = async () => {\n    const updatedSettings = {\n      enabled: isEnabled,\n      frequency,\n      recipients,\n      scheduledTime\n    };\n    \n    await updateSettings(updatedSettings);\n  };\n  \n  // Handle rule dialog\n  const openAddRuleDialog = () => {\n    setRuleForm({\n      name: '',\n      enabled: true,\n      actionTypes: ['ALL'],\n      resourceTypes: ['ALL'],\n      triggerRoles: ['ALL'],\n      priority: 'normal',\n      includeDetails: true\n    });\n    setEditingRuleId(null);\n    setShowRuleDialog(true);\n  };\n  \n  const openEditRuleDialog = (rule: any) => {\n    setRuleForm({\n      name: rule.name,\n      enabled: rule.enabled,\n      actionTypes: rule.actionTypes,\n      resourceTypes: rule.resourceTypes,\n      triggerRoles: rule.triggerRoles,\n      priority: rule.priority || 'normal',\n      includeDetails: rule.includeDetails !== undefined ? rule.includeDetails : true\n    });\n    setEditingRuleId(rule._id);\n    setShowRuleDialog(true);\n  };\n  \n  const closeRuleDialog = () => {\n    setShowRuleDialog(false);\n  };\n  \n  const handleSaveRule = async () => {\n    if (editingRuleId) {\n      await updateRule({ ruleId: editingRuleId, updates: ruleForm });\n    } else {\n      await addRule(ruleForm);\n    }\n    closeRuleDialog();\n  };\n  \n  const handleDeleteRule = async (ruleId: string) => {\n    if (confirm('Are you sure you want to delete this rule?')) {\n      await deleteRule(ruleId);\n    }\n  };\n  \n  const handleTestNotification = async () => {\n    await sendTestNotification(recipients);\n  };\n  \n  if (isLoading || isLoadingRecipients) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n  \n  if (isError) {\n    return (\n      <Alert severity=\"error\">\n        <Typography variant=\"h6\">Error loading notification settings</Typography>\n        <Typography>{error instanceof Error ? error.message : 'An unknown error occurred'}</Typography>\n      </Alert>\n    );\n  }\n  \n  const actionTypeOptions = ['ALL', 'UPLOAD', 'DELETE', 'EDIT', 'CREATE', 'VIEW'];\n  const resourceTypeOptions = ['ALL', 'media', 'mediaType', 'user', 'system', 'tag', 'tagCategory'];\n  const roleOptions = ['ALL', 'user', 'admin', 'superAdmin'];\n  const priorityOptions = ['low', 'normal', 'high'];\n  \n  return (\n    <div className=\"notification-settings\">\n      {/* Global notification settings */}\n      <div className=\"notification-settings-header\">\n        <div className=\"notification-settings-title\">\n          <Typography variant=\"h6\">Email Notification Settings</Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Configure when and how email notifications are sent for system activities.\n          </Typography>\n        </div>\n        <div className=\"notification-settings-actions\">\n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            startIcon={<FaSave />}\n            onClick={handleSaveSettings}\n          >\n            Save Settings\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"secondary\"\n            startIcon={<FaEnvelope />}\n            onClick={handleTestNotification}\n            disabled={isSendingTest || !isEnabled || recipients.length === 0}\n          >\n            {isSendingTest ? 'Sending...' : 'Send Test Email'}\n          </Button>\n        </div>\n      </div>\n      \n      <Divider sx={{ my: 2 }} />\n      \n      <div className=\"notification-settings-grid\">\n        {/* Enable/disable notifications */}\n        <div className=\"notification-settings-section\">\n          <FormControlLabel\n            control={\n              <Switch\n                checked={isEnabled}\n                onChange={(e) => setIsEnabled(e.target.checked)}\n                color=\"primary\"\n              />\n            }\n            label=\"Enable Email Notifications\"\n          />\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            When enabled, activity notifications will be sent according to your settings.\n          </Typography>\n        </div>\n        \n        {/* Notification frequency */}\n        <div className=\"notification-settings-section\">\n          <FormControl fullWidth sx={{ mb: 2 }}>\n            <InputLabel id=\"frequency-label\">Notification Frequency</InputLabel>\n            <Select\n              labelId=\"frequency-label\"\n              value={frequency}\n              onChange={(e) => setFrequency(e.target.value)}\n              disabled={!isEnabled}\n              label=\"Notification Frequency\"\n            >\n              <MenuItem value=\"immediate\">Immediate (send as events occur)</MenuItem>\n              <MenuItem value=\"hourly\">Hourly Digest</MenuItem>\n              <MenuItem value=\"daily\">Daily Digest</MenuItem>\n              <MenuItem value=\"weekly\">Weekly Digest</MenuItem>\n            </Select>\n          </FormControl>\n          \n          {frequency !== 'immediate' && (\n            <div className=\"scheduled-time\">\n              <Typography variant=\"body2\" sx={{ mb: 1 }}>Scheduled Time (24h format):</Typography>\n              <TextField\n                type=\"time\"\n                value={scheduledTime}\n                onChange={(e) => setScheduledTime(e.target.value)}\n                sx={{ width: '120px' }}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                inputProps={{\n                  step: 300, // 5 min\n                }}\n                disabled={!isEnabled}\n              />\n            </div>\n          )}\n        </div>\n        \n        {/* Recipients */}\n        <div className=\"notification-settings-section recipients-section\">\n          <FormControl fullWidth>\n            <InputLabel id=\"recipients-label\">Recipients</InputLabel>\n            <Select\n              labelId=\"recipients-label\"\n              multiple\n              value={recipients}\n              onChange={(e) => setRecipients(e.target.value as string[])}\n              disabled={!isEnabled}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => {\n                    const recipient = eligibleRecipients?.find((r) => r._id === value);\n                    return (\n                      <Chip \n                        key={value} \n                        label={recipient ? (recipient.username || recipient.email) : value} \n                        size=\"small\" \n                      />\n                    );\n                  })}\n                </Box>\n              )}\n            >\n              {isLoadingRecipients && (\n                <MenuItem disabled>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <CircularProgress size={20} />\n                    <Typography variant=\"body2\">Loading recipients...</Typography>\n                  </Box>\n                </MenuItem>\n              )}\n              \n              {isRecipientsError && (\n                <MenuItem disabled>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, color: 'error.main' }}>\n                    <Typography variant=\"body2\">\n                      Error loading recipients: {recipientsError instanceof Error ? recipientsError.message : 'Unknown error'}\n                    </Typography>\n                  </Box>\n                </MenuItem>\n              )}\n              \n              {!isLoadingRecipients && !isRecipientsError && eligibleRecipients.length === 0 && (\n                <MenuItem disabled>\n                  <Typography variant=\"body2\">No admin users found. Please ensure there are admin users in the system.</Typography>\n                </MenuItem>\n              )}\n              \n              {eligibleRecipients?.map((user) => (\n                <MenuItem key={user._id} value={user._id}>\n                  <Checkbox checked={recipients.indexOf(user._id) > -1} />\n                  <ListItemText \n                    primary={user.username || user.email} \n                    secondary={`${user.firstName || ''} ${user.lastName || ''} (${user.role})`} \n                  />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <Box sx={{ mt: 1, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Select which administrators will receive notification emails.\n            </Typography>\n            \n            <Button \n              size=\"small\" \n              variant=\"outlined\" \n              onClick={() => refetchRecipients()}\n              disabled={isLoadingRecipients}\n              startIcon={isLoadingRecipients ? <CircularProgress size={16} /> : null}\n            >\n              Refresh Recipients\n            </Button>\n          </Box>\n        </div>\n      </div>\n      \n      <Divider sx={{ my: 3 }} />\n      \n      {/* Notification rules */}\n      <div className=\"notification-rules-section\">\n        <div className=\"notification-rules-header\">\n          <Typography variant=\"h6\">Notification Rules</Typography>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<FaPlus />}\n            onClick={openAddRuleDialog}\n            disabled={!isEnabled}\n          >\n            Add Rule\n          </Button>\n        </div>\n        \n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\n          Define rules to determine which activities should trigger notifications.\n        </Typography>\n        \n        {settings?.rules?.length === 0 ? (\n          <Alert severity=\"info\" sx={{ my: 2 }}>\n            No notification rules defined. Add a rule to start receiving notifications.\n          </Alert>\n        ) : (\n          <div className=\"rules-container\">\n            {settings?.rules?.map((rule: any) => (\n              <Paper key={rule._id} className=\"rule-card\" variant=\"outlined\">\n                <div className=\"rule-header\">\n                  <div className=\"rule-name\">\n                    <Typography variant=\"subtitle1\">\n                      {rule.name}\n                    </Typography>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          size=\"small\"\n                          checked={rule.enabled}\n                          onChange={async (e) => {\n                            await updateRule({\n                              ruleId: rule._id,\n                              updates: { ...rule, enabled: e.target.checked }\n                            });\n                          }}\n                        />\n                      }\n                      label={rule.enabled ? \"Enabled\" : \"Disabled\"}\n                    />\n                  </div>\n                  <div className=\"rule-actions\">\n                    <Tooltip title=\"Edit Rule\">\n                      <IconButton \n                        size=\"small\" \n                        color=\"primary\"\n                        onClick={() => openEditRuleDialog(rule)}\n                      >\n                        <FaEdit />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Delete Rule\">\n                      <IconButton \n                        size=\"small\" \n                        color=\"error\"\n                        onClick={() => handleDeleteRule(rule._id)}\n                      >\n                        <FaTrash />\n                      </IconButton>\n                    </Tooltip>\n                  </div>\n                </div>\n                \n                <Divider sx={{ my: 1 }} />\n                \n                <div className=\"rule-content\">\n                  <div className=\"rule-section\">\n                    <Typography variant=\"body2\" color=\"textSecondary\">Action Types:</Typography>\n                    <div className=\"rule-chips\">\n                      {rule.actionTypes.map((action: string) => (\n                        <Chip \n                          key={action} \n                          label={action} \n                          size=\"small\" \n                          color={action === 'ALL' ? 'primary' : 'default'} \n                          variant=\"outlined\"\n                        />\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div className=\"rule-section\">\n                    <Typography variant=\"body2\" color=\"textSecondary\">Resource Types:</Typography>\n                    <div className=\"rule-chips\">\n                      {rule.resourceTypes.map((resource: string) => (\n                        <Chip \n                          key={resource} \n                          label={resource} \n                          size=\"small\" \n                          color={resource === 'ALL' ? 'primary' : 'default'} \n                          variant=\"outlined\"\n                        />\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div className=\"rule-section\">\n                    <Typography variant=\"body2\" color=\"textSecondary\">Triggered By:</Typography>\n                    <div className=\"rule-chips\">\n                      {rule.triggerRoles.map((role: string) => (\n                        <Chip \n                          key={role} \n                          label={role} \n                          size=\"small\" \n                          color={role === 'ALL' ? 'primary' : 'default'} \n                          variant=\"outlined\"\n                        />\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div className=\"rule-section\">\n                    <Typography variant=\"body2\" color=\"textSecondary\">Priority:</Typography>\n                    <Chip \n                      label={rule.priority || 'normal'} \n                      size=\"small\" \n                      color={\n                        rule.priority === 'high' ? 'error' : \n                        rule.priority === 'low' ? 'default' : 'primary'\n                      } \n                      variant=\"outlined\"\n                    />\n                  </div>\n                </div>\n              </Paper>\n            ))}\n          </div>\n        )}\n      </div>\n      \n      {/* Rule dialog */}\n      <Dialog \n        open={showRuleDialog} \n        onClose={closeRuleDialog}\n        fullWidth\n        maxWidth=\"md\"\n      >\n        <DialogTitle>\n          {editingRuleId ? 'Edit Notification Rule' : 'Add Notification Rule'}\n        </DialogTitle>\n        <DialogContent>\n          <div className=\"rule-form\">\n            <div className=\"rule-form-grid\">\n              <TextField\n                label=\"Rule Name\"\n                value={ruleForm.name}\n                onChange={(e) => setRuleForm({ ...ruleForm, name: e.target.value })}\n                fullWidth\n                required\n                sx={{ gridArea: 'name' }}\n              />\n              \n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={ruleForm.enabled}\n                    onChange={(e) => setRuleForm({ ...ruleForm, enabled: e.target.checked })}\n                  />\n                }\n                label=\"Enabled\"\n                sx={{ gridArea: 'enabled' }}\n              />\n              \n              <FormControl fullWidth sx={{ gridArea: 'actions' }}>\n                <InputLabel>Action Types</InputLabel>\n                <Select\n                  multiple\n                  value={ruleForm.actionTypes}\n                  onChange={(e) => setRuleForm({ ...ruleForm, actionTypes: e.target.value as string[] })}\n                  renderValue={(selected) => (\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                      {selected.map((value) => (\n                        <Chip key={value} label={value} size=\"small\" />\n                      ))}\n                    </Box>\n                  )}\n                >\n                  {actionTypeOptions.map((action) => (\n                    <MenuItem key={action} value={action}>\n                      <Checkbox checked={ruleForm.actionTypes.indexOf(action) > -1} />\n                      <ListItemText primary={action} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n              \n              <FormControl fullWidth sx={{ gridArea: 'resources' }}>\n                <InputLabel>Resource Types</InputLabel>\n                <Select\n                  multiple\n                  value={ruleForm.resourceTypes}\n                  onChange={(e) => setRuleForm({ ...ruleForm, resourceTypes: e.target.value as string[] })}\n                  renderValue={(selected) => (\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                      {selected.map((value) => (\n                        <Chip key={value} label={value} size=\"small\" />\n                      ))}\n                    </Box>\n                  )}\n                >\n                  {resourceTypeOptions.map((resource) => (\n                    <MenuItem key={resource} value={resource}>\n                      <Checkbox checked={ruleForm.resourceTypes.indexOf(resource) > -1} />\n                      <ListItemText primary={resource} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n              \n              <FormControl fullWidth sx={{ gridArea: 'roles' }}>\n                <InputLabel>Trigger Roles</InputLabel>\n                <Select\n                  multiple\n                  value={ruleForm.triggerRoles}\n                  onChange={(e) => setRuleForm({ ...ruleForm, triggerRoles: e.target.value as string[] })}\n                  renderValue={(selected) => (\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                      {selected.map((value) => (\n                        <Chip key={value} label={value} size=\"small\" />\n                      ))}\n                    </Box>\n                  )}\n                >\n                  {roleOptions.map((role) => (\n                    <MenuItem key={role} value={role}>\n                      <Checkbox checked={ruleForm.triggerRoles.indexOf(role) > -1} />\n                      <ListItemText primary={role} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n              \n              <FormControl fullWidth sx={{ gridArea: 'priority' }}>\n                <InputLabel>Priority</InputLabel>\n                <Select\n                  value={ruleForm.priority}\n                  onChange={(e) => setRuleForm({ ...ruleForm, priority: e.target.value })}\n                >\n                  {priorityOptions.map((priority) => (\n                    <MenuItem key={priority} value={priority}>\n                      {priority.charAt(0).toUpperCase() + priority.slice(1)}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n              \n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={ruleForm.includeDetails}\n                    onChange={(e) => setRuleForm({ ...ruleForm, includeDetails: e.target.checked })}\n                  />\n                }\n                label=\"Include Details in Notification\"\n                sx={{ gridArea: 'details' }}\n              />\n            </div>\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={closeRuleDialog}>Cancel</Button>\n          <Button \n            onClick={handleSaveRule} \n            variant=\"contained\" \n            color=\"primary\"\n            disabled={!ruleForm.name}\n          >\n            {editingRuleId ? 'Update Rule' : 'Add Rule'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nconst SystemSettings: React.FC = () => {\n  const [activeTab, setActiveTab] = useState(0);\n  \n  // Get current user profile using TanStack Query\n  const { data: userProfile, isLoading: isLoadingUserProfile } = useUserProfile();\n  const isAuthorized = userProfile?.role === 'superAdmin';\n  \n  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n  \n  if (isLoadingUserProfile) {\n    return (\n      <Paper elevation={2} className=\"dashboard-card\" sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', p: 3, minHeight: 200 }}>\n        <CircularProgress />\n        <Typography sx={{ ml: 2 }}>Loading user profile...</Typography>\n      </Paper>\n    );\n  }\n  \n  if (!isAuthorized) {\n    return (\n      <Paper elevation={2} className=\"dashboard-card\">\n        <Alert severity=\"warning\">\n          <Typography variant=\"h6\">Access Restricted</Typography>\n          <Typography>You need superAdmin privileges to view System Settings.</Typography>\n        </Alert>\n      </Paper>\n    );\n  }\n  \n  return (\n    <Paper elevation={2} className=\"system-settings-container\">\n      <Typography variant=\"h6\" gutterBottom>System Settings</Typography>\n      \n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n        <Tabs \n          value={activeTab} \n          onChange={handleTabChange} \n          aria-label=\"system settings tabs\"\n        >\n          <Tab label=\"Email Notifications\" id=\"system-settings-tab-0\" />\n          <Tab label=\"General Settings\" id=\"system-settings-tab-1\" disabled />\n        </Tabs>\n      </Box>\n      \n      <TabPanel value={activeTab} index={0}>\n        <NotificationSettings userProfile={userProfile} />\n      </TabPanel>\n      \n      <TabPanel value={activeTab} index={1}>\n        <Typography>General System Settings (Coming soon)</Typography>\n      </TabPanel>\n    </Paper>\n  );\n};\n\nexport default SystemSettings; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/AdminDashboard/UserActivity.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[804,807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[804,807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2903,2906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2903,2906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5896,5899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5896,5899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Paper, \n  Typography, \n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Avatar,\n  Chip,\n  Skeleton\n} from '@mui/material';\nimport { \n  useUserActivities, \n  useAllUsers, \n  useUserProfile,\n  User as UserType \n} from '../../hooks/query-hooks';\n\n// User activity interface - ensure this matches the data from fetchUserActivities\ninterface UserActivityEntry {\n  _id: string; // Assuming API returns _id\n  userId: string;\n  username?: string; // Make optional if not always present\n  email?: string;    // Make optional\n  action: string;\n  ip?: string;\n  userAgent?: string;\n  timestamp: string;\n  // Add other fields as returned by your API\n  details?: string | { message?: string; [key: string]: any }; // Allow details to be string or object\n  targetId?: string;\n  targetType?: string;\n}\n\nconst UserActivity: React.FC = () => {\n  const [page, setPage] = useState(0); // API is 1-indexed, UI is 0-indexed for MUI TablePagination\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  // Get userProfile for enabling the query\n  const { data: userProfile } = useUserProfile();\n\n  // Use TanStack Query hooks\n  const { \n    data: activityData, // Contains { data: UserActivityEntry[], total: number }\n    isLoading,\n    isError,\n    error,\n    // refetch // Can be used for manual refetching if needed\n  } = useUserActivities(userProfile, page + 1, rowsPerPage); // Pass userProfile and 1-indexed page\n\n  const { data: allUsers = [], isLoading: isLoadingUsers } = useAllUsers();\n\n  // Extracted activities and total count\n  const activities = activityData?.data || [];\n  const total = activityData?.total || 0;\n\n  const handleChangePage = (_event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0); // Reset to first page when rows per page changes\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    return new Date(timestamp).toLocaleString();\n  };\n\n  const getActionColor = (action: string) => {\n    switch (action.toUpperCase()) {\n      case 'LOGIN': return 'success';\n      case 'LOGOUT': return 'default';\n      case 'CREATE':\n      case 'UPLOAD': return 'primary';\n      case 'UPDATE': return 'info';\n      case 'DELETE': return 'error';\n      case 'PASSWORD_CHANGE': return 'warning';\n      case 'PROFILE_UPDATE': return 'secondary';\n      default: return 'default';\n    }\n  };\n\n  // Find user details for a given activity\n  const getUserForActivity = (userId: string): UserType | undefined => {\n    return allUsers.find(user => user._id === userId || user.id === userId);\n  };\n\n  // Helper to render activity.details safely\n  const renderActivityDetailsString = (details: string | { message?: string;[key: string]: any } | undefined): string => {\n    if (typeof details === 'string') {\n      return details;\n    }\n    if (typeof details === 'object' && details !== null) {\n      if (details.message && typeof details.message === 'string') {\n        return details.message;\n      }\n      return JSON.stringify(details);\n    }\n    return 'N/A';\n  };\n\n  if (isLoading || isLoadingUsers) {\n    return (\n      <Paper sx={{ padding: 2, textAlign: 'center' }}>\n        <Skeleton />\n        <Typography sx={{ mt: 1 }}>Loading user activities...</Typography>\n      </Paper>\n    );\n  }\n\n  if (isError) {\n    return (\n      <Paper sx={{ padding: 2, textAlign: 'center' }}>\n        <Typography color=\"error\">\n          Error loading user activities: {error instanceof Error ? error.message : 'Unknown error'}\n        </Typography>\n      </Paper>\n    );\n  }\n\n  return (\n    <Paper sx={{ padding: 2, marginTop: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>User Activity Logs</Typography>\n      {activities.length === 0 && !isLoading ? (\n        <Typography sx={{ textAlign: 'center', p: 2 }}>No user activities found.</Typography>\n      ) : (\n        <TableContainer>\n          <Table stickyHeader size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell>User</TableCell><TableCell>Action</TableCell><TableCell>Details</TableCell><TableCell>Timestamp</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {activities.map((activity: UserActivityEntry) => {\n                const user = getUserForActivity(activity.userId);\n                const userDisplayName = user?.username || user?.email || activity.username || activity.userId;\n                const avatarText = user?.firstName && user?.lastName \n                                  ? `${user.firstName[0]}${user.lastName[0]}` \n                                  : userDisplayName.substring(0, 2).toUpperCase();\n                return (\n                  <TableRow hover key={activity._id}>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Avatar sx={{ width: 30, height: 30, mr: 1, fontSize: '0.8rem' }} src={user?.avatar}>\n                          {avatarText}\n                        </Avatar>\n                        <Box>\n                          <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>{userDisplayName}</Typography>\n                          {user?.email && <Typography variant=\"caption\" color=\"textSecondary\">{user.email}</Typography>}\n                          {!user && activity.email && <Typography variant=\"caption\" color=\"textSecondary\">{activity.email}</Typography>}\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Chip \n                        label={activity.action}\n                        size=\"small\"\n                        color={getActionColor(activity.action) as any} // Cast needed if getActionColor returns string not matching ChipProps color\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"caption\" display=\"block\">IP: {activity.ip || 'N/A'}</Typography>\n                      <Typography variant=\"caption\" display=\"block\">Agent: {activity.userAgent ? activity.userAgent.substring(0, 50) + '...' : 'N/A'}</Typography>\n                      {activity.targetType && activity.targetId && \n                        <Typography variant=\"caption\" display=\"block\">Target: {activity.targetType} ({activity.targetId.substring(0,8)}...)</Typography>}\n                      {activity.details && <Typography variant=\"caption\" display=\"block\">{renderActivityDetailsString(activity.details)}</Typography>}\n                    </TableCell>\n                    <TableCell>{formatTimestamp(activity.timestamp)}</TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 25, 50]}\n        component=\"div\"\n        count={total} // Use total count from API response\n        rowsPerPage={rowsPerPage}\n        page={page} // UI page is 0-indexed\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n};\n\nexport default UserActivity; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/AdminDashboard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/EditAcceptedFileTypes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/Home.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/Home.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchContacts'. Either include it or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchContacts]","fix":{"range":[2305,2307],"text":"[fetchContacts]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'fetchContacts'. Either include it or remove the dependency array.","line":85,"column":6,"nodeType":"ArrayExpression","endLine":85,"endColumn":47,"suggestions":[{"desc":"Update the dependencies array to be: [paginationModel.page, hasMore, fetchContacts, nextPage]","fix":{"range":[2560,2601],"text":"[paginationModel.page, hasMore, fetchContacts, nextPage]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useMemo, useCallback } from 'react';\nimport { Box, Paper, Typography } from \"@mui/material\";\nimport axios from 'axios';\nimport { DataGrid, GridColDef, GridPaginationModel, GridToolbar } from '@mui/x-data-grid';\nimport { motion } from 'framer-motion';\nimport './home.scss';\n\ninterface ContactProperties {\n  createdate: string;\n  email: string;\n  firstname: string;\n  hs_object_id: string;\n  lastmodifieddate: string;\n  lastname: string;\n}\n\ninterface Contact {\n  id: string;\n  properties: ContactProperties;\n  createdAt: string;\n  updatedAt: string;\n  archived: boolean;\n}\n\ninterface HubSpotResponse {\n  results: Contact[];\n  paging?: {\n    next?: {\n      after: string;\n      link: string;\n    };\n  };\n}\n\nconst HomePage: React.FC = () => {\n\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [nextPage, setNextPage] = useState<string | null>(null);\n  const [paginationModel, setPaginationModel] = useState<GridPaginationModel>({ pageSize: 10, page: 0 });\n  const [hasMore, setHasMore] = useState<boolean>(true);\n\n  \n\n  const fetchContacts = async (after?: string, pageSize: number = paginationModel.pageSize) => {\n    try {\n      const response = await axios.get<HubSpotResponse>('/api/hubspot/contacts', {\n        params: { after, limit: pageSize },\n      });\n      const fetchedContacts = response.data.results;\n      setContacts(fetchedContacts);\n      localStorage.setItem('contacts', JSON.stringify(fetchedContacts));\n      setNextPage(response.data.paging?.next?.after || null);\n      setHasMore(fetchedContacts.length === pageSize);\n      setLoading(false);\n    } catch (err) {\n      console.error('Failed to fetch contacts', err);\n      setError('Failed to fetch contacts');\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const cachedContacts = localStorage.getItem('contacts');\n    if (cachedContacts) {\n      const parsedContacts = JSON.parse(cachedContacts);\n      console.log(\"Cached contacts:\", parsedContacts);\n      if (parsedContacts.length > 0) {\n        setContacts(parsedContacts);\n        setLoading(false);\n      } else {\n        fetchContacts();\n      }\n    } else {\n      fetchContacts();\n    }\n  }, []);\n\n  const handlePaginationChange = useCallback((newModel: GridPaginationModel) => {\n    setPaginationModel(newModel);\n    if (newModel.page > paginationModel.page && hasMore) {\n      fetchContacts(nextPage ?? undefined, newModel.pageSize);\n    }\n  }, [paginationModel.page, hasMore, nextPage]);\n\n  const columns: GridColDef[] = useMemo(() => [\n    { field: 'id', headerName: 'ID', flex: 0.5 },\n    { field: 'firstname', headerName: 'First Name', flex: 1 },\n    { field: 'lastname', headerName: 'Last Name', flex: 1 },\n    { field: 'email', headerName: 'Email', flex: 1.5 },\n    { field: 'createdate', headerName: 'Created Date', flex: 1 },\n    { field: 'lastmodifieddate', headerName: 'Last Modified Date', flex: 1 },\n  ], []);\n\n  const rows = useMemo(() => contacts.map(contact => ({\n    id: contact.id,\n    firstname: contact.properties.firstname,\n    lastname: contact.properties.lastname,\n    email: contact.properties.email,\n    createdate: contact.properties.createdate,\n    lastmodifieddate: contact.properties.lastmodifieddate,\n  })), [contacts]);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 50 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n    <Box id=\"home-page\">\n      <Paper elevation={3}  sx={{ background: 'none', padding: '2rem', width: \"100%\", height: \"100%\" }}>\n      <Typography variant=\"h2\" align=\"left\" sx={{paddingBottom: '2rem'}}>HubSpot Contacts</Typography>\n        {loading ? (\n          <Typography>Loading...</Typography>\n        ) : error ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : (\n          <div className=\"data-grid-container\">\n            <DataGrid\n              slots={{\n                toolbar: GridToolbar,\n              }}\n              rows={rows}\n              columns={columns}\n              paginationModel={paginationModel}\n              onPaginationModelChange={handlePaginationChange}\n              pageSizeOptions={[5, 10, 20]}\n              pagination\n              rowCount={hasMore ? -1 : contacts.length}\n              paginationMode=\"server\"\n              autoHeight\n            />\n          </div>\n        )}\n      </Paper>\n    </Box>\n    </motion.div>\n  );\n};\n\nexport default HomePage;","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaDetail/MediaDetail.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaDetail/MediaDetail.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1677,1680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1677,1680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1715,1718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1715,1718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":797,"column":100,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":797,"endColumn":103,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27628,27631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27628,27631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":834,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":834,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29252,29255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29252,29255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":856,"column":44,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":856,"endColumn":58,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[30344,30386],"text":"Object.prototype.hasOwnProperty.call((updatedMediaFile.metadata!), "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":882,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":882,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31819,31822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31819,31822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":888,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":888,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31957,31960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31957,31960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updatedMediaFile' is defined but never used.","line":894,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":894,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":894,"column":107,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":894,"endColumn":110,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32137,32140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32137,32140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1024,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1024,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37310,37313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37310,37313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1025,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1025,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37357,37360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37357,37360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, lazy, Suspense, useRef } from \"react\";\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\nimport { \n  Box, \n  Button, \n  CircularProgress, \n  Chip, \n  Typography,\n  useMediaQuery,\n  Theme,\n  Tabs,\n  Tab,\n  Tooltip,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport { BaseMediaFile } from \"../../interfaces/MediaFile\";\nimport { MediaFile as MediaFileType } from '../../types/media';\nimport { motion } from 'framer-motion';\nimport { formatFileSize } from \"../../utils/formatFileSize\";\nimport \"./styles/mediaDetail.scss\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useUsername } from '../../hooks/useUsername';\nimport { \n  FaFileAudio, \n  FaFileWord, \n  FaFileExcel, \n  FaFile, \n  FaDownload,\n  FaFilePdf\n} from 'react-icons/fa';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport EditIcon from '@mui/icons-material/Edit';\nimport PhotoIcon from '@mui/icons-material/Photo';\nimport RelatedMediaItem from \"./components/RelatedMediaItem\";\n// Import React Query hooks\nimport { \n  useMediaDetail, \n  useUpdateMedia, \n  useApiHealth, \n  QueryKeys, \n  useMediaTypes, \n  useUserProfile\n} from '../../hooks/query-hooks';\nimport { useQueryClient } from '@tanstack/react-query';\nimport ThumbnailUpdateDialog from './components/ThumbnailUpdateDialog';\n\n// Lazy load subcomponents\nconst MediaInformation = lazy(() => import('./components/MediaInformation'));\nconst EditMediaDialog = lazy(() => import('./components/EditMediaDialog'));\n\n// Helper function to safely get metadata fields from either root or metadata object\nconst getMetadataField = (mediaFile: any, fieldName: string, defaultValue: any = undefined) => {\n  if (!mediaFile) return defaultValue;\n  \n  // First check in metadata object\n  if (mediaFile.metadata && mediaFile.metadata[fieldName] !== undefined) {\n    return mediaFile.metadata[fieldName];\n  }\n  \n  // Then check in root object\n  if (mediaFile[fieldName] !== undefined) {\n    return mediaFile[fieldName];\n  }\n  \n  // Return default if not found anywhere\n  return defaultValue;\n};\n\n// Extract subcomponents for better organization and code splitting\ninterface MediaDetailTagsProps {\n  tags?: string[];\n  isMobile?: boolean;\n}\n\nexport const MediaDetailTags: React.FC<MediaDetailTagsProps> = ({ tags, isMobile }) => {\n  if (!tags || tags.length === 0) return null;\n  \n  return (\n    <Box className=\"media-tags\">\n      {tags?.map((tag, index) => (\n        <Chip \n          key={index} \n          label={tag} \n          size={isMobile ? \"small\" : \"medium\"} \n          sx={{ backgroundColor: 'var(--accent-color)', color: 'var(--color-text-invert)', margin: '0.25rem', fontSize: isMobile ? '0.75rem' : '0.875rem' }}\n        />\n      ))}\n    </Box>\n  );\n};\n\ninterface MediaDetailPreviewProps {\n  mediaFile: BaseMediaFile;\n  onEdit?: () => void;\n  onDownload: () => void;\n  isEditingEnabled: boolean;\n  onThumbnailUpdate?: () => void;\n}\n\nexport const MediaDetailPreview: React.FC<MediaDetailPreviewProps> = ({ \n  mediaFile, \n  onEdit, \n  onDownload, \n  isEditingEnabled,\n  onThumbnailUpdate\n}) => {\n  // Get uploadedBy from either direct property or metadata\n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('sm'));\n  \n  // Add state for the active tab\n  const [activeTab, setActiveTab] = useState(0);\n  \n  // Check if there are related media files\n  const hasRelatedMedia = mediaFile.metadata?.relatedMedia && \n    (Array.isArray(mediaFile.metadata.relatedMedia) ? \n      mediaFile.metadata.relatedMedia.length > 0 : \n      mediaFile.metadata.relatedMedia.mediaId);\n  \n  // Check if this is a video file\n  const isVideo = mediaFile.fileExtension && \n    ['mp4', 'webm', 'ogg', 'mov'].includes(mediaFile.fileExtension.toLowerCase());\n  \n  // Handler for tab changes\n  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n  \n  // Component to render media content based on file type\n  const RenderMediaContent = React.useCallback(() => {\n    if (!mediaFile) return null;\n    \n    if (mediaFile.fileExtension &&\n      [\"jpg\", \"jpeg\", \"png\", \"gif\", \"webp\", \"svg\", \"bmp\"].includes(\n        mediaFile.fileExtension.toLowerCase()\n      )) {\n      // Image preview\n      return (\n        <img\n          src={mediaFile.location}\n          alt={mediaFile.metadata?.altText || \"\"}\n        />\n      );\n    } else if (mediaFile.fileExtension &&\n      [\"mp4\", \"webm\", \"ogg\", \"mov\"].includes(\n        mediaFile.fileExtension.toLowerCase()\n      )) {\n      // Video preview\n      return (\n        <Box\n          sx={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            background: \"#000\",\n          }}\n        >\n          <video\n            controls\n            autoPlay={false}\n            style={{\n              width: \"100%\",\n              maxHeight: isMobile ? \"300px\" : \"600px\",\n            }}\n            poster={mediaFile.metadata?.v_thumbnail || undefined}\n          >\n            <source\n              src={mediaFile.location}\n              type={`video/${\n                mediaFile.fileExtension === \"mov\"\n                  ? \"quicktime\"\n                  : mediaFile.fileExtension.toLowerCase()\n              }`}\n            />\n            Your browser does not support the video tag.\n          </video>\n        </Box>\n      );\n    } else if (mediaFile.fileExtension &&\n      [\"mp3\", \"wav\", \"ogg\", \"m4a\"].includes(\n        mediaFile.fileExtension.toLowerCase()\n      )) {\n      // Audio preview\n      return (\n        <Box\n          sx={{\n            p: 4,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            gap: 2,\n          }}\n        >\n          <FaFileAudio size={isMobile ? 48 : 64} />\n          <audio\n            controls\n            src={mediaFile.location}\n            style={{ width: \"100%\" }}\n          >\n            Your browser does not support the audio element.\n          </audio>\n        </Box>\n      );\n    } else if (mediaFile.fileExtension &&\n      [\"pdf\"].includes(mediaFile.fileExtension.toLowerCase())) {\n      // PDF preview\n      return (\n        <Box\n          sx={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            p: 2,\n            position: \"relative\", // Add for debugging overlay\n          }}\n        >\n          {/* Primary method: Try using an iframe for preview */}\n          <iframe\n            src={`${mediaFile.location}#toolbar=1&navpanes=1&scrollbar=1`}\n            style={{\n              width: \"100%\",\n              height: isMobile ? \"400px\" : \"600px\",\n              border: \"none\",\n              borderRadius: \"4px\",\n              overflow: \"hidden\",\n            }}\n            title=\"PDF Preview\"\n            onError={(e) => {\n              // Show alternative PDF viewer on error\n              const iframe = e.target as HTMLIFrameElement;\n              if (iframe && iframe.style) {\n                iframe.style.display = 'none';\n              }\n              \n              // Try to show the object tag fallback\n              const objectFallback = document.querySelector('.pdf-object-fallback') as HTMLElement;\n              if (objectFallback && objectFallback.style) {\n                objectFallback.style.display = 'block';\n                \n                // If object also fails, show icon fallback\n                setTimeout(() => {\n                  const objectElement = objectFallback.querySelector('object');\n                  if (objectElement && !objectElement.contentDocument) {\n                    objectFallback.style.display = 'none';\n                    const iconFallback = document.querySelector('.pdf-icon-fallback') as HTMLElement;\n                    if (iconFallback && iconFallback.style) {\n                      iconFallback.style.display = 'flex';\n                    }\n                  }\n                }, 1000);\n              }\n            }}\n          />\n          \n          {/* Object tag fallback - works in some browsers where iframe doesn't */}\n          <Box \n            className=\"pdf-object-fallback\"\n            sx={{ \n              display: 'none',\n              width: '100%',\n              height: isMobile ? \"400px\" : \"600px\",\n            }}\n          >\n            <object\n              data={mediaFile.location}\n              type=\"application/pdf\"\n              width=\"100%\"\n              height=\"100%\"\n              style={{\n                border: \"none\",\n                borderRadius: \"4px\",\n              }}\n            >\n              <p>Your browser does not support PDF viewing.</p>\n            </object>\n          </Box>\n          \n          {/* Icon fallback as last resort */}\n          <Box \n            className=\"pdf-icon-fallback\"\n            sx={{ \n              display: 'none',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n              p: 3,\n              gap: 2\n            }}\n          >\n            <FaFilePdf size={isMobile ? 56 : 86} color=\"#ef4444\" />\n            <Typography variant={isMobile ? \"body2\" : \"body1\"} sx={{ mt: 2, textAlign: 'center' }}>\n              PDF preview not available in this browser.\n            </Typography>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<FaDownload />}\n              onClick={onDownload}\n              size={isMobile ? \"small\" : \"medium\"}\n              sx={{ mt: 2 }}\n            >\n              Download PDF\n            </Button>\n          </Box>\n        </Box>\n      );\n    } else if (mediaFile.fileExtension &&\n      [\"doc\", \"docx\"].includes(mediaFile.fileExtension.toLowerCase())) {\n      // Word document\n      return (\n        <Box\n          sx={{\n            p: 4,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            gap: 2,\n          }}\n        >\n          <FaFileWord size={isMobile ? 48 : 64} />\n          <Typography variant={isMobile ? \"body2\" : \"body1\"}>\n            Microsoft Word Document Preview Not Available\n          </Typography>\n        </Box>\n      );\n    } else if (mediaFile.fileExtension &&\n      [\"xls\", \"xlsx\"].includes(mediaFile.fileExtension.toLowerCase())) {\n      // Excel document\n      return (\n        <Box\n          sx={{\n            p: 4,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            gap: 2,\n          }}\n        >\n          <FaFileExcel size={isMobile ? 48 : 64} />\n          <Typography variant={isMobile ? \"body2\" : \"body1\"}>\n            Microsoft Excel Document Preview Not Available\n          </Typography>\n        </Box>\n      );\n    } else {\n      // Generic file\n      return (\n        <Box\n          sx={{\n            p: 4,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            gap: 2,\n          }}\n        >\n          <FaFile size={isMobile ? 48 : 64} />\n          <Typography variant={isMobile ? \"body2\" : \"body1\"}>\n            {mediaFile.fileExtension\n              ? `${mediaFile.fileExtension.toUpperCase()} File Preview Not Available`\n              : \"File Preview Not Available\"}\n          </Typography>\n        </Box>\n      );\n    }\n  }, [mediaFile, isMobile, onDownload]);\n\n  // Inside the MediaDetailPreview component, after the RenderMediaContent component definition\n  // Add a new piece of state to track the content height\n  const [contentHeight, setContentHeight] = useState<number>(400); // Default min height\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  // Use ResizeObserver to track content height changes\n  useEffect(() => {\n    if (!contentRef.current) return;\n    \n    // Function to measure height\n    const updateHeight = () => {\n      if (contentRef.current && activeTab === 0) {\n        const height = contentRef.current.offsetHeight;\n        if (height > 200) { // Only update if it's a meaningful height\n          setContentHeight(height);\n        }\n      }\n    };\n    \n    // Initial measurement\n    updateHeight();\n    \n    // Set up ResizeObserver for dynamic updates\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        if (entry.target === contentRef.current && activeTab === 0) {\n          updateHeight();\n        }\n      }\n    });\n    \n    // Start observing\n    resizeObserver.observe(contentRef.current);\n    \n    // Cleanup\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [activeTab, mediaFile]);\n\n  // Media type specific adjustment: ensure proper height for different media types\n  useEffect(() => {\n    if (!mediaFile) return;\n    \n    // Set larger minimum height for certain file types\n    if (mediaFile.fileExtension) {\n      const ext = mediaFile.fileExtension.toLowerCase();\n      \n      // Videos and PDFs need more height\n      if (['mp4', 'webm', 'ogg', 'mov', 'pdf'].includes(ext)) {\n        setContentHeight(prev => Math.max(prev, 600));\n      }\n      // Images can vary\n      else if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(ext)) {\n        // Don't set a fixed height, let the image determine it\n      }\n      // Other file types need less space\n      else {\n        setContentHeight(prev => Math.max(prev, 300));\n      }\n    }\n  }, [mediaFile]);\n\n  return (\n    <Box className=\"media-preview\">\n      <Box className=\"media-preview-header\">\n        <Typography \n          variant={isMobile ? \"h5\" : \"h4\"} \n          gutterBottom \n          style={{ \n            color: 'var(--accent-color)',\n            fontSize: isMobile ? '1.25rem' : '2rem',\n            marginBottom: '0',\n          }}\n        >\n          {getMetadataField(mediaFile, 'fileName') || mediaFile.title || 'Untitled Media'}\n        </Typography>\n        \n        {/* Action Buttons */}\n        <Box sx={{ \n          display: 'flex',\n          alignItems: 'center',\n          gap: '8px'\n        }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<FaDownload />}\n            onClick={onDownload}\n            size={isMobile ? \"small\" : \"medium\"}\n            sx={{ \n              padding: isMobile ? '4px 8px' : '6px 12px',\n              minWidth: isMobile ? 'auto' : '64px'\n            }}\n          >\n            {isMobile ? '' : 'Download'}\n          </Button>\n          \n          {isEditingEnabled && onEdit && (\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              startIcon={<EditIcon />}\n              onClick={(e) => {\n                console.log('Edit button clicked');\n                e.stopPropagation();\n                if (onEdit) onEdit();\n              }}\n              size={isMobile ? \"small\" : \"medium\"}\n              sx={{ \n                padding: isMobile ? '4px 8px' : '6px 12px',\n                minWidth: isMobile ? 'auto' : '64px',\n                zIndex: 10  // Add a higher z-index to ensure it's clickable\n              }}\n            >\n              {isMobile ? '' : 'Edit'}\n            </Button>\n          )}\n          \n          {/* Add thumbnail button for video files */}\n          {isEditingEnabled && isVideo && onThumbnailUpdate && (\n            <Tooltip title=\"Update Video Thumbnail\">\n              <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<PhotoIcon />}\n                onClick={onThumbnailUpdate}\n                size={isMobile ? \"small\" : \"medium\"}\n                sx={{ \n                  padding: isMobile ? '4px 8px' : '6px 12px',\n                  minWidth: isMobile ? 'auto' : '64px',\n                }}\n              >\n                {isMobile ? '' : 'Thumbnail'}\n              </Button>\n            </Tooltip>\n          )}\n        </Box>\n      </Box>\n      \n      {/* Tabs only shown if related media exists */}\n      {hasRelatedMedia ? (\n        <>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', mt: 2 }}>\n            <Tabs value={activeTab} onChange={handleTabChange} aria-label=\"media content tabs\">\n              <Tab label=\"Main File\" id=\"tab-0\" aria-controls=\"tabpanel-0\" />\n              <Tab label=\"Related Files\" id=\"tab-1\" aria-controls=\"tabpanel-1\" />\n            </Tabs>\n          </Box>\n          \n          {/* Shared container with minimum height */}\n          <Box \n            className=\"tab-content-container\"\n            sx={{ \n              mt: 2, \n              minHeight: contentHeight ? `${contentHeight}px` : 'auto',\n              transition: 'min-height 0.3s ease-in-out'\n            }}\n          >\n            {/* Main File Tab Content */}\n            <Box \n              className=\"tab-panel\"\n              role=\"tabpanel\"\n              hidden={activeTab !== 0}\n              id=\"tabpanel-0\"\n              aria-labelledby=\"tab-0\"\n            >\n              {activeTab === 0 && (\n                <Box className=\"media-preview-media\" ref={contentRef}>\n                  <RenderMediaContent />\n                </Box>\n              )}\n            </Box>\n            \n            {/* Related Files Tab Content */}\n            <Box \n              className=\"tab-panel related-tab\"\n              role=\"tabpanel\"\n              hidden={activeTab !== 1}\n              id=\"tabpanel-1\"\n              aria-labelledby=\"tab-1\"\n              sx={{ \n                height: contentHeight ? `${contentHeight}px` : 'auto',\n                overflowY: 'auto'\n              }}\n            >\n              {activeTab === 1 && (\n                <Box className=\"related-media-container\">\n                  <Box className=\"related-media-list\">\n                    {/* Render related media */}\n                    {Array.isArray(mediaFile.metadata?.relatedMedia) ? (\n                      mediaFile.metadata.relatedMedia.map((item, index) => (\n                        <RelatedMediaItem key={index} media={item} />\n                      ))\n                    ) : (\n                      // Single object case\n                      mediaFile.metadata?.relatedMedia?.mediaId && (\n                        <RelatedMediaItem media={mediaFile.metadata.relatedMedia} />\n                      )\n                    )}\n                  </Box>\n                </Box>\n              )}\n            </Box>\n          </Box>\n        </>\n      ) : (\n        // No tabs, just show the main media\n        <Box className=\"media-preview-media\" sx={{ mt: 2 }}>\n          <RenderMediaContent />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nconst MediaDetail: React.FC = () => {\n  const { slug } = useParams<{ slug: string }>();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down(\"sm\"));\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isThumbnailDialogOpen, setIsThumbnailDialogOpen] = useState(false);\n  \n  const queryClient = useQueryClient();\n  \n  const { data: mediaTypes = [] } = useMediaTypes();\n  \n  const { data: userProfile, isLoading: isUserLoading, isError: isUserProfileError } = useUserProfile(); \n  const { \n    data: mediaFile, \n    isLoading: isLoadingMedia,\n    isError: isMediaError,\n    error: mediaError,\n    refetch,\n  } = useMediaDetail(userProfile, slug);\n  \n  const { mutateAsync: updateMediaMutation } = useUpdateMedia();\n  const { \n    isLoading: isCheckingHealth, \n    isError: isHealthError, \n    error: healthError,\n    refetch: recheckHealth \n  } = useApiHealth();\n\n  // MOVED HOOKS UP: Define userId and call useUsername and useEffect before conditional returns.\n  // Ensure userId is derived safely, defaulting to empty string if mediaFile or uploadedBy is not yet available.\n  const userId = mediaFile ? (getMetadataField(mediaFile, 'uploadedBy', '') || '') : '';\n  const { username: uploadedBy } = useUsername(userId);\n\n  // Effect to update the URL if the slug in the URL doesn't match the actual slug\n  useEffect(() => {\n    if (mediaFile && slug && mediaFile.slug && slug !== mediaFile.slug) {\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`Correcting URL: changing ${slug} to ${mediaFile.slug}`);\n      }\n      const newPath = location.pathname.replace(slug, mediaFile.slug);\n      navigate(newPath, { replace: true });\n    }\n  }, [mediaFile, slug, navigate, location.pathname]);\n\n  useEffect(() => {\n      if (!slug) {\n      navigate('/media-library');\n    }\n  }, [slug, navigate]);\n  \n  // Set CSS variables for theming (MOVED UP)\n  useEffect(() => {\n    if (mediaFile && mediaTypes && mediaTypes.length > 0) {\n      const mediaTypeInfo = mediaTypes.find(\n        (type) => type.name === mediaFile.mediaType\n      );\n      const accentColor = mediaTypeInfo?.catColor || '#4dabf5';\n      \n      const root = document.documentElement;\n      root.style.setProperty('--accent-color', accentColor);\n      \n      return () => {\n        root.style.setProperty('--accent-color', '#4dabf5'); // Reset\n      };\n    } else {\n      const root = document.documentElement;\n      root.style.setProperty('--accent-color', '#4dabf5'); // Default if no mediaFile/mediaTypes\n      return () => { // Ensure a cleanup function is always returned\n          root.style.setProperty('--accent-color', '#4dabf5');\n      };\n    }\n  }, [mediaFile, mediaTypes]);\n\n  // Determine if editing is enabled based on userProfile role\n  const isEditingEnabled = !isUserLoading && userProfile && (userProfile.role === 'admin' || userProfile.role === 'superAdmin');\n\n  // 1. Handle user profile loading state first\n  if (isUserLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n        <CircularProgress />\n        <Typography sx={{ ml: 2 }}>Loading user information...</Typography>\n      </Box>\n    );\n  }\n\n  // 2. Handle user logged-out state (ProtectedRoute should also catch this)\n  // This check is important because useMediaDetail is enabled based on userProfile.\n  // If no userProfile, mediaFile will be undefined and isLoadingMedia will be false (as query is disabled).\n  if (!userProfile) {\n    // If there was an error fetching the profile itself, that's a different issue\n    if (isUserProfileError) {\n       return (\n        <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\" className=\"media-detail-container error-container\">\n          <Typography variant=\"h5\" color=\"error\" gutterBottom>Error Loading User Profile</Typography>\n          <Typography variant=\"body1\" color=\"textSecondary\" sx={{ mb: 2 }}>Could not load your profile. Please try again.</Typography>\n          <Button variant=\"contained\" onClick={() => window.location.reload()}>Reload</Button>\n        </Box>\n      );\n    }\n    // Otherwise, user is simply not logged in.\n    return (\n      <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\" className=\"media-detail-container error-container\">\n        <Typography variant=\"h5\" color=\"textSecondary\" gutterBottom>Access Denied</Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\" sx={{ mb: 2 }}>Please log in to view this content.</Typography>\n        <Button variant=\"contained\" onClick={() => navigate('/login')}>Go to Login</Button>\n      </Box>\n    );\n  }\n\n  // At this point, userProfile IS defined.\n  // So, useMediaDetail query IS (or was) enabled (assuming slug is also present).\n\n  // 3. Handle media loading state (query is enabled and fetching)\n  if (isLoadingMedia) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n        <CircularProgress />\n        <Typography sx={{ ml: 2 }}>Loading media details...</Typography>\n      </Box>\n    );\n  }\n\n  // 4. Handle media fetching error (query was enabled, ran, but failed)\n  if (isMediaError) {\n    return (\n      <div className=\"media-detail-container error-container\">\n        <Typography variant=\"h4\" color=\"error\" gutterBottom>Error Loading Media</Typography>\n        <Typography variant=\"body1\" sx={{ mb: 2 }}>\n          {mediaError?.message || \"An unexpected error occurred while trying to load the media file.\"}\n        </Typography>\n        <Typography variant=\"subtitle2\">API Server Status: {isCheckingHealth ? \"Checking...\" : isHealthError ? `Offline (${healthError?.message || 'Unknown Error'})` : \"Online\"}</Typography>\n        <Button onClick={() => recheckHealth()} disabled={isCheckingHealth} sx={{ my: 1 }}>Retry Health Check</Button>\n        <Button onClick={() => refetch()} sx={{ my: 1, ml: 1 }}>Retry Loading Media</Button>\n        \n        <Box sx={{ mt: 2, p: 2, border: '1px dashed grey', borderRadius: '4px' }}>\n          <Typography variant=\"caption\" display=\"block\" gutterBottom>Debug Information:</Typography>\n          <Typography variant=\"caption\" display=\"block\">Slug: {slug}</Typography>\n          <Typography variant=\"caption\" display=\"block\">Error: {mediaError?.message || JSON.stringify(mediaError)}</Typography>\n        </Box>\n      </div>\n    );\n  }\n\n  // 5. Handle media not found (query was enabled, ran, succeeded, but returned no data e.g. 404 for slug)\n  if (!mediaFile) {\n    return (\n      <div className=\"media-detail-container error-container\">\n        <Typography variant=\"h4\" color=\"error\" gutterBottom>Media Not Found</Typography>\n        <Typography variant=\"body1\">\n          The requested media could not be found. It may have been moved or deleted.\n        </Typography>\n        <Button onClick={() => navigate('/media-library')} sx={{ mt: 2 }}>Back to Library</Button>\n      </div>\n    );\n  }\n\n  // If we reach here, userProfile exists, and mediaFile exists and there were no errors loading it.\n  // const userId = getMetadataField(mediaFile, 'uploadedBy', '') || ''; // MOVED UP\n  // const { username: uploadedBy } = useUsername(userId); // MOVED UP\n\n  // Motion animation adjusted for mobile\n  const motionProps = {\n    initial: { opacity: 0, y: 20 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 0.3 }\n  };\n\n  // Define isVideo after mediaFile is guaranteed to be available\n  const isVideo = mediaFile && mediaFile.fileExtension && \n  ['mp4', 'webm', 'ogg', 'mov'].includes(mediaFile.fileExtension.toLowerCase());\n\n  const handleDownload = async () => {\n    if (!mediaFile || !mediaFile.location) return;\n    \n    try {\n      // Fetch file with responseType: 'blob' to get binary data\n      const response = await axios.get(mediaFile.location, {\n          responseType: 'blob'\n        });\n        \n      // Create a blob URL for the file\n        const blob = new Blob([response.data as BlobPart]);\n        const url = window.URL.createObjectURL(blob);\n        \n      // Create a temporary link element and click it to download\n        const link = document.createElement('a');\n        link.href = url;\n      link.download = mediaFile.metadata?.fileName || mediaFile.title || 'download';\n        document.body.appendChild(link);\n        link.click();\n        \n        // Clean up\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(link);\n      \n      toast.success('File download started');\n    } catch (error) {\n      console.error('Error downloading file:', error);\n      toast.error('Failed to download file');\n    }\n  };\n\n  const handleEdit = () => {\n    setIsEditDialogOpen(true);\n  };\n  \n  const handleSave = async (updatedMediaFile: Partial<MediaFileType> & { metadata?: Record<string, any> }): Promise<boolean> => {\n    try {\n      if (!mediaFile) {\n        throw new Error('No media file data available to update');\n      }\n      \n      // Track which fields are actually changed\n      const changedFields: string[] = [];\n      \n      // Check if title changed\n      if (updatedMediaFile.title && updatedMediaFile.title !== mediaFile.title) {\n        changedFields.push('title');\n      }\n      \n      // Check which metadata fields changed\n      if (updatedMediaFile.metadata && mediaFile.metadata) {\n        Object.keys(updatedMediaFile.metadata).forEach(key => {\n          const oldValue = mediaFile.metadata?.[key];\n          const newValue = updatedMediaFile.metadata?.[key];\n          \n          // Special handling for undefined to empty string conversion\n          // This prevents registering a non-meaningful change when a field goes from undefined to empty string\n          if (oldValue === undefined && (newValue === '' || newValue === null)) {\n            // Skip adding this to changedFields since undefined to empty string is not a real change\n            console.log(`Field ${key} changed from undefined to empty string, ignoring as non-meaningful change`);\n            return;\n          }\n          \n          // Only add to changedFields if the value actually changed\n          if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {\n            changedFields.push(`metadata.${key}`);\n          }\n        });\n      }\n      \n      // Build the update payload - only include changed metadata fields\n      const updatePayload: Partial<BaseMediaFile> & { \n        metadata?: Record<string, any>;\n        changedFields?: string[];\n      } = {\n        _id: mediaFile._id,\n        id: mediaFile.id,\n        slug: mediaFile.slug || '',\n        modifiedDate: mediaFile.modifiedDate || new Date().toISOString(),\n        // Only include title if it changed\n        ...(changedFields.includes('title') ? { title: updatedMediaFile.title } : {})\n      };\n      \n      // Only include changed metadata fields\n      if (updatedMediaFile.metadata && changedFields.some(f => f.startsWith('metadata.'))) {\n        updatePayload.metadata = { ...(mediaFile.metadata || {}) }; // Start with all original fields\n        \n        changedFields\n          .filter(field => field.startsWith('metadata.'))\n          .forEach(field => {\n            const metadataKey = field.replace('metadata.', '');\n            // Only update the field in the payload IF the updatedMediaFile.metadata actually contains this key.\n            // This prevents writing 'undefined' for fields that were simply omitted by the dialog's submission\n            // but were part of the original mediaFile.metadata.\n            if (updatedMediaFile.metadata!.hasOwnProperty(metadataKey)) {\n              updatePayload.metadata![metadataKey] = updatedMediaFile.metadata![metadataKey];\n            } else {\n              // If the field was registered as \"changed\" because it's missing from updatedMediaFile.metadata\n              // (i.e., original had a value, new submission doesn't for this key),\n              // it implies the dialog did not intend to clear it but rather didn't include it in its submission.\n              // The original value is already in updatePayload.metadata from the initial spread, so we don't\n              // explicitly set it to undefined here. If a field needs to be explicitly cleared to null/undefined,\n              // the dialog should send that value.\n              if (process.env.NODE_ENV === 'development') {\n                console.log(`DEBUG MediaDetail handleSave: Metadata field '${metadataKey}' was in changedFields but not in submitted metadata. Original value will be kept.`);\n              }\n            }\n          });\n      }\n      \n      // Add changedFields to the payload so the backend knows which fields were updated\n      updatePayload.changedFields = changedFields;\n      \n      // Don't proceed if there are no changes to make\n      if (changedFields.length === 0) {\n        console.log('No changes detected, skipping update');\n        return true;\n      }\n      \n      // Use the mutation function\n      await updateMediaMutation(updatePayload as any);\n      \n      // Handle successful update\n      handleSuccessfulUpdate(updatePayload);\n      \n      return true;\n    } catch (error: any) {\n      handleFailedUpdate(error);\n      return false;\n    }\n  };\n  \n  const handleSuccessfulUpdate = (_updatedMediaFile: Partial<BaseMediaFile> & { metadata?: Record<string, any> }) => {\n    // Close the edit dialog \n    setIsEditDialogOpen(false);\n    \n    // Invalidate activity logs query to refresh the Recent Activity component\n    queryClient.invalidateQueries({ queryKey: [QueryKeys.activityLogs] });\n    \n    // Refetch data to ensure we have the most up-to-date version\n    refetch();\n  };\n  \n  const handleFailedUpdate = (payload: unknown) => {\n    console.error('Error updating media:', payload);\n  };\n  \n  const handleThumbnailUpdate = (thumbnailUrl: string) => {\n    if (mediaFile && thumbnailUrl) {\n      try {\n        // Track which fields are being changed\n        const changedFields: string[] = [];\n        \n        // Check if thumbnail is actually changing\n        if (mediaFile.metadata?.v_thumbnail !== thumbnailUrl) {\n          changedFields.push('metadata.v_thumbnail');\n        }\n        \n        // Add timestamp field\n        changedFields.push('metadata.v_thumbnailTimestamp');\n        \n        // The thumbnail has already been updated by the API endpoint call\n        // No need to call updateMediaMutation again which is causing duplicate logs\n        \n        // Close dialog\n        setIsThumbnailDialogOpen(false);\n        \n        // Show success toast notification\n        toast.success('Thumbnail updated successfully');\n      \n        // Invalidate activity logs query to refresh the Recent Activity component\n        queryClient.invalidateQueries({ queryKey: [QueryKeys.activityLogs] });\n        \n        // Invalidate media queries to refresh the media library and media detail views\n        queryClient.invalidateQueries({ queryKey: [QueryKeys.media] });\n        queryClient.invalidateQueries({ queryKey: [QueryKeys.mediaDetail] });\n        \n        // Refetch to get latest data\n        refetch();\n        return Promise.resolve(true);\n    } catch (error) {\n        console.error('Error processing thumbnail update:', error);\n        toast.error('Failed to update thumbnail');\n        return Promise.resolve(false);\n      }\n    }\n    return Promise.resolve(false);\n  };\n  \n  // Convert mediaTypeInfo to MediaTypeConfig format\n  const mediaTypeConfig = mediaFile && mediaTypes && mediaTypes.length > 0 ? (() => {\n    const mtInfo = mediaTypes.find((type) => type.name === mediaFile.mediaType);\n    return mtInfo ? { ...mtInfo, fields: mtInfo.fields || [] } : null;\n  })() : null;\n\n  // Get metadata description (from either root or metadata object)\n  const description = mediaFile ? getMetadataField(mediaFile, 'description', '') : '';\n  \n  // Ensure modifiedDate exists - required by BaseMediaFile interface\n  const modifiedDate = mediaFile ? (mediaFile.modifiedDate || new Date().toISOString()) : new Date().toISOString();\n  \n  // Get the media's accent color from its media type\n  // const accentColor = mediaTypeInfo?.catColor || '#4dabf5'; // REMOVED - Logic moved to useEffect\n  \n  // Prepare data for MediaInformation component according to its expected props\n  const baseFields = mediaFile ? [\n    { name: 'File Name', value: getMetadataField(mediaFile, 'fileName', mediaFile.title) },\n    { name: 'Media Type', value: mediaFile.mediaType },\n    { name: 'File Size', value: formatFileSize(mediaFile.fileSize || 0) },\n    { name: 'File Extension', value: mediaFile.fileExtension?.toUpperCase() },\n    { name: 'Upload Date', value: new Date(modifiedDate).toLocaleDateString() },\n    { name: 'Uploaded By', value: uploadedBy || userId || 'Unknown' },\n    { name: 'Description', value: description },\n    { name: 'Alt Text', value: getMetadataField(mediaFile, 'altText', '') },\n    { name: 'Visibility', value: getMetadataField(mediaFile, 'visibility', 'private')?.toUpperCase() },\n  ] : [];\n\n  // Render the successful state with the media file\n  return (\n    <motion.div className=\"media-detail-container\" {...motionProps}>\n      <Button\n        className=\"back-button\"\n        onClick={() => navigate(\"/media-library\")}\n        variant=\"outlined\"\n        size={isMobile ? \"small\" : \"medium\"}\n      >\n        <ArrowBackIcon fontSize={isMobile ? \"small\" : \"medium\"} />\n      </Button>\n\n      <Box\n        className=\"media-detail\"\n        sx={{\n          p: isMobile ? 2 : 3,\n          maxWidth: '100%',\n          margin: '0 auto'\n        }}\n      >\n        <MediaDetailPreview \n          mediaFile={mediaFile as BaseMediaFile}\n          onEdit={handleEdit}\n          onDownload={handleDownload}\n          isEditingEnabled={isEditingEnabled ?? false}\n          onThumbnailUpdate={isVideo && isEditingEnabled ? () => setIsThumbnailDialogOpen(true) : undefined}\n        />\n        \n        <Box className=\"media-detail-content\">\n          <Suspense fallback={<CircularProgress size={24} />}>\n            <MediaInformation\n              mediaFile={mediaFile}\n              mediaTypeConfig={mediaTypeConfig}\n              baseFields={baseFields}\n              getMetadataField={getMetadataField}\n            />\n          </Suspense>\n        </Box>\n      </Box>\n\n      {isEditDialogOpen && (\n        <Suspense fallback={<CircularProgress size={24} />}>\n          <EditMediaDialog\n            open={isEditDialogOpen}\n            onClose={() => setIsEditDialogOpen(false)}\n            mediaFile={mediaFile as any}\n            mediaType={mediaTypeConfig as any}\n            onSave={async (data) => {\n              await handleSave(data);\n              return;\n            }}\n          />\n        </Suspense>\n      )}\n      \n      {isThumbnailDialogOpen && (\n        <ThumbnailUpdateDialog\n          open={isThumbnailDialogOpen}\n          onClose={() => setIsThumbnailDialogOpen(false)}\n          mediaData={mediaFile}\n          onThumbnailUpdate={handleThumbnailUpdate}\n        />\n      )}\n    </motion.div>\n  );\n};\n\nexport default MediaDetail;","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaDetail/components/EditMediaDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[931,934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[931,934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1265,1268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1265,1268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1551,1554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1551,1554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1641,1644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1641,1644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1654,1657],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1654,1657],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2068,2071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2068,2071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2095,2098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2095,2098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":143,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3781,3784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3781,3784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'mediaType'. Either include it or remove the dependency array.","line":232,"column":6,"nodeType":"ArrayExpression","endLine":232,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [open, mediaFile, reset, mediaType]","fix":{"range":[7613,7637],"text":"[open, mediaFile, reset, mediaType]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9233,9236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9233,9236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":272,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9324,9327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9324,9327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":278,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9625,9628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9625,9628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":454,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":454,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16310,16313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16310,16313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":456,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":456,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16394,16397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16394,16397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":523,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":523,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18837,18840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18837,18840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":523,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":523,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18860,18863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18860,18863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":769,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":769,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27235,27238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27235,27238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Chip,\n  IconButton,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Switch,\n  Typography,\n  Box,\n  useMediaQuery,\n  Theme,\n  Alert,\n  CircularProgress\n} from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { MediaFile, MediaType } from '../../../types/media';\nimport '../styles/EditMediaDialog.scss';\nimport { useUserProfile } from '../../../hooks/query-hooks';\nimport { normalizeTag } from '../../../utils/mediaTypeUploaderUtils';\nimport { toast } from 'react-toastify';\n\n// Define interface for MediaTypeField if it's missing from imports\ninterface MediaTypeField {\n  name: string;\n  type: string;\n  required?: boolean;\n  options?: string[];\n  label?: string;\n  [key: string]: any;\n}\n\n// Don't extend MediaFile if there are compatibility issues, define directly\ninterface ExtendedMediaFile {\n  _id?: string;\n  id?: string;\n  title?: string;\n  slug?: string;\n  fileName?: string;\n  altText?: string;\n  description?: string;\n  visibility?: 'public' | 'private';\n  tags?: string[];\n  customFields?: Record<string, any>;\n  fileExtension?: string;\n  fileSize?: number;\n  mediaType?: string;\n  location?: string;\n  modifiedDate?: string;\n  metadata?: {\n    fileName?: string;\n    altText?: string;\n    description?: string;\n    visibility?: 'public' | 'private';\n    tags?: string[];\n    [key: string]: any;\n  };\n}\n\n// Helper function to compare arrays (for tags)\nconst compareArrays = (arr1: any[], arr2: any[]): boolean => {\n  if (arr1.length !== arr2.length) return false;\n  \n  // Sort and normalize tags for comparison\n  const sorted1 = [...arr1].map(tag => normalizeTag(tag)).sort();\n  const sorted2 = [...arr2].map(tag => normalizeTag(tag)).sort();\n  \n  return sorted1.every((val, i) => val === sorted2[i]);\n};\n\n// Helper function to compare objects (for customFields)\nconst compareObjects = (obj1: Record<string, any>, obj2: Record<string, any>): boolean => {\n  // Get non-empty keys from both objects\n  const keys1 = Object.keys(obj1).filter(key => obj1[key] !== undefined && obj1[key] !== '');\n  const keys2 = Object.keys(obj2).filter(key => obj2[key] !== undefined && obj2[key] !== '');\n  \n  // Log comparison details for debugging\n  console.log('Comparing custom fields:', {\n    obj1Count: keys1.length,\n    obj2Count: keys2.length,\n    keys1,\n    keys2\n  });\n  \n  // If key counts don't match, objects are different\n  if (keys1.length !== keys2.length) {\n    console.log('Key count mismatch, fields have changed');\n    return false;\n  }\n  \n  // Compare each field value \n  let allMatch = true;\n  keys1.forEach(key => {\n    // Skip special fields that are managed differently\n    if (['thumbnailUrl'].includes(key)) return;\n    \n    const val1 = obj1[key];\n    const val2 = obj2[key];\n    \n    // For non-primitive types (objects, arrays), use JSON comparison\n    const isEqual = typeof val1 === 'object' || typeof val2 === 'object' \n      ? JSON.stringify(val1) === JSON.stringify(val2)\n      : val1 === val2;\n    \n    if (!isEqual) {\n      console.log(`Field \"${key}\" changed:`, {\n        from: val2,\n        to: val1,\n        type1: typeof val1,\n        type2: typeof val2\n      });\n      allMatch = false;\n    }\n  });\n  \n  return allMatch;\n};\n\ninterface EditMediaDialogProps {\n  open: boolean;\n  onClose: () => void;\n  mediaFile: ExtendedMediaFile;\n  mediaType: MediaType;\n  onSave: (data: Partial<MediaFile>) => Promise<void>;\n}\n\ninterface FormValues {\n  title: string;\n  fileName: string;\n  altText: string;\n  description: string;\n  visibility: 'public' | 'private';\n  tags: string[];\n  customFields: Record<string, any>;\n}\n\nexport const EditMediaDialog: React.FC<EditMediaDialogProps> = ({\n  open,\n  onClose,\n  mediaFile,\n  mediaType,\n  onSave\n}) => {\n  // Get user role from Redux\n  const { data: userProfile } = useUserProfile();\n  const userRole = userProfile?.role;\n  const isSuperAdmin = userRole === 'superAdmin';\n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('sm'));\n\n  const [newTag, setNewTag] = useState('');\n  // Track save in progress\n  const [isSaving, setIsSaving] = useState(false);\n  \n  // State for forcing form rerendering\n  const [formVersion, setFormVersion] = useState(0);\n  \n  // Add state to track original values for change detection\n  const [originalValues, setOriginalValues] = useState<FormValues | null>(null);\n  \n  // Replace tagWarningOpen with a state to track unsaved tag warning\n  const [unsavedTag, setUnsavedTag] = useState<string | null>(null);\n\n  // Determine the source for custom fields for defaultValues\n  let defaultCustomFieldsData = mediaFile.customFields;\n  if (defaultCustomFieldsData === undefined && mediaFile.metadata && mediaType && mediaType.fields) {\n    defaultCustomFieldsData = {};\n    mediaType.fields.forEach((fieldDefinition: MediaTypeField) => {\n      if (Object.prototype.hasOwnProperty.call(mediaFile.metadata!, fieldDefinition.name)) {\n        defaultCustomFieldsData![fieldDefinition.name] = mediaFile.metadata![fieldDefinition.name];\n      }\n    });\n  }\n  defaultCustomFieldsData = defaultCustomFieldsData || {};\n\n  const { control, handleSubmit, watch, setValue, reset, formState } = useForm<FormValues>({\n    defaultValues: {\n      title: mediaFile.title || '',\n      fileName: mediaFile.metadata?.fileName || mediaFile.fileName || '',\n      altText: mediaFile.metadata?.altText || mediaFile.altText || '',\n      description: mediaFile.metadata?.description || mediaFile.description || '',\n      visibility: (mediaFile.metadata?.visibility || mediaFile.visibility || 'private') as 'public' | 'private',\n      tags: mediaFile.metadata?.tags || mediaFile.tags || [],\n      customFields: defaultCustomFieldsData // Use derived custom fields\n    }\n  });\n\n  // Reset form when the dialog opens or mediaFile changes\n  useEffect(() => {\n    if (open) {\n      // console.log('Dialog opened, resetting form with fresh values');\n      \n      // Determine the source for custom fields for initialValues\n      let sourceCustomFieldsForInitial = mediaFile.customFields;\n      if (sourceCustomFieldsForInitial === undefined && mediaFile.metadata && mediaType && mediaType.fields) {\n        sourceCustomFieldsForInitial = {};\n        mediaType.fields.forEach((fieldDefinition: MediaTypeField) => {\n          if (Object.prototype.hasOwnProperty.call(mediaFile.metadata!, fieldDefinition.name)) {\n            sourceCustomFieldsForInitial![fieldDefinition.name] = mediaFile.metadata![fieldDefinition.name];\n          }\n        });\n      }\n      sourceCustomFieldsForInitial = sourceCustomFieldsForInitial || {};\n\n      const initialValues = {\n        title: mediaFile.title || '',\n        fileName: mediaFile.metadata?.fileName || mediaFile.fileName || '',\n        altText: mediaFile.metadata?.altText || mediaFile.altText || '',\n        description: mediaFile.metadata?.description || mediaFile.description || '',\n        visibility: (mediaFile.metadata?.visibility || mediaFile.visibility || 'private') as 'public' | 'private',\n        tags: mediaFile.metadata?.tags || mediaFile.tags || [],\n        customFields: sourceCustomFieldsForInitial // Use derived custom fields\n      };\n      \n      // Store original values for change detection\n      setOriginalValues(initialValues);\n      \n      // Force reset with current mediaFile values\n      reset(initialValues);\n      \n      // Increment version to force re-render\n      setFormVersion(prev => prev + 1);\n    }\n  }, [open, mediaFile, reset]);\n\n  // Initialize form with default values and ensure default tags are included\n  useEffect(() => {\n    // When the dialog opens, re-initialize form values from mediaFile\n    console.log('Dialog open state changed or mediaFile updated, refreshing form values');\n    \n    // Reset form values when dialog opens or mediaFile changes\n    if (open) {\n      // Make sure all default tags from the media type are included in the tags\n      if (mediaType && mediaType.defaultTags && mediaType.defaultTags.length > 0) {\n        const currentTags = watch('tags') || [];\n        const defaultTags = mediaType.defaultTags;\n        \n        // Check if all default tags are included\n        const allDefaultTagsIncluded = defaultTags.every((tag: string) => currentTags.includes(tag));\n        \n        if (!allDefaultTagsIncluded) {\n          // Add any missing default tags\n          const updatedTags = [...currentTags];\n          defaultTags.forEach((tag: string) => {\n            if (!updatedTags.includes(tag)) {\n              updatedTags.push(tag);\n            }\n          });\n          \n          // Update the form\n          setValue('tags', updatedTags);\n        }\n      }\n      \n      // Ensure all MediaType fields are properly loaded\n      if (mediaType && mediaType.fields && mediaType.fields.length > 0) {\n        console.log('Setting initial custom field values...');\n        \n        // Log all available customFields for debugging\n        console.log('Available customFields:', mediaFile.customFields);\n        \n        // Check if mediaFile has metadata as well\n        if ((mediaFile as any).metadata) {\n          console.log('Available metadata from mediaFile:', (mediaFile as any).metadata);\n        }\n        \n        mediaType.fields.forEach((field: MediaTypeField) => {\n          // Try finding value in either customFields or metadata\n          const fieldValueFromCustomFields = mediaFile.customFields?.[field.name];\n          const fieldValueFromMetadata = (mediaFile as any).metadata?.[field.name];\n          \n          // Use the most appropriate value source\n          const fieldValue = fieldValueFromCustomFields !== undefined \n            ? fieldValueFromCustomFields \n            : fieldValueFromMetadata;\n          \n          console.log(`Setting field \"${field.name}\" to:`, fieldValue, \n            `(from ${fieldValueFromCustomFields !== undefined ? 'customFields' : 'metadata'})`);\n          \n          // Set each field with appropriate type conversion\n          if (field.type === 'boolean') {\n            setValue(`customFields.${field.name}`, Boolean(fieldValue));\n          } else if (field.type === 'number') {\n            const numValue = fieldValue !== undefined && fieldValue !== null \n              ? Number(fieldValue) : '';\n            setValue(`customFields.${field.name}`, numValue);\n          } else {\n            // For text, select, and other types\n            setValue(`customFields.${field.name}`, fieldValue !== undefined ? fieldValue : '');\n          }\n        });\n      }\n    }\n  }, [mediaType, setValue, watch, mediaFile.customFields, open, mediaFile]);\n\n  // Reset the tag input field when the dialog opens or closes\n  useEffect(() => {\n    // Reset any tag-related state when dialog visibility changes\n    setNewTag('');\n    setUnsavedTag(null);\n  }, [open]);\n\n  const handleAddTag = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' && newTag.trim()) {\n      // Normalize the tag\n      const normalizedTag = normalizeTag(newTag.trim());\n      \n      // Check if user is a superAdmin for default tags\n      const isDefaultTag = mediaType.defaultTags?.map((t: string) => normalizeTag(t)).includes(normalizedTag);\n      \n      // Only allow adding tags if not a default tag, or if user is a superAdmin\n      if (isDefaultTag && !isSuperAdmin) {\n        return;\n      }\n      \n      const currentTags = watch('tags');\n      // Check if normalized tag already exists (case-insensitive)\n      if (!currentTags.map(t => normalizeTag(t)).includes(normalizedTag)) {\n        setValue('tags', [...currentTags, normalizedTag]);\n      }\n      setNewTag('');\n    }\n  };\n\n  const handleDeleteTag = (tagToDelete: string) => {\n    const normalizedTagToDelete = normalizeTag(tagToDelete);\n    \n    // Check if the tag is a default tag (using normalized comparison)\n    const isDefaultTag = mediaType.defaultTags?.some((tag: string) => \n      normalizeTag(tag) === normalizedTagToDelete\n    );\n    \n    // Do not allow removing default tags from this UI\n    if (isDefaultTag) {\n      // For better UX, show a toast notification explaining why\n      // If you have react-toastify or similar\n      console.warn('Cannot remove default tag:', tagToDelete);\n      return;\n    }\n    \n    const currentTags = watch('tags');\n    setValue('tags', currentTags.filter(tag => normalizeTag(tag) !== normalizedTagToDelete));\n  };\n\n  // Add debugging code to trace form value changes\n  useEffect(() => {\n    if (open && formState.isDirty) {\n      const currentValues = watch();\n      console.log('Form values changed:', currentValues);\n      // If customFields changed, log the differences\n      if (currentValues.customFields && originalValues?.customFields) {\n        Object.keys(currentValues.customFields).forEach(key => {\n          const newVal = currentValues.customFields[key];\n          const oldVal = originalValues.customFields?.[key];\n          if (newVal !== oldVal) {\n            console.log(`Field \"${key}\" changed from:`, oldVal, 'to:', newVal);\n          }\n        });\n      }\n    }\n  }, [watch, formState.isDirty, open, originalValues]);\n\n  // Modified to debug custom fields on form submission\n  const onSubmit = async (data: FormValues) => {\n    // Check if there's an unpressed tag in the input\n    if (newTag.trim()) {\n      setUnsavedTag(newTag.trim());\n      return; // Stop submission flow until user decides\n    }\n    // Call the main submission handler\n    await handleFormSubmission(data);\n  };\n\n  // Add these handlers for the inline alert buttons\n  const handleAddUnsavedTag = () => {\n    if (unsavedTag) {\n      const normalizedTag = normalizeTag(unsavedTag);\n      const currentTags = watch('tags');\n      \n      // Check if normalized tag already exists (case-insensitive)\n      if (!currentTags.map(t => normalizeTag(t)).includes(normalizedTag)) {\n        // Add the tag\n        const updatedTags = [...currentTags, normalizedTag];\n        setValue('tags', updatedTags);\n        \n        // Proceed with form submission after adding tag\n        const currentData = watch();\n        currentData.tags = updatedTags;\n        handleFormSubmission(currentData);\n      }\n    }\n    setNewTag('');\n    setUnsavedTag(null);\n  };\n\n  const handleIgnoreUnsavedTag = () => {\n    // Skip adding tag and continue with form submission\n    setUnsavedTag(null);\n    setNewTag(''); // Clear the tag input\n    handleFormSubmission(watch());\n  };\n\n  // Create a handler for when the dialog is closed\n  const handleDialogClose = () => {\n    // Clear any unsaved tag input when closing the dialog\n    setNewTag('');\n    setUnsavedTag(null);\n    onClose();\n  };\n\n  // Extract the submission logic to a separate function to avoid duplication\n  const handleFormSubmission = async (data: FormValues) => {\n    setIsSaving(true);\n    try {\n      // Ensure all default tags are included\n      if (mediaType && mediaType.defaultTags) {\n        const finalTags = [...data.tags];\n        let tagsChangedInternal = false; // Renamed to avoid conflict\n        \n        mediaType.defaultTags.forEach((tag: string) => {\n          const normalizedDefaultTag = normalizeTag(tag);\n          if (!finalTags.some(t => normalizeTag(t) === normalizedDefaultTag)) {\n            finalTags.push(tag);\n            tagsChangedInternal = true;\n          }\n        });\n        \n        if (tagsChangedInternal) {\n          data.tags = finalTags;\n        }\n      }\n\n      // Check if any values have actually changed before saving\n      const customFieldsHaveChanged = !compareObjects(data.customFields, originalValues?.customFields || {});\n      const standardFieldsHaveChanged = \n        data.title !== (originalValues?.title || '') ||\n        data.fileName !== (originalValues?.fileName || '') ||\n        data.altText !== (originalValues?.altText || '') ||\n        data.description !== (originalValues?.description || '') ||\n        data.visibility !== (originalValues?.visibility || '') || // Corrected: was missing originalValues\n        !compareArrays(data.tags, originalValues?.tags || []);\n        \n      const overallHasChanged = standardFieldsHaveChanged || customFieldsHaveChanged;\n      \n      if (overallHasChanged) {\n        const changedData: any = {\n          _id: mediaFile._id || mediaFile.id,\n          slug: (mediaFile as any).slug,\n        };\n        \n        if (data.title !== (originalValues?.title || '')) {\n          changedData.title = data.title;\n        }\n        \n        changedData.metadata = {}; // Initialize metadata object\n            \n        if (data.fileName !== (originalValues?.fileName || '')) {\n          changedData.metadata.fileName = data.fileName;\n        }\n        if (data.altText !== (originalValues?.altText || '')) {\n          changedData.metadata.altText = data.altText;\n        }\n        if (data.description !== (originalValues?.description || '')) {\n          changedData.metadata.description = data.description;\n        }\n        if (data.visibility !== (originalValues?.visibility || '')) { // Corrected\n          changedData.metadata.visibility = data.visibility;\n        }\n        if (!compareArrays(data.tags, originalValues?.tags || [])) {\n          changedData.metadata.tags = data.tags;\n        }\n        \n        // Process custom fields correctly\n        if (customFieldsHaveChanged) {\n          const fullCustomFieldsPayload = { \n            ...(originalValues?.customFields || {}),\n            ...data.customFields \n          };\n\n          if (process.env.NODE_ENV === 'development') {\n            console.log(\"DEBUG: EditMediaDialog - Merged customFields for payload:\", JSON.stringify(fullCustomFieldsPayload, null, 2));\n          }\n\n          Object.keys(fullCustomFieldsPayload).forEach(key => {\n            if (mediaType.fields?.some(field => field.name === key)) {\n              changedData.metadata[key] = fullCustomFieldsPayload[key];\n            }\n          });\n        }\n        \n        if (Object.keys(changedData.metadata).length === 0) {\n          delete changedData.metadata; // Remove if empty\n        }\n\n        if (process.env.NODE_ENV === 'development') {\n          console.log('DEBUG: EditMediaDialog - Submitting changedData:', JSON.stringify(changedData, null, 2));\n        }\n        await onSave(changedData);\n\n      } else {\n        if (process.env.NODE_ENV === 'development') {\n          console.log('DEBUG: EditMediaDialog - No changes detected. Skipping save operation.');\n        }\n      }\n      \n      handleDialogClose();\n    } catch (error) {\n      console.error('Error saving media:', error);\n      toast.error('An error occurred while saving. Please try again.');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const renderCustomField = (field: MediaType['fields'][0], value: any, onChange: (value: any) => void) => {\n    // Use field.label if available, otherwise use field.name\n    const displayLabel = field.label || field.name;\n    \n    // Ensure the value is properly formatted based on field type\n    let formattedValue = value;\n    \n    // Debug the field value\n    console.log(`Formatting field \"${field.name}\" of type \"${field.type}\" with value:`, value);\n    \n    switch (field.type) {\n      case 'text':\n        formattedValue = value || '';\n        return (\n          <TextField\n            label={displayLabel}\n            value={formattedValue}\n            onChange={(e) => onChange(e.target.value)}\n            fullWidth\n            size=\"small\"\n            required={field.required}\n          />\n        );\n      case 'number':\n        // Ensure we have a numeric value or empty string\n        formattedValue = value !== undefined && value !== null ? Number(value) : '';\n        return (\n          <TextField\n            label={displayLabel}\n            value={formattedValue}\n            onChange={(e) => {\n              const numericValue = e.target.value === '' ? '' : Number(e.target.value);\n              onChange(numericValue);\n            }}\n            type=\"number\"\n            fullWidth\n            size=\"small\"\n            required={field.required}\n          />\n        );\n      case 'select':\n        // Ensure we have a valid selection\n        formattedValue = value || '';\n        return (\n          <FormControl fullWidth size=\"small\" required={field.required}>\n            <InputLabel>{displayLabel}</InputLabel>\n            <Select\n              value={formattedValue}\n              onChange={(e) => onChange(e.target.value)}\n              label={displayLabel}\n            >\n              {field.options?.map((option: string) => (\n                <MenuItem key={option} value={option}>\n                  {option}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        );\n      case 'boolean':\n        // Ensure we have a boolean value\n        formattedValue = Boolean(value);\n        return (\n          <FormControlLabel\n            control={\n              <Switch\n                checked={formattedValue}\n                onChange={(e) => onChange(e.target.checked)}\n              />\n            }\n            label={displayLabel}\n          />\n        );\n      default:\n        // For any other type, use a text field\n        formattedValue = value || '';\n        return (\n          <TextField\n            label={displayLabel}\n            value={formattedValue}\n            onChange={(e) => onChange(e.target.value)}\n            fullWidth\n            size=\"small\"\n          />\n        );\n    }\n  };\n\n  return (\n    <Dialog\n      key={`media-edit-${mediaFile.id}-${open}`}\n      open={open}\n      onClose={handleDialogClose}\n      className=\"edit-media-dialog\"\n      maxWidth=\"md\"\n      fullWidth\n      fullScreen={isMobile}\n    >\n      <DialogTitle className=\"dialog-title\">\n        Edit Media Details\n        <IconButton\n          onClick={handleDialogClose}\n          sx={{ position: 'absolute', right: 8, top: 8 }}\n          size={isMobile ? \"small\" : \"medium\"}\n        >\n          <CloseIcon fontSize={isMobile ? \"small\" : \"medium\"} />\n        </IconButton>\n      </DialogTitle>\n      \n      <DialogContent className=\"dialog-content\">\n        <form \n          key={`form-${mediaFile.id}-${formVersion}`}\n          onSubmit={handleSubmit(onSubmit)} \n          className=\"edit-form\"\n        >\n          {/* Unsaved tag warning alert */}\n          {unsavedTag && (\n            <Alert \n              severity=\"warning\" \n              sx={{ mb: 2 }}\n              action={\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <Button \n                    color=\"primary\" \n                    size=\"small\" \n                    onClick={handleAddUnsavedTag}\n                    sx={{ mr: 1 }}\n                  >\n                    Add Tag\n                  </Button>\n                  <Button \n                    color=\"inherit\" \n                    size=\"small\" \n                    onClick={handleIgnoreUnsavedTag}\n                  >\n                    Ignore\n                  </Button>\n                </Box>\n              }\n            >\n              You have an unsaved tag: <strong>\"{unsavedTag}\"</strong>\n            </Alert>\n          )}\n\n          {/* Basic Information Section (CSS grid) */}\n          <Box className=\"form-section\" sx={{ marginTop: isMobile ? 2 : 4, padding: 2, marginBottom: 0 }}>\n            <Typography variant={isMobile ? \"subtitle1\" : \"h6\"} gutterBottom>Basic Information</Typography>\n            <Box sx={{\n              display: 'grid',\n              gap: isMobile ? 2 : 4,\n              gridTemplateColumns: isMobile ? '1fr' : '1fr 1fr'\n            }}>\n              <Box>\n                <Controller\n                  name=\"title\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      label=\"Title\"\n                      fullWidth\n                      size=\"small\"\n                    />\n                  )}\n                />\n              </Box>\n              <Box>\n                <Controller\n                  name=\"fileName\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      label=\"File Name\"\n                      fullWidth\n                      size=\"small\"\n                    />\n                  )}\n                />\n              </Box>\n              <Box>\n                <Controller\n                  name=\"altText\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      label=\"Alt Text\"\n                      fullWidth\n                      size=\"small\"\n                    />\n                  )}\n                />\n              </Box>\n              <Box>\n                <Controller\n                  name=\"visibility\"\n                  control={control}\n                  render={({ field }) => (\n                    <FormControl fullWidth size=\"small\">\n                      <InputLabel>Visibility</InputLabel>\n                      <Select {...field} label=\"Visibility\">\n                        <MenuItem value=\"public\">Public</MenuItem>\n                        <MenuItem value=\"private\">Private</MenuItem>\n                      </Select>\n                    </FormControl>\n                  )}\n                />\n              </Box>\n              <Box sx={{ gridColumn: '1 / -1' }}>\n                <Controller\n                  name=\"description\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      label=\"Description\"\n                      fullWidth\n                      multiline\n                      rows={isMobile ? 3 : 2}\n                      size=\"small\"\n                    />\n                  )}\n                />\n              </Box>\n            </Box>\n          </Box>\n\n          {/* Custom Fields Section */}\n          {mediaType.fields.length > 0 && (\n            <Box className=\"form-section\" sx={{ marginTop: isMobile ? 2 : 4, padding: 2 }}>\n              <Typography variant={isMobile ? \"subtitle1\" : \"h6\"} gutterBottom>{mediaType.name} Fields</Typography>\n              <Box sx={{ display: 'grid', gap: isMobile ? 2 : 4, gridTemplateColumns: isMobile ? '1fr' : '1fr 1fr' }}>\n                {mediaType.fields.map((field) => {\n                  // Log the current field definition and its value\n                  console.log(`Rendering field \"${field.name}\" (${field.type}):`, \n                    mediaFile.customFields?.[field.name]);\n                    \n                  return (\n                    <Box key={field.name}>\n                      <Controller\n                        name={`customFields.${field.name}`}\n                        control={control}\n                        defaultValue={mediaFile.customFields?.[field.name] || ''}\n                        render={({ field: { value, onChange } }) => {\n                          // Log each value change \n                          const handleChange = (newValue: any) => {\n                            console.log(`Field \"${field.name}\" changed to:`, newValue);\n                            onChange(newValue);\n                          };\n                          return renderCustomField(field, value, handleChange);\n                        }}\n                      />\n                    </Box>\n                  );\n                })}\n              </Box>\n            </Box>\n          )}\n\n          <Box className=\"form-section\" sx={{ marginTop: isMobile ? 2 : 4, padding: 2 }}>\n            <Typography variant={isMobile ? \"subtitle1\" : \"h6\"} gutterBottom>Tags</Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mb: isMobile ? 1 : 2, display: 'block', fontSize: isMobile ? '0.7rem' : '0.75rem' }}>\n              Default tags from the media type cannot be removed here. They can only be modified by superAdmins in the Media Types settings.\n            </Typography>\n            <Box sx={{ display: 'grid', gap: isMobile ? 2 : 4 }}>\n              <Box>\n                <TextField\n                  label=\"Add Tags\"\n                  value={newTag}\n                  onChange={(e) => setNewTag(e.target.value)}\n                  onKeyDown={handleAddTag}\n                  fullWidth\n                  size=\"small\"\n                  helperText=\"Press Enter to add a tag\"\n                />\n                <Box sx={{ mt: 1, display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {watch('tags').map((tag) => {\n                    const isDefaultTag = mediaType.defaultTags?.includes(tag);\n                    return (\n                      <Chip\n                        key={tag}\n                        label={tag}\n                        onDelete={isDefaultTag ? undefined : () => handleDeleteTag(tag)}\n                        size=\"small\"\n                        color={isDefaultTag ? \"primary\" : \"default\"}\n                        sx={isDefaultTag ? {\n                          borderWidth: isMobile ? '1px' : '2px',\n                          borderStyle: 'solid',\n                          borderColor: 'var(--secondary-color)',\n                          position: 'relative',\n                        } : {}}\n                        title={isDefaultTag ? \"This is a default tag from the media type and cannot be removed\" : \"Click 'x' to remove this tag\"}\n                      />\n                    );\n                  })}\n                </Box>\n              </Box>\n            </Box>\n          </Box>\n        </form>\n      </DialogContent>\n\n      <DialogActions className=\"dialog-actions\">\n        <Button onClick={handleDialogClose} size={isMobile ? \"small\" : \"medium\"}>Cancel</Button>\n        <Button\n          onClick={handleSubmit(onSubmit)}\n          variant=\"contained\"\n          color=\"primary\"\n          size={isMobile ? \"small\" : \"medium\"}\n          disabled={isSaving}\n        >\n          {isSaving ? <CircularProgress size={20} /> : 'Save Changes'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// Export as both named and default export for lazy loading support\nexport default EditMediaDialog;","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaDetail/components/MediaInformation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[684,687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[684,687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[802,805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[802,805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":101,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":104,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3896,3899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3896,3899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { \n  Typography, \n  Box, \n  Accordion, \n  AccordionSummary, \n  AccordionDetails,\n  useMediaQuery,\n  Theme,\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { formatFileSize } from '../../../utils/formatFileSize';\nimport { shouldHideField } from '../../../config/mediaInfoConfig';\nimport '../styles/MediaInformation.scss';\nimport { MediaDetailTags } from '../MediaDetail';\nimport { useUsername } from '../../../hooks/useUsername';\nimport { MediaFile } from '../../../hooks/query-hooks';\n\ninterface MediaTypeField {\n  name: string;\n  type: string;\n  required?: boolean;\n  options?: string[];\n  [key: string]: any;\n}\n\ninterface MediaTypeConfig {\n  fields: MediaTypeField[];\n  name: string;\n  baseType?: string;\n  [key: string]: any;\n}\n\ninterface MediaInformationProps {\n  mediaFile: MediaFile;\n  mediaTypeConfig: MediaTypeConfig | null;\n  baseFields: Record<string, unknown>;\n  getMetadataField: (mediaFile: MediaFile, fieldName: string, defaultValue?: unknown) => unknown;\n}\n\n// Helper function to check if a field is part of the base schema\nconst isBaseSchemaField = (fieldName: string, baseFields: Record<string, unknown>): boolean => {\n  return Object.keys(baseFields).includes(fieldName);\n};\n\nconst MediaInformation: React.FC<MediaInformationProps> = ({ \n  mediaFile, \n  mediaTypeConfig, \n  baseFields,\n  getMetadataField\n}) => {\n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('sm'));\n  \n  // Filter for standard/base fields - keeps existing behavior for these sections\n  const filterStandardAndBaseFields = (fields: { label: string; value: unknown }[]) => {\n    return fields.filter(field => \n      !shouldHideField(field.label) && \n      field.value !== undefined && \n      field.value !== null && \n      (typeof field.value === 'string' ? field.value.trim() !== '' : true) &&\n      field.value !== 'N/A' && // Avoid hiding our N/A placeholder\n      // Keep specific placeholders for description/altText if they are the value\n      !(field.label === 'Description' && field.value === 'No description') &&\n      !(field.label === 'Alt Text' && field.value === 'No alt text')\n    );\n  };\n\n  const userId = getMetadataField(mediaFile, 'uploadedBy', '') as string;\n  const { username: uploaderUsername, loading: uploaderLoading } = useUsername(userId);\n\n  const basicFileInfoRaw = [\n    { label: 'Title', value: mediaFile.title || 'Untitled' },\n    { label: 'File Name', value: getMetadataField(mediaFile, 'fileName') || mediaFile.title || 'Unknown' },\n    { label: 'File Size', value: mediaFile.fileSize ? formatFileSize(mediaFile.fileSize) : 'Unknown' },\n    { label: 'File Type', value: mediaFile.fileExtension ? `.${mediaFile.fileExtension}` : 'Unknown' },\n    { label: 'Media Type', value: mediaFile.mediaType || 'Unknown' },\n    { label: 'Visibility', value: getMetadataField(mediaFile, 'visibility', 'Public') },\n    { label: 'Uploaded By', value: uploaderLoading ? 'Loading...' : (uploaderUsername || userId || 'Unknown') },\n    { label: 'Uploaded On', value: getMetadataField(mediaFile, 'modifiedDate', 'Unknown') \n      ? new Date(getMetadataField(mediaFile, 'modifiedDate') as string).toLocaleDateString(undefined, {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      : 'Unknown' }\n  ];\n  const displayableBasicFileInfo = filterStandardAndBaseFields(basicFileInfoRaw);\n\n  const standardMetadataRaw = [\n    { label: 'Description', value: getMetadataField(mediaFile, 'description', 'No description') },\n    { label: 'Alt Text', value: getMetadataField(mediaFile, 'altText', 'No alt text') }\n  ];\n  const displayableStandardMetadata = filterStandardAndBaseFields(standardMetadataRaw);\n\n  const baseSchemaPropertiesRaw = Object.entries(baseFields).map(([fieldName, fieldProps]: [string, any]) => ({\n      label: fieldName,\n      value: getMetadataField(mediaFile, fieldName) !== undefined \n        ? (fieldProps as MediaTypeField).type === 'Boolean' \n          ? (getMetadataField(mediaFile, fieldName) ? 'Yes' : 'No')\n          : String(getMetadataField(mediaFile, fieldName))\n      : undefined // Explicitly undefined if not present\n  }));\n  const displayableBaseSchemaProperties = filterStandardAndBaseFields(baseSchemaPropertiesRaw);\n\n  // New approach for customFields:\n  const allCustomFieldsDefinedByType = mediaTypeConfig?.fields\n    ? mediaTypeConfig.fields\n          .filter(field => \n            !['fileName', 'tags', 'altText', 'description', 'visibility'].includes(field.name) &&\n          !isBaseSchemaField(field.name, baseFields) &&\n          !shouldHideField(field.name) \n          )\n          .map(field => {\n            const value = getMetadataField(mediaFile, field.name);\n          let displayValue: string;\n\n          if (value === undefined || value === null || String(value).trim() === '') {\n            displayValue = 'N/A'; // Display 'N/A' for empty or undefined values\n          } else if (field.type === 'Boolean') {\n            displayValue = value ? 'Yes' : 'No';\n          } else {\n            displayValue = String(value);\n          }\n          \n            return {\n              label: field.name,\n            value: displayValue,\n            };\n          })\n    : [];\n\n  return (\n    <div className=\"media-information\">\n      \n      {displayableBasicFileInfo.length > 0 && (\n        <Accordion defaultExpanded>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon fontSize={isMobile ? \"small\" : \"medium\"} />}\n            aria-controls=\"basic-info-content\"\n            id=\"basic-info-header\"\n          >\n            <Typography variant={isMobile ? \"body1\" : \"subtitle1\"}>Basic Information</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Box className=\"info-grid\">\n              {displayableBasicFileInfo.map((info, index) => (\n                <Box key={index} className=\"info-item\">\n                  <Typography variant=\"subtitle2\">{info.label}</Typography>\n                  <Typography variant=\"body2\">{info.value as string}</Typography>\n                </Box>\n              ))}\n            </Box>\n          </AccordionDetails>\n        </Accordion>\n      )}\n\n      {mediaFile.metadata?.tags && mediaFile.metadata?.tags.length > 0 && (\n        <Accordion>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon fontSize={isMobile ? \"small\" : \"medium\"} />}\n          >\n            <Typography variant={isMobile ? \"body1\" : \"subtitle1\"}>Tags</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Box>\n            <MediaDetailTags \n            tags={getMetadataField(mediaFile, 'tags', []) as string[] | undefined} \n            isMobile={isMobile}\n            />\n            </Box>\n          </AccordionDetails>\n        </Accordion>\n      )}\n\n      {displayableStandardMetadata.length > 0 && (\n        <Accordion defaultExpanded>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon fontSize={isMobile ? \"small\" : \"medium\"} />}\n            aria-controls=\"content-info-content\"\n            id=\"content-info-header\"\n          >\n            <Typography variant={isMobile ? \"body1\" : \"subtitle1\"}>Content Information</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Box className=\"info-grid\">\n              {displayableStandardMetadata.map((info, index) => (\n                <Box key={index} className=\"info-item\">\n                  <Typography variant=\"subtitle2\">{info.label}</Typography>\n                    <Typography variant=\"body2\">{info.value as string}</Typography>\n                </Box>\n              ))}\n            </Box>\n          </AccordionDetails>\n        </Accordion>\n      )}\n\n      {displayableBaseSchemaProperties.length > 0 && (\n        <Accordion>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon fontSize={isMobile ? \"small\" : \"medium\"} />}\n            aria-controls=\"base-schema-content\"\n            id=\"base-schema-header\"\n          >\n            <Typography variant={isMobile ? \"body1\" : \"subtitle1\"}>\n              {mediaTypeConfig?.baseType?.replace('Base', '') || 'Media'} Technical Properties\n            </Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Box className=\"info-grid\">\n              {displayableBaseSchemaProperties.map((info, index) => (\n                <Box key={index} className=\"info-item\">\n                  <Typography variant=\"subtitle2\">{info.label}</Typography>\n                  <Typography variant=\"body2\">{info.value as string}</Typography>\n                </Box>\n              ))}\n            </Box>\n          </AccordionDetails>\n        </Accordion>\n      )}\n\n      {/* Show the accordion if there are ANY custom fields defined for the type (after initial filtering) */}\n      {mediaTypeConfig && mediaTypeConfig.fields && \n       mediaTypeConfig.fields.filter(f => \n         !['fileName', 'tags', 'altText', 'description', 'visibility'].includes(f.name) && \n         !isBaseSchemaField(f.name, baseFields) && \n         !shouldHideField(f.name)\n       ).length > 0 && (\n        <Accordion>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon fontSize={isMobile ? \"small\" : \"medium\"} />}\n            aria-controls=\"custom-fields-content\"\n            id=\"custom-fields-header\"\n          >\n            <Typography variant={isMobile ? \"body1\" : \"subtitle1\"}>\n              {mediaTypeConfig?.name} Specific Fields\n            </Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Box className=\"info-grid\">\n              {allCustomFieldsDefinedByType.map((info, index) => (\n                <Box key={index} className=\"info-item\">\n                  <Typography variant=\"subtitle2\">{info.label}</Typography>\n                  <Typography variant=\"body2\">{info.value as string}</Typography>\n                </Box>\n              ))}\n            </Box>\n          </AccordionDetails>\n        </Accordion>\n      )}\n    </div>\n  );\n};\n\n// Export as both named and default export to support both usage patterns\nexport { MediaInformation };\nexport default MediaInformation; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaDetail/components/RelatedMediaItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaDetail/components/ThumbnailUpdateDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaLibrary/ConfirmationModal.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaLibrary/HeaderComponent.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaLibrary/MediaCard.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaLibrary/MediaLibrary.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaLibrary/MediaLibrary.tsx","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":57,"column":35,"nodeType":"Identifier","endLine":57,"endColumn":43},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useNavigate\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":61,"column":20,"nodeType":"Identifier","endLine":61,"endColumn":31},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":62,"column":41,"nodeType":"Identifier","endLine":62,"endColumn":49},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":63,"column":35,"nodeType":"Identifier","endLine":63,"endColumn":43},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":64,"column":47,"nodeType":"Identifier","endLine":64,"endColumn":55},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":65,"column":49,"nodeType":"Identifier","endLine":65,"endColumn":57},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRef\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":66,"column":23,"nodeType":"Identifier","endLine":66,"endColumn":29},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMediaQuery\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":67,"column":20,"nodeType":"Identifier","endLine":67,"endColumn":33},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useUserProfile\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":69,"column":33,"nodeType":"Identifier","endLine":69,"endColumn":47},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":71,"column":41,"nodeType":"Identifier","endLine":71,"endColumn":49},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":72,"column":27,"nodeType":"Identifier","endLine":72,"endColumn":35},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useTagCategories\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":78,"column":45,"nodeType":"Identifier","endLine":78,"endColumn":61},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRef\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":81,"column":26,"nodeType":"Identifier","endLine":81,"endColumn":32},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":85,"column":3,"nodeType":"Identifier","endLine":85,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":98,"column":3,"nodeType":"Identifier","endLine":98,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":123,"column":16,"nodeType":"Identifier","endLine":123,"endColumn":23}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useMemo, useEffect, lazy, Suspense } from 'react';\nimport { Box, Typography, Toolbar, IconButton, Tooltip, useMediaQuery, Theme, CircularProgress } from '@mui/material';\nimport { motion } from 'framer-motion';\nimport './mediaLibrary.scss';\nimport { useNavigate } from 'react-router-dom';\nimport { FaTrash, FaDownload, FaSpinner } from 'react-icons/fa';\nimport { BaseMediaFile } from '../../interfaces/MediaFile';\nimport { alpha } from '@mui/material/styles';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { GridRowSelectionModel } from '@mui/x-data-grid';\nimport axios from 'axios';\nimport env from '../../config/env';\nimport { useTagCategories, useUserProfile } from '../../hooks/query-hooks';\n// import { MediaCardViewSwitcher } from './components/MediaCardViewSwitcher'; // Removed\n// import { DebugMediaData } from './components/DebugMediaData'; // Removed\n\n// Lazy load subcomponents\nconst HeaderComponent = lazy(() => import('./components/HeaderComponent'));\nconst VirtualizedDataTable = lazy(() => import('./components/VirtualizedDataTable'));\nconst MediaCard = lazy(() => import('./components/MediaCard'));\nconst ConfirmationModal = lazy(() => import('./components/ConfirmationModal'));\n\n// Loading fallback component\nconst LoadingFallback = () => (\n  <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" p={2}>\n    <CircularProgress size={24} />\n  </Box>\n);\n\ninterface MediaLibraryProps {\n  mediaFilesData: BaseMediaFile[];\n  dataSourceForFilters?: BaseMediaFile[];\n  setSearchQuery: React.Dispatch<React.SetStateAction<string>>;\n  onAddMedia: () => void;\n  onDeleteMedia: (id: string) => Promise<boolean>;\n  selectedMediaType: string;\n  handleMediaTypeChange: (type: string) => void;\n  children?: React.ReactNode;\n}\n\nconst MediaLibrary: React.FC<MediaLibraryProps> = ({ \n  mediaFilesData, \n  dataSourceForFilters,\n  setSearchQuery, \n  onAddMedia, \n  onDeleteMedia, \n  selectedMediaType,\n  handleMediaTypeChange,\n  children \n}) => {\n  // If children are provided (compound usage), render them directly\n  if (children) {\n    return <div className=\"media-library-container\">{children}</div>;\n  }\n\n  const [viewMode, setViewMode] = useState<'list' | 'card'>(() => {\n    // Get saved view mode from localStorage or default to 'card'\n    return localStorage.getItem('mediaLibraryViewMode') as 'list' | 'card' || 'card';\n  });\n  const navigate = useNavigate();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selected, setSelected] = useState<GridRowSelectionModel>([]);\n  const [selectedFileId, setSelectedFileId] = useState<string | null>(null);\n  const [isToolbarDelete, setIsToolbarDelete] = useState(false);\n  const prevDataRef = useRef<string>('');\n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('sm'));\n  // Get user role from Redux store\n  const { data: userProfile } = useUserProfile();\n  const userRole = userProfile?.role;\n  const [downloading, setDownloading] = useState<boolean>(false);\n  const [toastSettings] = useState({\n    disableTagNotifications: true,\n    initialLoadComplete: false\n  });\n  \n  // Use TanStack Query for tag categories\n  const { refetch: refetchTagCategories } = useTagCategories(userProfile);\n  \n  // Handle initial data loading silently - with debounce\n  const tagsFetchedRef = useRef(false);\n  \n  // Only fetch tag categories when the user actually interacts with the filter\n  // or switches to card view where tags are displayed\n  useEffect(() => {\n    // Delay tag loading to prioritize more important UI components\n    const tagLoadTimer = setTimeout(() => {\n      if (!tagsFetchedRef.current) {\n        tagsFetchedRef.current = true;\n        refetchTagCategories();\n      }\n    }, 2000); // 2 second delay\n    \n    return () => clearTimeout(tagLoadTimer);\n  }, [refetchTagCategories, viewMode]);\n  \n  // Clean up references on unmount\n  useEffect(() => {\n    return () => {\n      tagsFetchedRef.current = false;\n    };\n  }, []);\n  \n  // Custom toast function that avoids showing tag-related errors during initial page load\n  const safeToast = (type: 'success' | 'error' | 'info' | 'warning', message: string, options = {}) => {\n    // Skip tag-related notifications if disabled and not from user action\n    if (toastSettings.disableTagNotifications && \n        !toastSettings.initialLoadComplete && \n        (message.includes('tag') || message.includes('Tag') || message.includes('category') || message.includes('Category'))) {\n      console.log('Suppressing tag-related toast:', message);\n      return;\n    }\n    \n    // Otherwise show the toast\n    toast[type](message, {\n      position: isMobile ? \"bottom-center\" : \"top-right\",\n      autoClose: 3000,\n      ...options\n    });\n  };\n\n  // Process rows only when mediaFilesData or filter changes\n  const rows = useMemo(() => {\n    const newRows = mediaFilesData\n      .filter(file => selectedMediaType === 'All' || file.mediaType === selectedMediaType)\n      .map((file) => ({\n        id: file._id || file.id || crypto.randomUUID(),\n        location: file.location || '',\n        title: file.title || '',\n        fileSize: file.fileSize || 0,\n        fileExtension: file.fileExtension || '',\n        modifiedDate: file.modifiedDate,\n        metadata: {\n          fileName: file.metadata?.fileName || 'Untitled',\n          altText: file.metadata?.altText || '',\n          description: file.metadata?.description || '',\n          tags: file.metadata?.tags || [],\n          visibility: file.metadata?.visibility || 'public',\n          catColor: file.metadata?.catColor || null,\n          v_thumbnail: file.metadata?.v_thumbnail || null,\n          v_thumbnailTimestamp: file.metadata?.v_thumbnailTimestamp || null\n        },\n        slug: file.slug || '',\n        mediaType: file.mediaType || 'Unknown'\n      }));\n\n    const dataString = JSON.stringify({ count: newRows.length, types: [...new Set(newRows.map(row => row.mediaType))] });\n    if (newRows.length > 0 && dataString !== prevDataRef.current) {\n      console.log('MediaLibrary - Data ready:', {\n        count: newRows.length,\n        types: [...new Set(newRows.map(row => row.mediaType))]\n      });\n      prevDataRef.current = dataString;\n    }\n\n    return newRows;\n  }, [mediaFilesData, selectedMediaType]);\n\n  const toggleView = () => {\n    const newViewMode = viewMode === 'list' ? 'card' : 'list';\n    setViewMode(newViewMode);\n    // Save to localStorage\n    localStorage.setItem('mediaLibraryViewMode', newViewMode);\n  };\n\n  const handleFileClick = (file: BaseMediaFile) => {\n    if (file.slug) {\n      navigate(`/media/slug/${file.slug}`);\n    } else if (file._id || file.id) {\n      // Fallback to ID if slug is not available\n      navigate(`/media/id/${file._id || file.id}`);\n    }\n  };\n\n  const handleDeleteClick = (id: string) => {\n    setSelectedFileId(id);\n    setIsModalOpen(true);\n  };\n\n  const handleConfirmDelete = async () => {\n    let successfullyDeletedIds: string[] = [];\n    if (isToolbarDelete) {\n      // Handle multiple deletions\n      const numSelected = selected.length;\n      if (numSelected === 0) {\n        safeToast('info', 'No files were selected for deletion.');\n        setIsModalOpen(false);\n        setIsToolbarDelete(false);\n        return;\n      }\n\n      const promises = selected.map(id => onDeleteMedia(id as string).then(success => ({ id: id as string, success })));\n      const results = await Promise.all(promises);\n\n      successfullyDeletedIds = results.filter(r => r.success).map(r => r.id);\n      const successfulDeletionsCount = successfullyDeletedIds.length;\n\n      if (successfulDeletionsCount === numSelected && numSelected > 0) {\n        safeToast('success', `${successfulDeletionsCount} media file${successfulDeletionsCount > 1 ? 's' : ''} deleted successfully.`);\n      } else if (successfulDeletionsCount > 0 && successfulDeletionsCount < numSelected) {\n        safeToast('warning', `${successfulDeletionsCount} out of ${numSelected} media files deleted. Some deletions may have failed.`);\n      } else if (numSelected > 0 && successfulDeletionsCount === 0) {\n        safeToast('error', `Failed to delete ${numSelected} selected media file${numSelected > 1 ? 's' : ''}.`);\n      }\n    } else if (selectedFileId) {\n      // Handle single deletion\n      const fileToDelete = rows.find(row => row.id === selectedFileId);\n      const fileName = fileToDelete?.title || fileToDelete?.metadata?.fileName || 'this media file';\n\n      const success = await onDeleteMedia(selectedFileId);\n      if (success) {\n        successfullyDeletedIds = [selectedFileId];\n        safeToast('success', `Media file '${fileName}' deleted successfully.`);\n        setSelectedFileId(null); // Clear the selected file ID\n      } else {\n        safeToast('error', `Failed to delete media file '${fileName}'.`);\n      }\n    }\n\n    // After deletions, filter the 'selected' state to remove IDs of deleted items\n    // This requires knowing the updated rows data. \n    // Since onDeleteMedia updates the parent (MediaContainer) which then updates mediaFilesData (and thus rows),\n    // we might need a slight delay or ensure 'rows' is fresh before this filter.\n    // For now, let's assume 'rows' will be updated by the time this runs or shortly after.\n    // A more robust way would be to get the updated list of rows or rely on the parent to clear selection.\n    \n    // Update the selected state by removing successfully deleted IDs\n    setSelected(currentSelected => currentSelected.filter(id => !successfullyDeletedIds.includes(id as string)));\n\n    setIsModalOpen(false);\n    setIsToolbarDelete(false); // Reset the toolbar delete flag\n  };\n\n  const handleDeleteSelected = () => {\n    if (selected.length > 0) {\n      setIsToolbarDelete(true);\n      setIsModalOpen(true);\n    }\n  };\n\n  const handleDownloadSelected = async () => {\n    if (selected.length === 0) {\n      safeToast('info', 'No files selected for download', {\n        autoClose: 2000\n      });\n      return;\n    }\n\n    try {\n      setDownloading(true);\n      \n      // Get file IDs from selected items\n      const fileIds = selected.map(id => {\n        const file = rows.find(row => row.id === id);\n        return file?.id || '';\n      }).filter(id => id !== '');\n      \n      if (fileIds.length > 0) {\n        safeToast('info', `Preparing ${fileIds.length} files for download...`, {\n          autoClose: 2000\n        });\n        \n        try {\n          // Use axios to make the request with responseType blob\n          const response = await axios.post<Blob>(\n            `${env.BASE_URL}/api/media/batch-download`,\n            { fileIds }, // Send as JSON in request body\n            { \n              responseType: 'blob',\n              timeout: fileIds.length > 10 ? 60000 : 30000 // Longer timeout for larger batches\n            }\n          );\n          \n          // Create a download link for the blob\n          const blob = new Blob([response.data]);\n          const url = window.URL.createObjectURL(blob);\n          const link = document.createElement('a');\n          link.href = url;\n          link.setAttribute('download', `omni_media_${Date.now()}.zip`);\n          document.body.appendChild(link);\n          link.click();\n          \n          // Clean up\n          window.URL.revokeObjectURL(url);\n          document.body.removeChild(link);\n          \n          safeToast('success', `Downloaded ${selected.length} files`, {\n            autoClose: 3000\n          });\n        } catch (downloadError: unknown) {\n          console.error('Download error:', downloadError);\n          \n          // Check if error is an object with a code property\n          if (downloadError && typeof downloadError === 'object' && 'code' in downloadError) {\n            const error = downloadError as { code?: string, response?: { status?: number } };\n            \n            if (error.code === 'ECONNABORTED') {\n              safeToast('error', 'Download timed out. Please try downloading fewer files at once.', {\n                autoClose: 4000\n              });\n            } else if (error.response && error.response.status === 413) {\n              safeToast('error', 'Batch too large. Please select fewer files and try again.', {\n                autoClose: 4000\n              });\n            } else {\n              safeToast('error', 'Failed to download files. Please try again.', {\n                autoClose: 4000\n              });\n            }\n          } else {\n            safeToast('error', 'Failed to download files. Please try again.', {\n              autoClose: 4000\n            });\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Download preparation error:', error);\n      safeToast('error', 'Failed to prepare files for download. Please try again.', {\n        autoClose: 4000\n      });\n    } finally {\n      setDownloading(false);\n    }\n  };\n\n  // Motion animation adjusted for mobile\n  const motionProps = {\n    initial: { opacity: 0, x: isMobile ? -100 : -350 },\n    animate: { opacity: 1, x: 0 },\n    exit: { opacity: 0, x: isMobile ? -100 : -350 },\n    transition: { duration: isMobile ? 0.3 : 0.5 }\n  };\n\n  // Only log on dev environment and only once per render cycle with a stable key\n  if (process.env.NODE_ENV === 'development' && rows.length > 0 && !prevDataRef.current.includes(rows.length.toString())) {\n    console.log('MediaLibrary - Rendering with:', {\n      rows: rows.length,\n      viewMode,\n      userRole\n    });\n  }\n\n  // Restore EnhancedTableToolbar as a local component\n  const EnhancedTableToolbar = ({ numSelected, onDelete }: { numSelected: number, onDelete: () => void }) => (\n    <Toolbar\n      className=\"toolbar\"\n      sx={{\n        ...(numSelected > 0 && {\n          bgcolor: (theme) =>\n            alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\n        }),\n      }}\n    >\n      {numSelected > 0 && (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      )}\n      {numSelected > 0 && (\n        <>\n          <Tooltip title={downloading ? \"Downloading...\" : \"Download\"}>\n            <IconButton \n              onClick={handleDownloadSelected} \n              size={isMobile ? \"small\" : \"medium\"} \n              color=\"primary\"\n              disabled={downloading}\n            >\n              {downloading ? <FaSpinner className=\"fa-spin\" /> : <FaDownload />}\n            </IconButton>\n          </Tooltip>\n          {(userRole === 'superAdmin' || userRole === 'admin') && (\n            <Tooltip title=\"Delete\">\n              <IconButton \n                onClick={onDelete} // Use the passed onDelete prop\n                size={isMobile ? \"small\" : \"medium\"} \n                color=\"error\" \n                disabled={downloading}\n              >\n                <FaTrash />\n              </IconButton>\n            </Tooltip>\n          )}\n        </>\n      )}\n    </Toolbar>\n  );\n\n  return (\n    <motion.div\n      id=\"media-library\"\n      {...motionProps}\n    >\n      <Box className=\"media-library\" sx={{ width: '100%', overflow: 'hidden' }}>\n        <Typography variant=\"h1\" align=\"left\" sx={{ paddingBottom: isMobile ? '1rem' : '2rem' }}>\n          OMNI Media Library\n        </Typography>\n        <Suspense fallback={<LoadingFallback />}>\n          <HeaderComponent\n            view={viewMode}\n            toggleView={toggleView}\n            mediaFilesData={dataSourceForFilters || mediaFilesData}\n            setSearchQuery={setSearchQuery}\n            selectedMediaType={selectedMediaType}\n            handleMediaTypeChange={handleMediaTypeChange}\n            onAddMedia={onAddMedia}\n          />\n        </Suspense>\n        <Box sx={{ \n          width: '100%', \n          height: 'calc(100% - 4rem)', \n          overflow: 'hidden',\n          mt: isMobile ? 1 : 2\n        }}>\n          {selected.length > 0 && (\n            <EnhancedTableToolbar numSelected={selected.length} onDelete={handleDeleteSelected} />\n          )}\n          \n          {viewMode === 'list' ? (\n            <Suspense fallback={<LoadingFallback />}>\n              <VirtualizedDataTable\n                rows={rows}\n                onSelectionChange={setSelected}\n                selectionModel={selected}\n                key=\"virtualized-data-table\"\n              />\n            </Suspense>\n          ) : (\n            <Box className=\"media-card-grid\" sx={{ p: 2, overflow: 'auto' }}>\n              <Box sx={{ \n                display: 'grid',\n                gridTemplateColumns: 'repeat(auto-fill, minmax(150px, 1fr))',\n                gap: 2\n              }}>\n                {/* {viewMode === 'card' && <MediaCardViewSwitcher onViewChange={handleViewChange} currentView={viewMode} />} Commented out */}\n                {rows.map((row) => (\n                  <Box key={`${row.id}-${row.metadata?.v_thumbnailTimestamp || ''}`}>\n                    <Suspense fallback={<LoadingFallback />}>\n                      <MediaCard\n                        file={row}\n                        handleFileClick={() => handleFileClick(row)}\n                        onDeleteClick={userRole === 'superAdmin' || userRole === 'admin' ? () => handleDeleteClick(row.id) : undefined}\n                      />\n                    </Suspense>\n                  </Box>\n                ))}\n                {rows.length === 0 && (\n                  <Typography variant=\"body1\" color=\"textSecondary\" sx={{ gridColumn: '1/-1', textAlign: 'center', py: 4 }}>\n                    No media files found. Try changing your filter or upload new media.\n                  </Typography>\n                )}\n              </Box>\n            </Box>\n          )}\n        </Box>\n      </Box>\n      {isModalOpen && (\n        <Suspense fallback={<LoadingFallback />}>\n          <ConfirmationModal\n            open={isModalOpen}\n            onClose={() => setIsModalOpen(false)}\n            onConfirm={handleConfirmDelete}\n            title=\"Delete Media\"\n            message={`Are you sure you want to delete ${isToolbarDelete ? 'the selected items' : 'this media file'}? This action cannot be undone.`}\n          />\n        </Suspense>\n      )}\n    </motion.div>\n  );\n};\n\n// Modified component exports to support both direct and lazy loading\nexport { HeaderComponent, VirtualizedDataTable, MediaCard, ConfirmationModal };\nexport default MediaLibrary;","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaLibrary/components/ConfirmationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaLibrary/components/HeaderComponent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaLibrary/components/MediaCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaLibrary/components/VirtualizedDataTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaLibrary/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaLibrary/utils/fileUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaLibrary/utils/iconUtils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaLibrary/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaPicker/MediaPicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaPicker/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaTypeUploader/MediaTypeUploader.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2300,2303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2300,2303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'confirmClose', 'handleNext', and 'handleSaveMediaType'. Either include them or remove the dependency array.","line":282,"column":6,"nodeType":"ArrayExpression","endLine":282,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [open, activeStep, hasUnsavedChanges, isSaving, confirmClose, handleSaveMediaType, handleNext]","fix":{"range":[8740,8787],"text":"[open, activeStep, hasUnsavedChanges, isSaving, confirmClose, handleSaveMediaType, handleNext]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has an unnecessary dependency: 'open'. Either exclude it or remove the dependency array.","line":309,"column":6,"nodeType":"ArrayExpression","endLine":309,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [mediaTypes, mediaTypeConfig._id]","fix":{"range":[9746,9785],"text":"[mediaTypes, mediaTypeConfig._id]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleClose'. Either include it or remove the dependency array.","line":339,"column":6,"nodeType":"ArrayExpression","endLine":339,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [handleClose, hasUnsavedChanges]","fix":{"range":[10701,10720],"text":"[handleClose, hasUnsavedChanges]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":428,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":428,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13912,13915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13912,13915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":456,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":456,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15236,15239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15236,15239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":524,"column":31,"nodeType":"Identifier","endLine":524,"endColumn":42}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Stepper,\n  Step,\n  StepLabel,\n  TextField,\n  IconButton,\n  Typography,\n  Box,\n  Chip,\n  CircularProgress,\n  Tooltip,\n  Backdrop\n} from '@mui/material';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\nimport { FaArrowRight, FaArrowLeft, FaSave, FaQuestionCircle } from 'react-icons/fa';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { \n  MediaTypeConfig, \n  MediaTypeField, \n  FieldType, \n  createField,\n} from '../../types/mediaTypes';\nimport '../MediaTypeUploader.scss';\nimport env from '../../config/env';\nimport { \n  ColorPicker, \n  FieldEditor, \n  FieldPreview, \n  FileTypeSelector, \n  ReviewStep \n} from './components';\nimport {\n  FileTypeCategory,\n  predefinedColors,\n  normalizeTag\n} from '../../utils/mediaTypeUploaderUtils';\nimport { transformConfigToApiData } from '../../types/mediaTypes';\nimport { FaImage, FaVideo, FaFileAudio, FaFileWord } from 'react-icons/fa';\nimport debounce from 'lodash/debounce';\nimport {\n  useMediaTypes,\n  useUpdateMediaType,\n  useCreateMediaType,\n  useUserProfile,\n} from '../../hooks/query-hooks';\nimport { useQueryClient } from '@tanstack/react-query';\n\n// Define available field types\nconst inputOptions: FieldType[] = ['Text', 'TextArea', 'Number', 'Date', 'Boolean', 'Select', 'MultiSelect'];\n\n// Define common file type categories and their MIME types\nconst fileTypeCategories: FileTypeCategory[] = [\n  { \n    name: 'images', \n    label: 'Images', \n    icon: <FaImage />, \n    mimeTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/svg+xml', 'image/webp'] \n  },\n  { \n    name: 'videos', \n    label: 'Videos', \n    icon: <FaVideo />, \n    mimeTypes: ['video/mp4', 'video/webm', 'video/ogg', 'video/quicktime'] \n  },\n  { \n    name: 'audio', \n    label: 'Audio', \n    icon: <FaFileAudio />, \n    mimeTypes: ['audio/mpeg', 'audio/ogg', 'audio/wav', 'audio/webm'] \n  },\n  { \n    name: 'documents', \n    label: 'Documents', \n    icon: <FaFileWord />, \n    mimeTypes: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain'] \n  }\n];\n\n// Debug logging function\nconst logSettings = (action: string, settings: any) => {\n  console.log(`[MediaTypeUploader] ${action}:`, {\n    settings,\n    allowRelatedMedia: settings?.allowRelatedMedia,\n    type: typeof settings,\n    isObject: settings !== null && typeof settings === 'object'\n  });\n};\n\n// Initial media type configuration\nconst initialMediaTypeConfig: MediaTypeConfig = {\n  name: '',\n  fields: [],\n  baseType: 'Media' as 'BaseImage' | 'BaseVideo' | 'BaseAudio' | 'BaseDocument' | 'Media',\n  includeBaseFields: true,\n  acceptedFileTypes: [],\n  status: 'active',\n  catColor: '#2196f3', // Default blue color\n  defaultTags: [], // Initialize with empty array\n  _id: undefined,\n  settings: {\n    allowRelatedMedia: false\n  }\n};\n\n// Define step constants\nconst STEP_NAME = 0;\nconst STEP_FIELDS = 1;\nconst STEP_REVIEW = 2;\n\ninterface MediaTypeUploaderProps {\n  open: boolean;\n  onClose: () => void;\n  editMediaTypeId?: string | null; // Add optional prop for editing\n}\n\n// Define interface for ConfirmationDialog props\ninterface ConfirmationDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  title?: string;\n  message?: string;\n}\n\n// Confirmation dialog component\nconst ConfirmationDialog: React.FC<ConfirmationDialogProps> = ({ \n  open, \n  onClose, \n  onConfirm, \n  title = 'Confirm Action', \n  message = 'Are you sure you want to proceed?' \n}) => (\n  <Dialog open={open} onClose={onClose}>\n    <DialogTitle>{title}</DialogTitle>\n    <DialogContent>\n      <Typography>{message}</Typography>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} color=\"primary\">Cancel</Button>\n      <Button onClick={() => { onConfirm(); onClose(); }} color=\"error\" variant=\"contained\">\n        Confirm\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nconst MediaTypeUploader: React.FC<MediaTypeUploaderProps> = ({ open, onClose, editMediaTypeId }) => {\n  // Set up TanStack Query hooks\n  const queryClient = useQueryClient();\n  const { data: mediaTypes = [] } = useMediaTypes();\n  const { mutateAsync: createMediaTypeMutation } = useCreateMediaType();\n  const { mutateAsync: updateMediaTypeMutation } = useUpdateMediaType();\n  const { data: userProfile } = useUserProfile();\n  \n  // Get the current user role\n  const userRole = userProfile?.role;\n  const isSuperAdmin = userRole === 'superAdmin';\n  \n  // State for media type configuration\n  const [mediaTypeConfig, setMediaTypeConfig] = useState<MediaTypeConfig>(initialMediaTypeConfig);\n  const [newTag, setNewTag] = useState(''); // For handling tag input\n  const [isEditMode, setIsEditMode] = useState(false);\n\n  // State for field editing\n  const [currentField, setCurrentField] = useState<MediaTypeField>(createField('Text'));\n  const [editingFieldIndex, setEditingFieldIndex] = useState<number | null>(null);\n\n  // UI state\n  const [activeStep, setActiveStep] = useState(STEP_NAME);\n  const [isEditing, setIsEditing] = useState(false);\n  const [activeField, setActiveField] = useState<number | null>(null);\n  \n  // Loading states\n  const [isSaving, setIsSaving] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // Track unsaved changes\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  \n  // Confirmation dialog state\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [confirmAction, setConfirmAction] = useState<() => void>(() => {});\n  const [confirmDialogConfig, setConfirmDialogConfig] = useState({\n    title: 'Confirm Action',\n    message: 'Are you sure you want to proceed?'\n  });\n\n  // Effect to initialize media type for editing\n  useEffect(() => {\n    if (open && editMediaTypeId) {\n      setIsLoading(true);\n      const mediaTypeToEdit = mediaTypes.find(type => type._id === editMediaTypeId);\n      if (mediaTypeToEdit) {\n        // Define interface for the field structure from backend\n        interface ApiField {\n          name: string;\n          type: string;\n          options?: string[];\n          required?: boolean;\n        }\n        \n        // Convert field types to ensure compatibility\n        const convertedFields = mediaTypeToEdit.fields?.map((field: ApiField) => ({\n          name: field.name,\n          type: field.type as FieldType,\n          options: field.options || [],\n          required: field.required || false\n        })) || [];\n        \n        // Log settings from media type\n        logSettings('mediaTypeToEdit settings', mediaTypeToEdit.settings);\n        \n        setMediaTypeConfig({\n          _id: mediaTypeToEdit._id,\n          name: mediaTypeToEdit.name,\n          fields: convertedFields,\n          baseType: mediaTypeToEdit.baseType || 'Media',\n          includeBaseFields: mediaTypeToEdit.includeBaseFields !== false,\n          acceptedFileTypes: mediaTypeToEdit.acceptedFileTypes || [],\n          status: mediaTypeToEdit.status || 'active',\n          catColor: mediaTypeToEdit.catColor || '#2196f3',\n          defaultTags: mediaTypeToEdit.defaultTags || [],\n          settings: mediaTypeToEdit.settings || { allowRelatedMedia: false }\n        });\n        setIsEditMode(true);\n      }\n      setIsLoading(false);\n    } else if (open && !editMediaTypeId) {\n      // Reset for creating a new media type\n      setMediaTypeConfig(initialMediaTypeConfig);\n      setIsEditMode(false);\n    }\n    \n    // Reset unsaved changes when dialog opens\n    if (open) {\n      setHasUnsavedChanges(false);\n    }\n  }, [open, editMediaTypeId, mediaTypes]);\n\n  // Add keyboard navigation support\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!open) return;\n      \n      // ESC key - confirm before closing if changes made\n      if (e.key === 'Escape' && hasUnsavedChanges) {\n        e.preventDefault();\n        confirmClose();\n        return;\n      }\n      \n      // Enter on final step submits form\n      if (e.key === 'Enter' && !e.shiftKey && activeStep === STEP_REVIEW && !isSaving) {\n        e.preventDefault();\n        handleSaveMediaType();\n        return;\n      }\n      \n      // Tab + Alt navigation between steps\n      if (e.key === 'ArrowRight' && e.altKey) {\n        e.preventDefault();\n        if (activeStep < STEP_REVIEW) handleNext();\n        return;\n      }\n      \n      if (e.key === 'ArrowLeft' && e.altKey) {\n        e.preventDefault();\n        if (activeStep > STEP_NAME) handleBack();\n        return;\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [open, activeStep, hasUnsavedChanges, isSaving]);\n  \n  // Track changes\n  useEffect(() => {\n    if (open && \n      (mediaTypeConfig.name !== initialMediaTypeConfig.name ||\n       mediaTypeConfig.fields.length > 0 ||\n       mediaTypeConfig.acceptedFileTypes.length > 0 ||\n       (mediaTypeConfig.defaultTags?.length || 0) > 0 ||\n       mediaTypeConfig.catColor !== initialMediaTypeConfig.catColor)\n    ) {\n      setHasUnsavedChanges(true);\n    }\n  }, [open, mediaTypeConfig]);\n\n  const steps = ['Name Media Type', 'Add Fields', 'Review & Submit'];\n\n  // Get used colors from existing media types\n  const usedColors = React.useMemo(() => {\n    // More explicit mapping to ensure we get the catColor property from each media type\n    const colors = mediaTypes\n      .filter(type => mediaTypeConfig._id !== type._id) // Exclude the current media type\n      .map(type => {\n        return type.catColor;\n      })\n      .filter(color => color !== undefined && color !== null) as string[];\n    return colors;\n  }, [mediaTypes, mediaTypeConfig._id, open]);\n\n  const handleNext = () => {\n    // Only validate name and file types in step 1\n    if (activeStep === STEP_NAME) {\n      if (mediaTypeConfig.name.trim() === '' || mediaTypeConfig.acceptedFileTypes.length === 0) {\n        toast.error('Please provide a name and select at least one accepted file type');\n        return;\n      }\n    }\n    \n    // No validation for step 2 - fields are optional\n    \n    setActiveStep((prev) => prev + 1);\n  };\n\n  const handleBack = () => setActiveStep((prev) => prev - 1);\n  \n  // Confirmation for closing dialog with unsaved changes\n  const confirmClose = useCallback(() => {\n    if (hasUnsavedChanges) {\n      setConfirmDialogConfig({\n        title: 'Discard Changes?',\n        message: 'You have unsaved changes. Are you sure you want to close?'\n      });\n      setConfirmAction(() => handleClose);\n      setShowConfirmDialog(true);\n    } else {\n      handleClose();\n    }\n  }, [hasUnsavedChanges]);\n\n  const handleAddField = (field: MediaTypeField, index: number | null) => {\n    if (field.name.trim()) {\n      if (index !== null) {\n        const updatedFields = [...mediaTypeConfig.fields];\n        updatedFields[index] = field;\n        setMediaTypeConfig(prev => ({ ...prev, fields: updatedFields }));\n        setEditingFieldIndex(null);\n      } else {\n        setMediaTypeConfig(prev => ({ ...prev, fields: [...prev.fields, field] }));\n      }\n      \n      resetFieldForm();\n    } else {\n      toast.error('Field name is required');\n    }\n  };\n\n  const handleEditField = (index: number) => {\n    const field = mediaTypeConfig.fields[index];\n    setCurrentField(field);\n    setIsEditing(true);\n    setEditingFieldIndex(index);\n  };\n\n  const handleRemoveField = (index: number) => {\n    const updatedFields = mediaTypeConfig.fields.filter((_, i) => i !== index);\n    setMediaTypeConfig(prev => ({ ...prev, fields: updatedFields }));\n    if (editingFieldIndex === index) {\n      resetFieldForm();\n    }\n  };\n\n  const handleFieldUpdate = (field: MediaTypeField) => {\n    setCurrentField(field);\n    setIsEditing(true);\n  };\n\n  const handleSaveMediaType = async () => {\n    if (isSaving) return; // Prevent multiple submissions\n    \n    try {\n      if (!mediaTypeConfig.name || !mediaTypeConfig.acceptedFileTypes?.length) {\n        toast.error('Please fill in all required fields');\n        return;\n      }\n\n      setIsSaving(true);\n\n      // Make sure we have a color - use default if not specified\n      const catColor = mediaTypeConfig.catColor || '#2196f3';\n      const colorName = predefinedColors.find(c => c.hex === catColor)?.name || 'Default Blue';\n      \n      // Log settings before saving\n      logSettings('Before creating API data, settings', mediaTypeConfig.settings);\n      \n      // Create API data from the media type config\n      const apiData = transformConfigToApiData(mediaTypeConfig);\n      \n      // Log API data\n      console.log('API data being sent:', JSON.stringify(apiData, null, 2));\n      \n      if (isEditMode && mediaTypeConfig._id) {\n        try {\n          // Use TanStack Query mutation to update media type\n          await updateMediaTypeMutation({ \n            id: mediaTypeConfig._id as string, \n            updates: apiData \n          });\n          \n          // Also make a specific request to update the settings field\n          if (mediaTypeConfig.settings) {\n            try {\n              await axios.post(\n                `${env.BASE_URL}/api/media-types/update-settings/${mediaTypeConfig._id}`,\n                { allowRelatedMedia: mediaTypeConfig.settings.allowRelatedMedia }\n              );\n              console.log('Successfully updated settings separately');\n            } catch (settingsError) {\n              console.error('Error updating settings separately:', settingsError);\n            }\n          }\n          \n          // Success message is already handled by the mutation hook\n          console.log(`Media Type '${mediaTypeConfig.name}' updated successfully`);\n          \n          // Invalidate queries to ensure data is refreshed\n          queryClient.invalidateQueries({ queryKey: ['mediaTypes'] });\n        } catch (error: any) {\n          // Error is already handled by the mutation hook\n          console.error('Error updating media type:', error);\n          throw error;\n        }\n      } else {\n        try {\n          // Use TanStack Query mutation to create new media type\n          const createdMediaType = await createMediaTypeMutation(apiData);\n          \n          // Also make a specific request to update the settings field\n          if (mediaTypeConfig.settings && createdMediaType._id) {\n            try {\n              await axios.post(\n                `${env.BASE_URL}/api/media-types/update-settings/${createdMediaType._id}`,\n                { allowRelatedMedia: mediaTypeConfig.settings.allowRelatedMedia }\n              );\n              console.log('Successfully added settings separately for new media type');\n            } catch (settingsError) {\n              console.error('Error adding settings separately for new media type:', settingsError);\n            }\n          }\n          \n          // Success message is already handled by the mutation hook\n          console.log(`Media Type '${mediaTypeConfig.name}' added successfully with color: ${colorName}`);\n          \n          // Invalidate queries to ensure data is refreshed\n          queryClient.invalidateQueries({ queryKey: ['mediaTypes'] });\n        } catch (error: any) {\n          // Error is already handled by the mutation hook\n          console.error('Error creating media type:', error);\n          throw error;\n        }\n      }\n      \n      setHasUnsavedChanges(false);\n      onClose();\n    } catch (error) {\n      console.error('Failed to save media type', error);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const resetFieldForm = () => {\n    setCurrentField(createField('Text'));\n    setIsEditing(false);\n    setEditingFieldIndex(null);\n  };\n\n  const handleClose = () => {\n    resetFieldForm();\n    setMediaTypeConfig(initialMediaTypeConfig);\n    setActiveStep(STEP_NAME);\n    setActiveField(null);\n    setIsEditMode(false);\n    setHasUnsavedChanges(false);\n    onClose();\n  };\n\n  const handleDeleteTag = (tagToDelete: string) => {\n    // Only superAdmins can delete tags\n    if (!isSuperAdmin) return;\n    \n    const normalizedTagToDelete = normalizeTag(tagToDelete);\n    setMediaTypeConfig(prev => ({\n      ...prev,\n      defaultTags: prev.defaultTags?.filter(tag => normalizeTag(tag) !== normalizedTagToDelete) || []\n    }));\n  };\n  \n  // Function to add a new tag and handle validation\n  const addNewTag = (tag: string) => {\n    if (!isSuperAdmin) return;\n    \n    const normalizedTag = normalizeTag(tag);\n    if (normalizedTag && !mediaTypeConfig.defaultTags?.map(t => normalizeTag(t)).includes(normalizedTag)) {\n      setMediaTypeConfig(prev => ({\n        ...prev,\n        defaultTags: [...(prev.defaultTags || []), normalizedTag]\n      }));\n      setNewTag('');\n    } else if (normalizedTag) {\n      // Tag already exists, just clear the input\n      setNewTag('');\n    }\n  };\n\n  const handleAddTag = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      addNewTag(newTag);\n      event.preventDefault(); // Prevent form submission\n    }\n  };\n  \n  // Create debounced version of name field change handler\n  const debouncedNameChange = useCallback(\n    debounce((value: string) => {\n      setMediaTypeConfig(prev => ({ ...prev, name: value }));\n    }, 300),\n    []\n  );\n\n  // Update dialog title to reflect create/edit mode\n  const dialogTitle = isEditMode ? 'Edit Media Type' : 'Create New Media Type';\n\n  const renderFirstStep = () => (\n    <div className=\"step-container\">\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n        <Typography variant=\"h6\">Select Media Type Name</Typography>\n        <Tooltip title=\"Choose a descriptive name that identifies the purpose of this media type\">\n          <IconButton size=\"small\" sx={{ ml: 1 }}>\n            <FaQuestionCircle size={14} />\n          </IconButton>\n        </Tooltip>\n      </Box>\n      \n      <TextField\n        label=\"Media Type Name\"\n        defaultValue={mediaTypeConfig.name}\n        onChange={(e) => {\n          // Use local state immediately for responsive UI\n          debouncedNameChange(e.target.value);\n        }}\n        fullWidth\n        className=\"input-field text-input\"\n        autoFocus\n        helperText=\"Name should be unique and descriptive\"\n        error={mediaTypeConfig.name.trim() === '' && hasUnsavedChanges}\n      />\n      \n      <Box sx={{ mt: 3, mb: 2 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n          <Typography variant=\"h6\">Default Tags</Typography>\n          <Tooltip title=\"These tags will automatically be applied to all media uploaded with this type\">\n            <IconButton size=\"small\" sx={{ ml: 1 }}>\n              <FaQuestionCircle size={14} />\n            </IconButton>\n          </Tooltip>\n        </Box>\n        \n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\n          These tags will be automatically applied to all media files created with this type\n          {!isSuperAdmin && (\n            <Typography variant=\"caption\" color=\"error\" sx={{ display: 'block', mt: 1 }}>\n              * Only Super Admins can add or modify default tags\n            </Typography>\n          )}\n        </Typography>\n        \n        {isSuperAdmin && (\n          <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-start', width: '100%' }}>\n            <TextField\n              label=\"Add Default Tags\"\n              value={newTag}\n              onChange={(e) => setNewTag(e.target.value)}\n              onKeyPress={handleAddTag}\n              onBlur={() => addNewTag(newTag)}\n              fullWidth\n              size=\"small\"\n              helperText=\"Press Enter to add a tag or click Add\"\n              className=\"input-field text-input\"\n            />\n            <Button \n              variant=\"outlined\"\n              onClick={() => addNewTag(newTag)}\n              sx={{ mt: 0.5 }}\n              disabled={!newTag.trim()}\n            >\n              Add\n            </Button>\n          </Box>\n        )}\n        \n        {mediaTypeConfig.defaultTags && mediaTypeConfig.defaultTags.length > 0 && (\n          <Box sx={{ mt: 1, display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n            {mediaTypeConfig.defaultTags.map((tag, index) => (\n              <Chip\n                key={index}\n                label={tag}\n                onDelete={isSuperAdmin ? () => handleDeleteTag(tag) : undefined}\n                size=\"small\"\n                color=\"primary\"\n                variant=\"outlined\"\n              />\n            ))}\n          </Box>\n        )}\n      </Box>\n      \n      <Box>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n          <Typography variant=\"h6\">Select Color for Media Type</Typography>\n          <Tooltip title=\"This color will help users identify this media type visually in the interface\">\n            <IconButton size=\"small\" sx={{ ml: 1 }}>\n              <FaQuestionCircle size={14} />\n            </IconButton>\n          </Tooltip>\n        </Box>\n        \n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\n          This color will help identify this media type throughout the app\n        </Typography>\n        <ColorPicker \n          value={mediaTypeConfig.catColor || '#2196f3'}\n          onChange={(color) => {\n            setMediaTypeConfig(prev => ({ ...prev, catColor: color }));\n          }}\n          usedColors={usedColors}\n        />\n      </Box>\n      \n      <Box sx={{ mt: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n          <Typography variant=\"h6\">Select Accepted File Types</Typography>\n          <Tooltip title=\"Choose which file types this media type will accept for upload\">\n            <IconButton size=\"small\" sx={{ ml: 1 }}>\n              <FaQuestionCircle size={14} />\n            </IconButton>\n          </Tooltip>\n        </Box>\n        \n        <FileTypeSelector \n          fileTypeCategories={fileTypeCategories}\n          acceptedFileTypes={mediaTypeConfig.acceptedFileTypes}\n          onChange={(newTypes) => setMediaTypeConfig(prev => ({ ...prev, acceptedFileTypes: newTypes }))}\n        />\n        \n        {mediaTypeConfig.acceptedFileTypes.length === 0 && hasUnsavedChanges && (\n          <Typography variant=\"caption\" color=\"error\" sx={{ mt: 1, display: 'block' }}>\n            *At least one file type must be selected\n          </Typography>\n        )}\n      </Box>\n\n      <Box sx={{ mt: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n          <Typography variant=\"h6\">Related Media Settings</Typography>\n          <Tooltip title=\"Allow users to associate related media files with this media type\">\n            <IconButton size=\"small\" sx={{ ml: 1 }}>\n              <FaQuestionCircle size={14} />\n            </IconButton>\n          </Tooltip>\n        </Box>\n        \n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          <input \n            type=\"checkbox\" \n            id=\"allowRelatedMedia\"\n            checked={mediaTypeConfig.settings?.allowRelatedMedia || false}\n            onChange={(e) => {\n              const newSettings = {\n                ...mediaTypeConfig.settings,\n                allowRelatedMedia: e.target.checked\n              };\n              logSettings('Checkbox changed, new settings', newSettings);\n              setMediaTypeConfig(prev => ({\n                ...prev,\n                settings: newSettings\n              }));\n            }}\n            style={{ marginRight: '8px' }}\n          />\n          <label htmlFor=\"allowRelatedMedia\">\n            <Typography variant=\"body1\">\n              Allow related media to be attached to this media type\n            </Typography>\n          </label>\n        </Box>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 1, ml: 4 }}>\n          This will add a section to the metadata form where users can choose related media files\n        </Typography>\n      </Box>\n    </div>\n  );\n\n  return (\n    <>\n      <Dialog \n        id='dialog-container' \n        open={open} \n        onClose={confirmClose}\n        aria-labelledby=\"media-type-dialog-title\"\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle id=\"media-type-dialog-title\" sx={{ m: 0, p: 2 }}>\n          {dialogTitle}\n          <IconButton\n            aria-label=\"close\"\n            onClick={confirmClose}\n            sx={{\n              position: 'absolute',\n              right: 8,\n              top: 8,\n              color: 'grey.500'\n            }}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        \n        {isLoading ? (\n          <DialogContent sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 400 }}>\n            <CircularProgress />\n          </DialogContent>\n        ) : open && (\n          <>\n            <DialogContent className='dialog-inner' style={{width: '100%', height: '600px'}}>\n              <Stepper activeStep={activeStep} alternativeLabel sx={{marginBottom: '3rem'}}>\n                {steps.map((label, index) => (\n                  <Step key={label}>\n                    <StepLabel\n                      StepIconProps={{\n                        sx: { cursor: 'pointer' }\n                      }}\n                      onClick={() => {\n                        // Allow clicking on completed steps to navigate back\n                        if (index < activeStep) {\n                          setActiveStep(index);\n                        }\n                      }}\n                    >\n                      {label}\n                    </StepLabel>\n                  </Step>\n                ))}\n              </Stepper>\n              <div className='new-media-type-form-container'>\n                {activeStep === STEP_NAME && renderFirstStep()}\n                {activeStep === STEP_FIELDS && (\n                  <div className=\"step-container step1\">\n                    <div className='field-creation-container'>\n                      <Typography className=\"section-title\">Create Media Type Fields</Typography>\n                      \n                      {mediaTypeConfig.fields.length > 0 && (\n                        <div className=\"field-list\">\n                          <div className=\"field-list-title\">\n                            <span>Existing Fields</span>\n                            <span className=\"count-badge\">{mediaTypeConfig.fields.length}</span>\n                          </div>\n                          \n                          {mediaTypeConfig.fields.map((field, index) => (\n                            <FieldEditor \n                              key={index}\n                              field={field}\n                              index={index}\n                              isEditing={editingFieldIndex === index}\n                              activeField={activeField}\n                              inputOptions={inputOptions}\n                              onSave={handleAddField}\n                              onCancel={resetFieldForm}\n                              onFieldUpdate={handleFieldUpdate}\n                              onFieldSelect={(index) => setActiveField(index)}\n                              onEdit={handleEditField}\n                              onRemove={handleRemoveField}\n                            />\n                          ))}\n                        </div>\n                      )}\n                      \n                      {editingFieldIndex === null && (\n                        <div className={`new-input-field-container ${currentField.type === 'Select' || currentField.type === 'MultiSelect' ? 'select-input' : ''} ${isEditing ? 'active' : ''}`}>\n                          <FieldEditor \n                            field={currentField}\n                            index={null}\n                            isEditing={true}\n                            activeField={null}\n                            inputOptions={inputOptions}\n                            onSave={handleAddField}\n                            onCancel={resetFieldForm}\n                            onFieldUpdate={handleFieldUpdate}\n                            onFieldSelect={() => {}}\n                            onEdit={() => {}}\n                            onRemove={() => {}}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  \n                    <div className='field-preview-container'>\n                      <div className=\"preview-header\">\n                        <h6>Field Preview</h6>\n                        <span className=\"field-count\">{mediaTypeConfig.fields.length} fields</span>\n                      </div>\n                      \n                      <FieldPreview \n                        fields={mediaTypeConfig.fields}\n                        onFieldSelect={(index) => setActiveField(index)}\n                      />\n                    </div>\n                  </div>\n                )}\n                {activeStep === STEP_REVIEW && (\n                  <ReviewStep \n                    mediaTypeConfig={mediaTypeConfig}\n                    inputOptions={inputOptions}\n                    isSuperAdmin={isSuperAdmin}\n                  />\n                )}\n              </div>\n            </DialogContent>\n            <DialogActions sx={{ \n              justifyContent: 'space-between', \n              px: 4, \n              py: 2,\n              position: 'relative',\n              borderTop: '1px solid rgba(0, 0, 0, 0.12)'\n            }}>\n              <Button \n                onClick={handleBack} \n                disabled={activeStep === STEP_NAME || isSaving}\n                startIcon={<FaArrowLeft />}\n                variant=\"outlined\"\n                size=\"large\"\n              >\n                Back\n              </Button>\n              \n              <Button \n                onClick={confirmClose}\n                variant=\"text\" \n                sx={{ position: 'absolute', left: '50%', transform: 'translateX(-50%)' }}\n                disabled={isSaving}\n              >\n                Cancel\n              </Button>\n              \n              {activeStep === STEP_REVIEW ? (\n                <Button \n                  onClick={handleSaveMediaType} \n                  color=\"primary\" \n                  variant=\"contained\" \n                  startIcon={isSaving ? <CircularProgress size={16} color=\"inherit\" /> : <FaSave />}\n                  size=\"large\"\n                  disabled={isSaving}\n                >\n                  {isEditMode ? 'Update' : 'Create'}\n                </Button>\n              ) : (\n                <Button \n                  onClick={handleNext} \n                  color=\"primary\"\n                  variant=\"contained\"\n                  endIcon={<FaArrowRight />}\n                  disabled={\n                    (activeStep === STEP_NAME && (mediaTypeConfig.name.trim() === '' || mediaTypeConfig.acceptedFileTypes.length === 0)) || \n                    isSaving\n                  }\n                  size=\"large\"\n                >\n                  Next\n                </Button>\n              )}\n            </DialogActions>\n          </>\n        )}\n      </Dialog>\n      \n      {/* Backdrop for saving state */}\n      <Backdrop\n        sx={{ \n          color: '#fff', \n          zIndex: (theme) => theme.zIndex.drawer + 1,\n          position: 'absolute'\n        }}\n        open={isSaving}\n      >\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 2 }}>\n          <CircularProgress color=\"inherit\" />\n          <Typography variant=\"h6\">\n            {isEditMode ? 'Updating' : 'Creating'} Media Type...\n          </Typography>\n        </Box>\n      </Backdrop>\n      \n      {/* Confirmation Dialog */}\n      <ConfirmationDialog\n        open={showConfirmDialog}\n        onClose={() => setShowConfirmDialog(false)}\n        onConfirm={() => {\n          confirmAction();\n          setShowConfirmDialog(false);\n        }}\n        title={confirmDialogConfig.title}\n        message={confirmDialogConfig.message}\n      />\n    </>\n  );\n};\n\n// Export the memoized component to prevent unnecessary re-renders\nexport default React.memo(MediaTypeUploader); ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaTypeUploader/components/ColorPicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaTypeUploader/components/FieldEditor.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'field', 'onFieldUpdate', and 'tagCategories'. Either include them or remove the dependency array. If 'onFieldUpdate' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":51,"suggestions":[{"desc":"Update the dependencies array to be: [field, onFieldUpdate, tagCategories]","fix":{"range":[2100,2145],"text":"[field, onFieldUpdate, tagCategories]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":78,"column":7,"nodeType":"LogicalExpression","endLine":78,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  TextField, \n  Select, \n  MenuItem, \n  FormControlLabel, \n  Checkbox, \n  IconButton,\n  FormControl,\n  InputLabel,\n  Switch,\n  Typography,\n  Box,\n  Chip,\n  Divider,\n  Alert,\n  SelectChangeEvent,\n  CircularProgress\n} from '@mui/material';\nimport { FaPlus, FaCheck, FaTimes, FaStar, FaTags, FaEdit } from 'react-icons/fa';\nimport { \n  MediaTypeField, \n  FieldType, \n  SelectField \n} from '../../../types/mediaTypes';\nimport { \n  isSelectField, \n  createField, \n  updateFieldOptions \n} from '../../../utils/mediaTypeUploaderUtils';\nimport { useTagCategories, useUserProfile } from '../../../hooks/query-hooks';\n\ninterface FieldEditorProps {\n  field: MediaTypeField;\n  index: number | null;\n  isEditing: boolean;\n  activeField: number | null;\n  inputOptions: string[];\n  onSave: (field: MediaTypeField, index: number | null) => void;\n  onCancel: () => void;\n  onFieldUpdate: (field: MediaTypeField) => void;\n  onFieldSelect: (index: number) => void;\n  onEdit: (index: number) => void;\n  onRemove: (index: number) => void;\n}\n\nconst FieldEditor: React.FC<FieldEditorProps> = ({\n  field,\n  index,\n  isEditing,\n  activeField,\n  inputOptions,\n  onSave,\n  onCancel,\n  onFieldUpdate,\n  onFieldSelect,\n  onEdit,\n  onRemove\n}) => {\n  const [optionInput, setOptionInput] = useState('');\n  const { data: userProfile } = useUserProfile();\n  const { \n    data: tagCategories = [], \n    isLoading: isLoadingTagCategories, \n    error: tagCategoriesError \n  } = useTagCategories(userProfile);\n\n  // Effect to update options when tag category changes\n  useEffect(() => {\n    if (isSelectField(field) && field.useTagCategory && field.tagCategoryId) {\n      const selectedCategory = tagCategories.find(cat => cat._id === field.tagCategoryId);\n      if (selectedCategory && selectedCategory.tags) {\n        // Update field options with tags from the selected category\n        const tagOptions = selectedCategory.tags.map(tag => tag.name);\n        onFieldUpdate(updateFieldOptions(field as SelectField, tagOptions, true, field.tagCategoryId));\n      }\n    }\n  }, [isSelectField(field) && field.tagCategoryId]);\n\n  // For handling select field options\n  const handleAddOption = () => {\n    if (!optionInput.trim() || !isSelectField(field)) return;\n    \n    const newOptions = [...field.options, optionInput.trim()];\n    onFieldUpdate(updateFieldOptions(field as SelectField, newOptions, field.useTagCategory, field.tagCategoryId));\n    setOptionInput('');\n  };\n\n  const handleRemoveOption = (optIndex: number) => {\n    if (!isSelectField(field)) return;\n    \n    const newOptions = field.options.filter((_, i) => i !== optIndex);\n    onFieldUpdate(updateFieldOptions(field as SelectField, newOptions, field.useTagCategory, field.tagCategoryId));\n  };\n\n  const handleUseTagCategoryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!isSelectField(field)) return;\n    \n    const useTagCategory = event.target.checked;\n    if (useTagCategory) {\n      onFieldUpdate(updateFieldOptions(field as SelectField, [], useTagCategory, ''));\n    } else {\n      // Clear the tag category reference and options when disabling\n      onFieldUpdate(updateFieldOptions(field as SelectField, [], useTagCategory, ''));\n    }\n  };\n\n  const handleTagCategoryChange = (event: SelectChangeEvent<string>) => {\n    if (!isSelectField(field)) return;\n    \n    const tagCategoryId = event.target.value;\n    const selectedCategory = tagCategories.find(cat => cat._id === tagCategoryId);\n    \n    if (selectedCategory && selectedCategory.tags) {\n      // Update field options with tags from the selected category\n      const tagOptions = selectedCategory.tags.map(tag => tag.name);\n      onFieldUpdate(updateFieldOptions(field as SelectField, tagOptions, true, tagCategoryId));\n    } else {\n      onFieldUpdate(updateFieldOptions(field as SelectField, [], true, tagCategoryId));\n    }\n  };\n\n  // Render edit mode\n  if (isEditing) {\n    return (\n      <div \n        key={index} \n        className={`new-input-field-container ${activeField === index ? 'active' : ''}`}\n      >\n        <div className=\"input-row\">\n          <div className=\"field-group\">\n            <Select\n              value={field.type}\n              onChange={(e) => {\n                const newType = e.target.value as FieldType;\n                const newField = createField(newType, field.name, field.required);\n                onFieldUpdate(newField);\n              }}\n              fullWidth\n              displayEmpty\n              className=\"input-field select-input\"\n            >\n              {inputOptions.map((option) => (\n                <MenuItem key={option} value={option}>\n                  {option}\n                </MenuItem>\n              ))}\n            </Select>\n          \n            <TextField\n              label=\"Field Name\"\n              value={field.name}\n              onChange={(e) => {\n                onFieldUpdate({ ...field, name: e.target.value });\n              }}\n              fullWidth\n              className=\"input-field text-input\"\n            />\n          </div>\n          \n          <FormControlLabel\n            label='Required'\n            className='required-checkbox'\n            control={\n              <Checkbox \n                checked={field.required}\n                onChange={(e) => {\n                  onFieldUpdate({ ...field, required: e.target.checked });\n                }}\n              />\n            }\n          />\n          \n          <div className=\"button-wrapper\">\n            \n            <IconButton \n              onClick={onCancel}\n              color=\"error\"\n              size=\"small\"\n              className=\"remove-button\"\n              title=\"Cancel editing\"\n            >\n              <FaTimes />\n            </IconButton>\n            <IconButton \n              onClick={() => onSave(field, index)}\n              color=\"primary\"\n              size=\"small\"\n              className=\"add-button\"\n              title=\"Save changes\"\n            >\n              <FaCheck />\n            </IconButton>\n          </div>\n        </div>\n        \n        {isSelectField(field) && (\n          <div className=\"options-container\">\n            <div className=\"options-header\">\n              <span className=\"title\">Define Options</span>\n            </div>\n            \n            {/* Tag Category Selector */}\n            <Box sx={{ mb: 2, mt: 1 }}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={field.useTagCategory || false}\n                    onChange={handleUseTagCategoryChange}\n                    color=\"primary\"\n                    disabled={isLoadingTagCategories || !!tagCategoriesError}\n                  />\n                }\n                label={\n                  <Typography variant=\"body2\" sx={{ display: 'flex', alignItems: 'center' }}>\n                    <FaTags style={{ marginRight: '8px' }} />\n                    Use Predefined List\n                  </Typography>\n                }\n              />\n              \n              {field.useTagCategory && (\n                <Box sx={{ mt: 1 }}>\n                  {isLoadingTagCategories ? (\n                    <CircularProgress size={20} />\n                  ) : tagCategoriesError ? (\n                    <Alert severity=\"error\" sx={{ mt: 1 }}>\n                      Error loading predefined lists: {tagCategoriesError.message}\n                    </Alert>\n                  ) : tagCategories.length > 0 ? (\n                    <FormControl fullWidth size=\"small\">\n                      <InputLabel>Select Predefined Lists</InputLabel>\n                      <Select\n                        value={field.tagCategoryId || ''}\n                        onChange={handleTagCategoryChange}\n                        label=\"Select Tag Category\"\n                      >\n                        {tagCategories.map(category => (\n                          <MenuItem key={category._id} value={category._id}>\n                            {category.name} ({category.tags?.length || 0} tags)\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  ) : (\n                    <Alert severity=\"info\" sx={{ mt: 1 }}>\n                      No predefined lists available. Please create predefined lists first.\n                    </Alert>\n                  )}\n                  \n                  {field.tagCategoryId && field.options.length > 0 && (\n                    <Box sx={{ mt: 2 }}>\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\n                        Options from Predefined List:\n                      </Typography>\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 1 }}>\n                        {field.options.map((option, i) => (\n                          <Chip key={i} label={option} size=\"small\" />\n                        ))}\n                      </Box>\n                    </Box>\n                  )}\n                </Box>\n              )}\n            </Box>\n            \n            <Divider sx={{ my: 2 }} />\n            \n            {!field.useTagCategory && (\n              <>\n                <div className=\"add-option-container\">\n                  <TextField\n                    label=\"Option Value\"\n                    value={optionInput}\n                    onChange={(e) => setOptionInput(e.target.value)}\n                    fullWidth\n                    className=\"input-field text-input\"\n                  />\n                  <IconButton \n                    onClick={handleAddOption} \n                    color=\"primary\" \n                    disabled={!optionInput.trim()}\n                  >\n                    <FaPlus />\n                  </IconButton>\n                </div>\n                \n                {field.options.length > 0 && (\n                  <div className=\"option-chips\">\n                    {field.options.map((option, optIndex) => (\n                      <div key={optIndex} className=\"option-chip\">\n                        {option}\n                        <span \n                          className=\"remove-icon\" \n                          onClick={() => handleRemoveOption(optIndex)}\n                        >\n                          <FaTimes size={10} />\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n  \n  // Render display mode\n  return (\n    <div \n      key={index}\n      className={`compact-field-item ${activeField === index ? 'active' : ''}`}\n      onClick={() => index !== null && onFieldSelect(index)}\n    >\n      <div className=\"field-info\">\n        <span className=\"field-type-badge\">{field.type}</span>\n        <span className=\"field-name\">{field.name}</span>\n        {field.required && (\n          <span className=\"field-required\">\n            <FaStar size={8} /> Required\n          </span>\n        )}\n        {isSelectField(field) && field.useTagCategory && field.tagCategoryId && (\n          <span className=\"field-tag-category\">\n            <FaTags size={8} /> Using Predefined List\n          </span>\n        )}\n      </div>\n      <div className=\"select-field-options\">\n        {isSelectField(field) && (\n          <span className=\"field-options\">\n            {field.useTagCategory && field.tagCategoryId ? (\n              <>From Predefined List: {tagCategories.find(cat => cat._id === field.tagCategoryId)?.name || 'Unknown'}</>\n            ) : (\n              <>Options: {field.options.join(', ')}</>\n            )}\n          </span>\n        )}\n      </div>\n      \n      <div className=\"field-actions\">\n        <div \n          className=\"edit-button\" \n          onClick={(e) => {\n            e.stopPropagation();\n            if (index !== null) onEdit(index);\n          }}\n          title=\"Edit field\"\n        >\n          <FaEdit />\n        </div>\n        <div \n          className=\"remove-button\"\n          onClick={(e) => {\n            e.stopPropagation();\n            if (index !== null) onRemove(index);\n          }}\n          title=\"Remove field\"\n        >\n          <FaTimes />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FieldEditor; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaTypeUploader/components/FieldPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaTypeUploader/components/FileTypeSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaTypeUploader/components/MediaTypeCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[257,260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[257,260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2891,2894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2891,2894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2947,2950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2947,2950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3486,3489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3486,3489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Box,\n  Chip,\n  Button,\n  Divider\n} from '@mui/material';\nimport { FaEye, FaEdit, FaTrash, FaTags } from 'react-icons/fa';\n\ninterface MediaTypeCardProps {\n  mediaType: any; // Using any to avoid complex typing issues\n  onDelete: (id: string) => void;\n  onEdit?: (id: string) => void;\n  onView?: (id: string) => void;\n}\n\nconst MediaTypeCard: React.FC<MediaTypeCardProps> = ({ \n  mediaType, \n  onDelete,\n  onEdit,\n  onView\n}) => {\n  return (\n    <Card \n      className={`media-type-card ${mediaType.status && mediaType.status !== 'active' ? 'media-type-card--' + mediaType.status : ''}`}\n      sx={{\n        backgroundColor: 'var(--secondary-color)',\n        borderRadius: '8px',\n        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.15)',\n        overflow: 'visible'\n      }}\n    >\n      {mediaType.catColor && (\n        <span className=\"media-type-color\" style={{ \n          backgroundColor: mediaType.catColor, \n          boxShadow: `0 0 5px 0 ${mediaType.catColor}`,\n          top: '12px'\n        }}></span>\n      )}\n      \n      {mediaType.status && mediaType.status !== 'active' && (\n        <div className=\"media-type-status\">\n          <Chip \n            label={(mediaType.status || 'active').toUpperCase()} \n            color={mediaType.status === 'deprecated' ? 'warning' : 'error'}\n            size=\"small\"\n          />\n        </div>\n      )}\n      \n      <CardContent sx={{ p: 2, pb: 1 }}>\n        <Typography \n          variant=\"h6\" \n          className=\"media-type-title\"\n          sx={{ \n            fontSize: '1.1rem', \n            mb: 1.5, \n            fontWeight: 500,\n            textAlign: 'center'\n          }}\n        >\n          {mediaType.name}\n        </Typography>\n\n        <Box \n          className=\"field-count-chip\" \n          sx={{ \n            display: 'flex', \n            justifyContent: 'center', \n            gap: 1, \n            mb: 1.5 \n          }}\n        >\n          <Chip\n            label={`${mediaType.fields.length} field${\n              mediaType.fields.length !== 1 ? \"s\" : \"\"\n            }`}\n            color=\"primary\"\n            size=\"small\"\n            sx={{ fontWeight: 400, fontSize: '0.75rem' }}\n          />\n          <Chip\n            label={`${mediaType.usageCount} media file${\n              mediaType.usageCount !== 1 ? \"s\" : \"\"\n            }`}\n            color={mediaType.usageCount > 0 ? \"secondary\" : \"default\"}\n            variant={mediaType.usageCount > 0 ? \"filled\" : \"outlined\"}\n            size=\"small\"\n            sx={{ fontWeight: 400, fontSize: '0.75rem' }}\n          />\n        </Box>\n\n        <Box \n          className=\"field-type-chips\" \n          sx={{ \n            display: 'flex',\n            justifyContent: 'center',\n            mb: 1.5\n          }}\n        >\n          {Array.from(\n            new Set(mediaType.fields.map((field: any) => field.type))\n          ).slice(0, 3).map((type: any, idx: number) => (\n            <Chip\n              key={idx}\n              label={type}\n              variant=\"outlined\"\n              size=\"small\"\n              sx={{ mr: 0.5, fontSize: '0.7rem' }}\n            />\n          ))}\n        </Box>\n\n        <Box \n          className=\"fields-preview\" \n          sx={{ \n            backgroundColor: 'rgba(0,0,0,0.2)',\n            p: 1.5,\n            borderRadius: '6px',\n            mb: 1.5\n          }}\n        >\n          {mediaType.fields\n            .slice(0, 3)\n            .map((field: any, fieldIndex: number) => (\n              <Box \n                key={fieldIndex} \n                sx={{ \n                  mb: fieldIndex !== 2 ? 1 : 0,\n                  display: 'flex',\n                  justifyContent: 'space-between'\n                }}\n              >\n                <Typography\n                  variant=\"body2\"\n                  component=\"span\"\n                  className=\"field-name\"\n                  sx={{ \n                    fontSize: '0.8rem',\n                    fontWeight: 500,\n                    color: field.required ? 'var(--accent-color)' : 'inherit'\n                  }}\n                >\n                  {field.name}{\" \"}\n                  {field.required && (\n                    <span className=\"required-badge\">*</span>\n                  )}\n                </Typography>\n                <Typography \n                  variant=\"caption\" \n                  component=\"span\"\n                  className=\"field-type\" \n                  sx={{ \n                    fontSize: '0.75rem',\n                    opacity: 0.7,\n                    fontWeight: 'normal',\n                    fontStyle: 'italic'\n                  }}\n                >\n                  ({field.type})\n                </Typography>\n              </Box>\n            ))}\n        </Box>\n\n        {/* Default Tags Section */}\n        {mediaType.defaultTags && mediaType.defaultTags.length > 0 && (\n          <Box className=\"default-tags-section\">\n            <Box \n              sx={{ \n                display: 'flex', \n                alignItems: 'center', \n                mb: 0.5,\n                justifyContent: 'center'\n              }}\n            >\n              <FaTags size={13} style={{ color: 'var(--accent-color)' }} />\n              <Typography \n                variant=\"body2\" \n                color=\"primary\" \n                sx={{ ml: 0.5, fontSize: '0.8rem' }}\n              >\n                Default Tags\n              </Typography>\n            </Box>\n            <Box \n              sx={{ \n                display: 'flex', \n                flexWrap: 'wrap', \n                gap: 0.5, \n                justifyContent: 'center' \n              }}\n            >\n              {mediaType.defaultTags.slice(0, 3).map((tag: string, index: number) => (\n                <Chip\n                  key={index}\n                  label={tag}\n                  size=\"small\"\n                  color=\"primary\"\n                  variant=\"outlined\"\n                  sx={{ \n                    fontSize: '0.7rem',\n                    height: '20px'\n                  }}\n                />\n              ))}\n              {mediaType.defaultTags.length > 3 && (\n                <Chip\n                  label={`+${mediaType.defaultTags.length - 3}`}\n                  size=\"small\"\n                  variant=\"outlined\"\n                  sx={{ \n                    fontSize: '0.7rem',\n                    height: '20px'\n                  }}\n                />\n              )}\n            </Box>\n          </Box>\n        )}\n      </CardContent>\n      \n      <CardActions \n        className=\"card-actions\"\n        sx={{ \n          p: 0, \n          mt: 0.5, \n          display: 'flex',\n          justifyContent: 'space-between',\n          backgroundColor: 'rgba(0,0,0,0.15)',\n          borderTop: '1px solid rgba(255,255,255,0.05)'\n        }}\n      >\n        <Button \n          size=\"small\" \n          startIcon={<FaEye style={{ fontSize: '0.8rem' }} />}\n          onClick={() => onView && onView(mediaType._id)}\n          sx={{ \n            fontSize: '0.75rem', \n            py: 0.75,\n            flex: 1,\n            borderRadius: 0\n          }}\n        >\n          View\n        </Button>\n        <Divider orientation=\"vertical\" flexItem sx={{ m: 0 }} />\n        <Button \n          size=\"small\" \n          startIcon={<FaEdit style={{ fontSize: '0.8rem' }} />}\n          disabled={mediaType.status === 'archived'}\n          onClick={() => onEdit && onEdit(mediaType._id)}\n          sx={{ \n            fontSize: '0.75rem', \n            py: 0.75,\n            flex: 1,\n            borderRadius: 0\n          }}\n        >\n          Edit\n        </Button>\n        <Divider orientation=\"vertical\" flexItem sx={{ m: 0 }} />\n        <Button \n          size=\"small\" \n          color=\"error\" \n          startIcon={<FaTrash style={{ fontSize: '0.8rem' }} />}\n          onClick={() => onDelete(mediaType._id)}\n          disabled={mediaType.status === 'archived' && mediaType.usageCount != 0}\n          sx={{ \n            fontSize: '0.75rem', \n            py: 0.75,\n            flex: 1,\n            borderRadius: 0\n          }}\n        >\n          {mediaType.status === 'deprecated' ? 'Archive' : 'Delete'}\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default MediaTypeCard; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaTypeUploader/components/ReviewStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaTypeUploader/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaTypeUploader/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaTypeWarningDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/MediaUploader.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/MediaUploader.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useRef' is defined but never used.","line":1,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Box' is defined but never used.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LinearProgress' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Typography' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectChangeEvent' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stepper' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Step' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StepLabel' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CircularProgress' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CloseIcon' is defined but never used.","line":22,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircleIcon' is defined but never used.","line":23,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useDropzone' is defined but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaFileImage' is defined but never used.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaFileVideo' is defined but never used.","line":25,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaUpload' is defined but never used.","line":25,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaImage' is defined but never used.","line":25,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaVideo' is defined but never used.","line":25,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaFileAudio' is defined but never used.","line":25,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":75},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaFileWord' is defined but never used.","line":25,"column":77,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":87},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BaseMediaFile' is defined but never used.","line":28,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toast' is defined but never used.","line":29,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useTagCategories' is defined but never used.","line":31,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'motion' is defined but never used.","line":34,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AnimatePresence' is defined but never used.","line":34,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useForm' is defined but never used.","line":35,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Controller' is defined but never used.","line":35,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormProvider' is defined but never used.","line":35,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isVideoFile' is defined but never used.","line":36,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isImageFile' is defined but never used.","line":36,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isFileTypeValid' is defined but never used.","line":36,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatFileSize' is defined but never used.","line":36,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'normalizeTag' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'uploadMedia' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'prepareMetadataForUpload' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MediaTypeUploaderProps' is defined but never used.","line":46,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UploadThumbnailSelector' is defined but never used.","line":47,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MetadataForm' is defined but never used.","line":48,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1973,1976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1973,1976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2319,2322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2319,2322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'findInternalMediaType' is assigned a value but never used.","line":93,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onUploadComplete' is defined but never used.","line":125,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dialogMode' is assigned a value but never used.","line":126,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onCloseDialog' is defined but never used.","line":127,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":130,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userProfile' is assigned a value but never used.","line":131,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoadingMediaTypes' is assigned a value but never used.","line":137,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mediaTypes' is assigned a value but never used.","line":143,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'file' is assigned a value but never used.","line":148,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setFile' is assigned a value but never used.","line":148,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedMediaType' is assigned a value but never used.","line":149,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedMediaType' is assigned a value but never used.","line":149,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'metadata' is assigned a value but never used.","line":150,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":150,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fileLoadingProgress' is assigned a value but never used.","line":163,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isPreviewReady' is assigned a value but never used.","line":164,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":164,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleMetadataChange' is assigned a value but never used.","line":167,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":167,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleImagePreviewLoad' is assigned a value but never used.","line":175,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":31}],"suppressedMessages":[],"errorCount":68,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useRef, useMemo } from \"react\";\nimport {\n  Box,\n  Button,\n  LinearProgress,\n  Typography,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  SelectChangeEvent,\n  Stepper,\n  Step,\n  StepLabel,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  IconButton,\n  CircularProgress,\n} from \"@mui/material\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\nimport { useDropzone } from \"react-dropzone\";\nimport { FaFileImage, FaFileVideo, FaUpload, FaImage, FaVideo, FaFileAudio, FaFileWord } from \"react-icons/fa\";\nimport \"./MediaUploader.scss\";\nimport { useNavigate } from \"react-router-dom\";\nimport { BaseMediaFile } from \"../../interfaces/MediaFile\";\nimport { toast } from \"react-toastify\";\n// Import TanStack Query hooks and types\nimport { useMediaTypes, useTagCategories, useUserProfile, MediaType as HookMediaType, MediaFile } from \"../../hooks/query-hooks\";\n// Keep the import for Field and specific MediaType shape from Redux\n// import type { MediaType as ReduxMediaType } from \"../../store/slices/mediaTypeSlice\"; // Removed\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useForm, Controller, FormProvider } from 'react-hook-form';\nimport { isVideoFile, isImageFile, isFileTypeValid, formatFileSize } from \"./utils/fileUtils\";\n\n// Import our utilities\nimport {\n  normalizeTag,\n  uploadMedia,\n  prepareMetadataForUpload,\n} from './utils';\n\n// Import component types and subcomponents\nimport { MediaTypeUploaderProps, MetadataState } from \"./types\";\nimport UploadThumbnailSelector from '../VideoThumbnailSelector/UploadThumbnailSelector';\nimport MetadataForm from \"./components/MetadataForm\";\n\n// Define an internal MediaType interface based on the old ReduxMediaType structure\ninterface InternalMediaType {\n  _id: string;\n  name: string;\n  description?: string; // Make optional if not always present from API or used\n  fields: any[]; // Define more specific field type if possible\n  status: string;\n  usageCount?: number;\n  replacedBy?: string | null;\n  isDeleting?: boolean;\n  acceptedFileTypes: string[];\n  createdAt?: string;\n  updatedAt?: string;\n  baseType: string;\n  includeBaseFields: boolean;\n  catColor: string;\n  defaultTags: string[];\n  settings: Record<string, any>; // Or a more specific settings type\n}\n\n// Helper to adapt MediaType from TanStack Query to the shape expected by the MediaUploader\nconst adaptMediaType = (mediaType: HookMediaType): InternalMediaType => {\n  return {\n    _id: mediaType._id,\n    name: mediaType.name,\n    description: mediaType.description || '',\n    fields: mediaType.fields || [],\n    status: mediaType.status || 'active',\n    usageCount: mediaType.usageCount || 0,\n    replacedBy: mediaType.replacedBy || null,\n    isDeleting: mediaType.isDeleting || false,\n    acceptedFileTypes: mediaType.acceptedFileTypes || [],\n    createdAt: mediaType.createdAt,\n    updatedAt: mediaType.updatedAt,\n    baseType: mediaType.baseType as string, // Ensure baseType is string\n    includeBaseFields: mediaType.includeBaseFields || true,\n    catColor: mediaType.catColor || '#2196f3',\n    defaultTags: mediaType.defaultTags || [],\n    settings: mediaType.settings || {}\n  };\n};\n\n// Adapter for findMediaType to use InternalMediaType\nconst findInternalMediaType = (\n  mediaTypes: InternalMediaType[], // Use InternalMediaType\n  mediaTypeId: string | null\n): InternalMediaType | null => { // Return InternalMediaType\n  if (!mediaTypeId || !mediaTypes.length) return null;\n  \n  // First try to find by ID\n  let matchingType = mediaTypes.find(type => type._id === mediaTypeId);\n  \n  // If not found, try by name (for backward compatibility)\n  if (!matchingType) {\n    matchingType = mediaTypes.find(type => type.name === mediaTypeId);\n  }\n  \n  return matchingType || null;\n};\n\n// =============== TYPES ===============\n// ... InternalMediaType and other type definitions ...\n\n// =============== PROPS ===============\ninterface MediaUploaderProps {\n  // ... props ...\n  onUploadComplete?: (mediaFile: MediaFile) => void;\n  dialogMode?: boolean;\n  onCloseDialog?: () => void;\n  initialSelectedMediaType?: string | null;\n}\n\n// =============== COMPONENT ===============\nconst MediaUploader: React.FC<MediaUploaderProps> = ({\n  // ... props ...\n  onUploadComplete,\n  dialogMode = false,\n  onCloseDialog,\n  initialSelectedMediaType = null,\n}) => {\n  const navigate = useNavigate();\n  const { data: userProfile } = useUserProfile();\n  // queryClient and theme are NOT defined here\n\n  // Replace Redux selector with TanStack Query hook\n  const { \n    data: fetchedMediaTypes = [], \n    isLoading: isLoadingMediaTypes,\n    // isError: mediaTypesError, \n    // error: mediaTypesFetchError \n  } = useMediaTypes();\n\n  // Convert fetchedMediaTypes to InternalMediaType if necessary, or ensure types are compatible\n  const mediaTypes: InternalMediaType[] = useMemo(() => \n    fetchedMediaTypes.map(adaptMediaType), // Use the adapter function\n    [fetchedMediaTypes]);\n    \n  // State variables\n  const [file, setFile] = useState<File | null>(null);\n  const [selectedMediaType, setSelectedMediaType] = useState<string | null>(initialSelectedMediaType);\n  const [metadata, setMetadata] = useState<MetadataState>({\n    title: \"\",\n    fileName: \"\",\n    altText: \"\",\n    description: \"\",\n    tags: [],\n    visibility: \"private\",\n    customFields: {},\n    tagsInput: \"\",\n    recordedDate: \"\",\n    mediaTypeId: \"\",\n    mediaTypeName: \"\",\n  });\n  const [fileLoadingProgress, setFileLoadingProgress] = useState<number>(0);\n  const [isPreviewReady, setIsPreviewReady] = useState<boolean>(false);\n\n  // Local helper functions that were previously removed by mistake\n  const handleMetadataChange = (field: string, value: unknown) => {\n    const finalValue = value === '' ? undefined : value;\n    setMetadata((prev) => ({\n      ...prev,\n      [field]: finalValue,\n    }));\n  };\n\n  const handleImagePreviewLoad = (fileUrl: string) => {\n    const img = new Image();\n    img.onload = () => {\n      setMetadata((prev) => ({\n        ...prev,\n        imageWidth: img.width,\n        imageHeight: img.height,\n      }));\n      setFileLoadingProgress(100);\n      setIsPreviewReady(true);\n    };\n    img.onerror = () => {\n      console.error('Error loading image preview');\n      setFileLoadingProgress(100);\n      setIsPreviewReady(true);\n    };\n    img.src = fileUrl;\n  };\n  \n  // The imported formatFileSize and isFileTypeValid from ./utils/fileUtils will be used\n  // No need for local definitions of these\n\n  // =============== HOOKS ===============\n  // ... useEffects and other hooks ...\n\n  // =============== EVENT HANDLERS ===============\n  // ... onDrop, handleUpload, handleFileSelect, etc. ...\n  \n  // Inside onDrop or handleFileSelect, when using isFileTypeValid:\n  // const mediaTypeObject = mediaTypes.find(mt => mt._id === selectedMediaType);\n  // const acceptedTypes = mediaTypeObject?.acceptedFileTypes || [];\n  // if (!isFileTypeValid(selectedFile, acceptedTypes)) { ... }\n\n\n  // =============== RENDER LOGIC ===============\n  // ... JSX ...\n  // When rendering MetadataForm:\n  // <MetadataForm\n  //   ...\n  //   mediaTypes={mediaTypes.map(mt => ({...mt, description: mt.description || ''}))}\n  //   ...\n  // />\n  // ... rest of JSX ...\n};\n\nexport default MediaUploader;\n","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/components/FieldInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[547,550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[547,550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  TextField,\n  FormControl,\n  Select,\n  MenuItem,\n  Box,\n  Chip,\n} from \"@mui/material\";\nimport { TagCategory } from \"../../../hooks/query-hooks\";\nimport { MetadataState } from \"../types\";\n\ninterface Field {\n  type: string;\n  options?: string[];\n  required?: boolean;\n  name?: string;\n  useTagCategory?: boolean;\n  tagCategoryId?: string;\n}\n\ninterface FieldInputProps {\n  field: Field;\n  keyName: string;\n  metadata: MetadataState;\n  tagCategories: TagCategory[];\n  handleMetadataChange: (field: string, value: any) => void;\n}\n\n// Type guard to check if a field is a tag category field\nconst isTagCategoryField = (field: Field): boolean => {\n  return !!field.useTagCategory && !!field.tagCategoryId;\n};\n\n// Helper function to safely get tag options based on category ID\nconst getTagOptionsFromCategory = (tagCategoryId: string, tagCategories: TagCategory[]): string[] => {\n  const category = tagCategories.find(cat => cat._id === tagCategoryId);\n  return category?.tags?.map(tag => tag.name) || [];\n};\n\nconst FieldInput: React.FC<FieldInputProps> = ({ \n  field, \n  keyName, \n  metadata, \n  tagCategories, \n  handleMetadataChange \n}) => {\n  \n  switch (field.type) {\n    case 'TextArea':\n      return (\n        <TextField\n          fullWidth\n          multiline\n          rows={4}\n          value={metadata[keyName] || \"\"}\n          onChange={(e) => {\n            // Use undefined for empty strings in non-required fields\n            const value = e.target.value.trim() === '' && !field.required ? undefined : e.target.value;\n            handleMetadataChange(keyName, value);\n          }}\n          margin=\"none\"\n          variant=\"outlined\"\n          size=\"small\"\n          InputProps={{\n            sx: { bgcolor: 'background.paper', borderRadius: 1 }\n          }}\n        />\n      );\n    \n    case 'Select': {\n      // Get options based on field configuration\n      let selectOptions: string[] = [];\n      \n      if (isTagCategoryField(field) && field.tagCategoryId) {\n        selectOptions = getTagOptionsFromCategory(field.tagCategoryId, tagCategories);\n      } else {\n        selectOptions = field.options || [];\n      }\n      \n      return (\n        <FormControl fullWidth size=\"small\">\n          <Select\n            name={keyName}\n            value={metadata[keyName] || ''}\n            onChange={(e) => {\n              // Use undefined for empty values in non-required fields\n              const value = e.target.value === '' && !field.required ? undefined : e.target.value;\n              handleMetadataChange(keyName, value);\n            }}\n            sx={{ bgcolor: 'background.paper', borderRadius: 1 }}\n          >\n            {selectOptions.map((option) => (\n              <MenuItem key={option} value={option}>\n                {option}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      );\n    }\n    \n    case 'MultiSelect': {\n      // Get options based on field configuration\n      let multiSelectOptions: string[] = [];\n      \n      if (isTagCategoryField(field) && field.tagCategoryId) {\n        multiSelectOptions = getTagOptionsFromCategory(field.tagCategoryId, tagCategories);\n      } else {\n        multiSelectOptions = field.options || [];\n      }\n      \n      return (\n        <FormControl fullWidth size=\"small\">\n          <Select\n            name={keyName}\n            multiple\n            value={Array.isArray(metadata[keyName]) ? metadata[keyName] : []}\n            onChange={(e) => {\n              const selectedValues = e.target.value as string[];\n              // Use undefined for empty arrays in non-required fields\n              const value = selectedValues.length === 0 && !field.required ? undefined : selectedValues;\n              handleMetadataChange(keyName, value);\n            }}\n            renderValue={(selected) => (\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                {(selected as string[]).map((value) => (\n                  <Chip \n                    key={value} \n                    label={value} \n                    size=\"small\" \n                    sx={{ \n                      bgcolor: 'rgba(0, 0, 0, 0.08)', \n                      height: '24px',\n                      '& .MuiChip-label': {\n                        padding: '0 8px'\n                      }\n                    }}\n                  />\n                ))}\n              </Box>\n            )}\n            sx={{ bgcolor: 'background.paper', borderRadius: 1 }}\n            MenuProps={{\n              PaperProps: {\n                style: {\n                  maxHeight: 224,\n                  width: 250,\n                },\n              },\n            }}\n          >\n            {multiSelectOptions.map((option) => (\n              <MenuItem key={option} value={option}>\n                {option}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      );\n    }\n      \n    case 'Number':\n      return (\n        <TextField\n          type=\"number\"\n          fullWidth\n          value={metadata[keyName] || \"\"}\n          onChange={(e) => {\n            // Use undefined for empty values in non-required fields\n            const value = e.target.value === '' && !field.required ? undefined : e.target.value;\n            handleMetadataChange(keyName, value);\n          }}\n          margin=\"none\"\n          variant=\"outlined\"\n          size=\"small\"\n          InputProps={{\n            sx: { bgcolor: 'background.paper', borderRadius: 1 }\n          }}\n        />\n      );\n      \n    case 'Date':\n      return (\n        <TextField\n          type=\"date\"\n          fullWidth\n          value={metadata[keyName] || \"\"}\n          onChange={(e) => {\n            // Use undefined for empty values in non-required fields\n            const value = e.target.value === '' && !field.required ? undefined : e.target.value;\n            handleMetadataChange(keyName, value);\n          }}\n          margin=\"none\"\n          variant=\"outlined\"\n          size=\"small\"\n          InputProps={{\n            sx: { bgcolor: 'background.paper', borderRadius: 1 }\n          }}\n        />\n      );\n      \n    case 'Boolean':\n      return (\n        <FormControl fullWidth size=\"small\">\n          <Select\n            value={metadata[keyName] !== undefined ? metadata[keyName] : \"false\"}\n            onChange={(e) => {\n              // For Boolean fields, we always want to store a value\n              // so we don't use undefined here\n              handleMetadataChange(keyName, e.target.value);\n            }}\n            sx={{ bgcolor: 'background.paper', borderRadius: 1 }}\n          >\n            <MenuItem value=\"true\">Yes</MenuItem>\n            <MenuItem value=\"false\">No</MenuItem>\n          </Select>\n        </FormControl>\n      );\n      \n      // Default case for Text fields and others\n    default:\n      return (\n        <TextField\n          fullWidth\n          value={metadata[keyName] || \"\"}\n          onChange={(e) => {\n            // Use undefined for empty strings in non-required fields\n            const value = e.target.value.trim() === '' && !field.required ? undefined : e.target.value;\n            handleMetadataChange(keyName, value);\n          }}\n          margin=\"none\"\n          variant=\"outlined\"\n          size=\"small\"\n          InputProps={{\n            sx: { bgcolor: 'background.paper', borderRadius: 1 }\n          }}\n        />\n      );\n  }\n};\n\nexport default FieldInput; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/components/FieldLabel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/components/FormFieldsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[699,702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[699,702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[779,782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[779,782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6421,6424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6421,6424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":236,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7830,7833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7830,7833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { \n  Box, \n  Tabs, \n  Tab, \n  Typography,\n  Paper\n} from \"@mui/material\";\nimport DoneIcon from \"@mui/icons-material/Done\";\nimport CircleIcon from \"@mui/icons-material/Circle\";\nimport FieldLabel from \"./FieldLabel\";\nimport FieldInput from \"./FieldInput\";\nimport { MediaType, TagCategory } from \"../../../hooks/query-hooks\";\nimport { MetadataState } from \"../types\";\nimport StandardFields from \"./StandardFields\";\nimport { SelectChangeEvent } from \"@mui/material\";\nimport \"./FormFieldsTab.css\";\n\ninterface FormFieldsTabProps {\n  currentTab: number;\n  setCurrentTab: (index: number) => void;\n  matchingType: MediaType;\n  baseType: string;\n  baseFields: Record<string, any>;\n  metadata: MetadataState;\n  handleMetadataChange: (field: string, value: any) => void;\n  tagCategories: TagCategory[];\n  hasIncompleteStandardFields: boolean;\n  hasIncompleteCustomFields: boolean;\n  hasIncompleteBaseFields: boolean;\n  isStandardTabComplete: boolean;\n  isCustomTabComplete: boolean;\n  isBaseTabComplete: boolean;\n  showTagFilter: boolean;\n  setShowTagFilter: React.Dispatch<React.SetStateAction<boolean>>;\n  getAvailableTags: () => string[];\n  handleTagsChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  handleTagsBlur: () => void;\n  handleTagsKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n  handleTagCategoryChange: (event: SelectChangeEvent) => void;\n  handleTagSearch: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  file: File | null;\n  isCustomSection?: boolean;\n  mediaType?: MediaType | null;\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n  const { children, value, index, ...other } = props;\n  const isActive = value === index;\n\n  return (\n    <Box\n      role=\"tabpanel\"\n      hidden={!isActive}\n      id={`media-uploader-tabpanel-${index}`}\n      aria-labelledby={`media-uploader-tab-${index}`}\n      className={`tab-panel ${isActive ? 'tab-panel-active' : 'tab-panel-inactive'}`}\n      {...other}\n    >\n      {isActive && (\n        <Box className=\"tab-panel-content\">\n          {children}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nconst a11yProps = (index: number) => {\n  return {\n    id: `media-uploader-tab-${index}`,\n    'aria-controls': `media-uploader-tabpanel-${index}`,\n  };\n};\n\nconst FormFieldsTab: React.FC<FormFieldsTabProps> = ({\n  currentTab,\n  setCurrentTab,\n  matchingType,\n  baseType,\n  baseFields,\n  metadata,\n  handleMetadataChange,\n  tagCategories,\n  hasIncompleteStandardFields,\n  hasIncompleteCustomFields,\n  hasIncompleteBaseFields,\n  isStandardTabComplete,\n  isCustomTabComplete,\n  isBaseTabComplete,\n  showTagFilter,\n  setShowTagFilter,\n  getAvailableTags,\n  handleTagsChange,\n  handleTagsBlur,\n  handleTagsKeyDown,\n  handleTagCategoryChange,\n  handleTagSearch,\n  file,\n  isCustomSection = false,\n  mediaType = null\n}) => {\n  const handleChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setCurrentTab(newValue);\n  };\n\n  return (\n    <Box className=\"fields-container\">\n      <Box className=\"tabs-container\">\n        <Tabs \n          value={currentTab} \n          onChange={handleChange} \n          variant=\"fullWidth\"\n          aria-label=\"form tabs\"\n        >\n          <Tab \n            label={\n              <Box className=\"tab-label\">\n                <Typography>Standard Information</Typography>\n                <Box className=\"tab-indicator\">\n                  {isStandardTabComplete ? (\n                    <DoneIcon className=\"complete-icon\" />\n                  ) : (\n                    <CircleIcon \n                      className={hasIncompleteStandardFields ? \"incomplete-icon\" : \"neutral-icon\"}\n                    />\n                  )}\n                </Box>\n              </Box>\n            } \n            {...a11yProps(0)}\n          />\n          \n          {(matchingType.fields || []).length > 0 && (\n            <Tab \n              label={\n                <Box className=\"tab-label\">\n                  <Typography>{matchingType.name} Fields</Typography>\n                  <Box className=\"tab-indicator\">\n                    {isCustomTabComplete ? (\n                      <DoneIcon className=\"complete-icon\" />\n                    ) : (\n                      <CircleIcon \n                        className={hasIncompleteCustomFields ? \"incomplete-icon\" : \"neutral-icon\"}\n                      />\n                    )}\n                  </Box>\n                </Box>\n              } \n              {...a11yProps(1)}\n            />\n          )}\n          \n          {Object.keys(baseFields).length > 0 && (\n            <Tab \n              label={\n                <Box className=\"tab-label\">\n                  <Typography>{baseType.replace('Base', '')} Properties</Typography>\n                  <Box className=\"tab-indicator\">\n                    {isBaseTabComplete ? (\n                      <DoneIcon className=\"complete-icon\" />\n                    ) : (\n                      <CircleIcon \n                        className={hasIncompleteBaseFields ? \"incomplete-icon\" : \"neutral-icon\"}\n                      />\n                    )}\n                  </Box>\n                </Box>\n              } \n              {...a11yProps(2)}\n            />\n          )}\n        </Tabs>\n\n        <Box className=\"tab-panels-container\">\n        <TabPanel value={currentTab} index={0}>\n          {!isCustomSection ? (\n            <Paper className=\"tab-content-paper\" elevation={0} variant=\"outlined\">\n              <StandardFields \n                metadata={metadata}\n                handleMetadataChange={handleMetadataChange}\n                showTagFilter={showTagFilter}\n                setShowTagFilter={setShowTagFilter}\n                tagCategories={tagCategories}\n                getAvailableTags={getAvailableTags}\n                handleTagsChange={handleTagsChange}\n                handleTagsBlur={handleTagsBlur}\n                handleTagsKeyDown={handleTagsKeyDown}\n                handleTagCategoryChange={handleTagCategoryChange}\n                handleTagSearch={handleTagSearch}\n              />\n            </Paper>\n          ) : (\n            <Paper className=\"tab-content-paper\" elevation={0} variant=\"outlined\">\n              {mediaType && mediaType.fields && mediaType.fields.length > 0 ? (\n                <Box className=\"fields-grid\">\n                  {mediaType.fields.map((field: any, index) => (\n                    <Box \n                      className={field.type === 'TextArea' ? 'field-full-width' : 'field-half-width'}\n                      key={`${field.name}-${index}`}\n                    >\n                      <FieldLabel \n                        name={field.name} \n                        required={field.required} \n                        isValid={field.required ? (metadata[field.name] ? true : false) : null}\n                      />\n                      <FieldInput\n                        field={field}\n                        keyName={field.name}\n                        metadata={metadata}\n                        tagCategories={tagCategories}\n                        handleMetadataChange={handleMetadataChange}\n                      />\n                    </Box>\n                  ))}\n                </Box>\n              ) : (\n                <Typography variant=\"body1\" className=\"empty-message\" align=\"center\">\n                  No custom fields for this media type.\n                </Typography>\n              )}\n            </Paper>\n          )}\n        </TabPanel>\n        \n        <TabPanel value={currentTab} index={1}>\n          {(matchingType.fields || []).length > 0 && (\n            <Paper className=\"tab-content-paper\" elevation={0} variant=\"outlined\">\n              <Box className=\"fields-grid\">\n                {(matchingType.fields || []).map((field: any, index) => (\n                  <Box \n                    className={field.type === 'TextArea' ? 'field-full-width' : 'field-half-width'}\n                    key={`${field.name}-${index}`}\n                  >\n                    <FieldLabel \n                      name={field.name} \n                      required={field.required} \n                      isValid={field.required ? (metadata[field.name] ? true : false) : null}\n                    />\n                    <FieldInput\n                      field={field}\n                      keyName={field.name}\n                      metadata={metadata}\n                      tagCategories={tagCategories}\n                      handleMetadataChange={handleMetadataChange}\n                    />\n                  </Box>\n                ))}\n              </Box>\n            </Paper>\n          )}\n        </TabPanel>\n        \n        <TabPanel value={currentTab} index={2}>\n          {Object.keys(baseFields).length > 0 ? (\n            <Paper className=\"tab-content-paper\" elevation={0} variant=\"outlined\">\n              <Box className=\"fields-grid\">\n                {Object.entries(baseFields).map(([key, field]) => {\n                  // Skip fields that are already populated automatically\n                  if ((key === 'imageWidth' || key === 'imageHeight') && \n                      metadata[key] !== undefined) {\n                    return (\n                      <Box className=\"field-half-width\" key={key}>\n                        <FieldLabel \n                          name={key} \n                          required={false} \n                          isValid={true}\n                        />\n                        <FieldInput\n                          field={{ \n                            type: 'text', \n                            required: false,\n                            name: key\n                          }}\n                          keyName={key}\n                          metadata={{...metadata, [key]: metadata[key] || \"Auto-detected\"}}\n                          tagCategories={tagCategories}\n                          handleMetadataChange={() => {}}\n                        />\n                      </Box>\n                    );\n                  }\n                  \n                  // Use type assertion to solve the 'field is of type unknown' error\n                  const fieldWithType = field as {\n                    type: string;\n                    options?: string[];\n                    required?: boolean;\n                    name?: string;\n                    useTagCategory?: boolean;\n                    tagCategoryId?: string;\n                  };\n                  \n                  const isRequired = !!fieldWithType.required;\n                  const isEmpty = metadata[key] === undefined || metadata[key] === \"\";\n                  const isValid = isRequired ? !isEmpty : null;\n                  \n                  // Render appropriate input based on field type\n                  return (\n                    <Box className=\"field-half-width\" key={key}>\n                      <FieldLabel \n                        name={key} \n                        required={isRequired} \n                        isValid={isValid}\n                      />\n                      <FieldInput\n                        field={fieldWithType}\n                        keyName={key}\n                        metadata={metadata}\n                        tagCategories={tagCategories}\n                        handleMetadataChange={handleMetadataChange}\n                      />\n                    </Box>\n                  );\n                })}\n              </Box>\n            </Paper>\n          ) : (\n            <Paper className=\"empty-tab-content-paper\" elevation={0} variant=\"outlined\">\n              <Typography variant=\"body1\" className=\"empty-message\">\n                No {baseType.replace('Base', '')} specific properties found for this file.\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {baseType === 'Media' \n                  ? \"The selected media type doesn't have a specific base type defined.\"\n                  : `Base properties would appear here when you upload a ${baseType.replace('Base', '').toLowerCase()} file.`}\n              </Typography>\n              <Box className=\"file-info-box\">\n                <Typography variant=\"caption\" display=\"block\" align=\"left\">\n                  Current file type: {file ? file.type : 'No file selected'}\n                </Typography>\n                <Typography variant=\"caption\" display=\"block\" align=\"left\">\n                  Media type base: {baseType}\n                </Typography>\n                <Typography variant=\"caption\" display=\"block\" align=\"left\">\n                  Expected MIME type: {baseType === 'BaseImage' ? 'image/*' : \n                    baseType === 'BaseVideo' ? 'video/*' : \n                    baseType === 'BaseAudio' ? 'audio/*' : \n                    baseType === 'BaseDocument' ? 'application/pdf' : 'any'}\n                </Typography>\n              </Box>\n            </Paper>\n          )}\n        </TabPanel>\n      </Box>\n      \n      </Box>\n      \n      \n    </Box>\n  );\n};\n\nexport default FormFieldsTab; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/components/MetadataForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[698,701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[698,701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport {\n  Box, \n  Typography,\n  Tabs,\n  Tab,\n  SelectChangeEvent\n} from '@mui/material';\nimport { MetadataState } from '../types';\nimport SimpleFormFieldsTab from \"./SimpleFormFieldsTab\";\nimport RelatedMediaSection from \"./RelatedMediaSection\";\nimport { MediaType, TagCategory } from \"../../../hooks/query-hooks\";\nimport { \n  hasIncompleteStandardFields, \n  hasIncompleteCustomFields, \n  findMediaType,\n  supportsRelatedMedia as checkRelatedMediaSupport\n} from \"../utils\";\n\ninterface MetadataFormProps {\n  mediaTypes: MediaType[];\n  selectedMediaType: string;\n  file: File | null;\n  metadata: MetadataState;\n  handleMetadataChange: (field: string, value: any) => void;\n  tagCategories: TagCategory[];\n  showTagFilter: boolean;\n  setShowTagFilter: React.Dispatch<React.SetStateAction<boolean>>;\n  getAvailableTags: () => string[];\n  handleTagsChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  handleTagsBlur: () => void;\n  handleTagsKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n  handleTagCategoryChange: (event: SelectChangeEvent) => void;\n  handleTagSearch: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  currentTab: number;\n  setCurrentTab: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst MetadataForm: React.FC<MetadataFormProps> = ({\n  mediaTypes,\n  selectedMediaType,\n  file,\n  metadata,\n  handleMetadataChange,\n  tagCategories,\n  showTagFilter,\n  setShowTagFilter,\n  getAvailableTags,\n  handleTagsChange,\n  handleTagsBlur,\n  handleTagsKeyDown,\n  handleTagCategoryChange,\n  handleTagSearch,\n  currentTab,\n  setCurrentTab\n}) => {\n  \n  // Find the selected media type\n  const currentMediaType = findMediaType(mediaTypes, selectedMediaType);\n  \n  // Validate media fields\n  const hasStandardErrors = hasIncompleteStandardFields(metadata);\n  const hasCustomErrors = hasIncompleteCustomFields(metadata, currentMediaType);\n  \n  // Check if the current media type supports related media\n  const supportsRelatedMedia = checkRelatedMediaSupport(currentMediaType);\n\n  // Determine tab labels and status indicators\n  const tabLabels = {\n    0: hasStandardErrors ? \"Basic Info ⚠️\" : \"Basic Info\",\n    1: hasCustomErrors ? \"Media Fields ⚠️\" : \"Media Fields\",\n    2: \"Related Media\" \n  };\n  \n  // Handle tab change\n  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\n    // Don't let users navigate to related media tab if it's not supported\n    if (newValue === 2 && !supportsRelatedMedia) {\n      return;\n    }\n    setCurrentTab(newValue);\n  };\n  \n  // Reset to first tab if currently on related media tab but type changed to one that doesn't support it\n  useEffect(() => {\n    if (currentTab === 2 && !supportsRelatedMedia) {\n      setCurrentTab(0);\n    }\n  }, [currentTab, supportsRelatedMedia, setCurrentTab]);\n  \n  return (\n    <Box sx={{ width: \"100%\", height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n      <Typography variant=\"h6\" sx={{ mb: 2 }}>\n        Add Metadata for {file?.name}\n      </Typography>\n      \n      <Box sx={{ borderBottom: 1, borderColor: \"divider\", mb: 2 }}>\n        <Tabs\n          value={currentTab}\n          onChange={handleTabChange}\n          aria-label=\"metadata tabs\"\n          variant=\"fullWidth\"\n          sx={{ mb: 1 }}\n        >\n          <Tab label={tabLabels[0]} />\n          <Tab label={tabLabels[1]} />\n          {supportsRelatedMedia && <Tab label={tabLabels[2]} />}\n        </Tabs>\n      </Box>\n      \n      <Box sx={{ flexGrow: 1, overflow: \"auto\", pb: 2 }}>\n        {currentTab === 0 && (\n          <SimpleFormFieldsTab\n            metadata={metadata}\n            handleMetadataChange={handleMetadataChange}\n            tagCategories={tagCategories}\n            showTagFilter={showTagFilter}\n            setShowTagFilter={setShowTagFilter}\n            getAvailableTags={getAvailableTags}\n            handleTagsChange={handleTagsChange}\n            handleTagsBlur={handleTagsBlur}\n            handleTagsKeyDown={handleTagsKeyDown}\n            handleTagCategoryChange={handleTagCategoryChange}\n            handleTagSearch={handleTagSearch}\n            isCustomSection={false}\n          />\n        )}\n        \n        {currentTab === 1 && (\n          <SimpleFormFieldsTab\n            metadata={metadata}\n            handleMetadataChange={handleMetadataChange}\n            mediaType={currentMediaType}\n            tagCategories={tagCategories}\n            isCustomSection={true}\n          />\n        )}\n        \n        {currentTab === 2 && supportsRelatedMedia && (\n          <RelatedMediaSection\n            metadata={metadata}\n            handleMetadataChange={handleMetadataChange}\n          />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MetadataForm; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/components/RelatedMediaSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[620,623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[620,623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box, \n  Typography,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddIcon from '@mui/icons-material/Add';\nimport { MetadataState } from '../types';\nimport MediaPicker from '../../MediaPicker/MediaPicker';\nimport { BaseMediaFile } from '../../../interfaces/MediaFile';\n\ninterface RelatedMediaSectionProps {\n  metadata: MetadataState;\n  handleMetadataChange: (field: string, value: any) => void;\n}\n\nconst RelatedMediaSection: React.FC<RelatedMediaSectionProps> = ({ \n  metadata, \n  handleMetadataChange \n}) => {\n  const [isPickerOpen, setIsPickerOpen] = useState(false);\n  const [relationshipType, setRelationshipType] = useState('reference');\n  const [note, setNote] = useState('');\n  const relatedMedia = metadata.relatedMedia || [];\n\n  // Handle selecting a media item from the picker\n  const handleMediaSelect = (media: BaseMediaFile) => {\n    const mediaId = media._id || media.id || '';\n    if (!mediaId) return;\n\n    // Check if this media is already related\n    const alreadyExists = relatedMedia.some(item => item.mediaId === mediaId);\n    if (alreadyExists) return;\n\n    // Create the new related media item\n    const newRelatedMedia = [\n      ...relatedMedia,\n      {\n        mediaId,\n        relationship: relationshipType,\n        note: note.trim() || undefined,\n        // Add display info for the UI (these won't be saved in the actual metadata)\n        _display: {\n          title: media.metadata?.fileName || media.title || 'Untitled',\n          thumbnail: media.metadata?.v_thumbnail || media.location\n        }\n      }\n    ];\n\n    // Update the metadata\n    handleMetadataChange('relatedMedia', newRelatedMedia);\n    \n    // Reset the form fields\n    setRelationshipType('reference');\n    setNote('');\n  };\n\n  // Handle removing a related media item\n  const handleRemoveRelatedMedia = (index: number) => {\n    const newRelatedMedia = [...relatedMedia];\n    newRelatedMedia.splice(index, 1);\n    handleMetadataChange('relatedMedia', newRelatedMedia);\n  };\n\n  return (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"subtitle1\" gutterBottom>\n        Related Media\n      </Typography>\n      \n      <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-start', mb: 2 }}>\n        <FormControl sx={{ minWidth: 150 }}>\n          <InputLabel id=\"relationship-type-label\">Relationship</InputLabel>\n          <Select\n            labelId=\"relationship-type-label\"\n            value={relationshipType}\n            label=\"Relationship\"\n            size=\"small\"\n            onChange={(e) => setRelationshipType(e.target.value)}\n          >\n            <MenuItem value=\"reference\">Reference</MenuItem>\n            <MenuItem value=\"version\">Version</MenuItem>\n            <MenuItem value=\"attachment\">Attachment</MenuItem>\n            <MenuItem value=\"parent\">Parent</MenuItem>\n            <MenuItem value=\"child\">Child</MenuItem>\n          </Select>\n        </FormControl>\n        \n        <TextField\n          label=\"Note (optional)\"\n          value={note}\n          onChange={(e) => setNote(e.target.value)}\n          size=\"small\"\n          sx={{ flexGrow: 1 }}\n        />\n        \n        <Button \n          variant=\"outlined\" \n          startIcon={<AddIcon />}\n          onClick={() => setIsPickerOpen(true)}\n        >\n          Add Media\n        </Button>\n      </Box>\n      \n      {/* List of related media */}\n      {relatedMedia.length > 0 ? (\n        <List dense sx={{ bgcolor: 'background.paper', borderRadius: 1, mb: 2 }}>\n          {relatedMedia.map((item, index) => (\n            <ListItem key={item.mediaId} divider={index < relatedMedia.length - 1}>\n              <ListItemText\n                primary={item._display?.title || `Media ID: ${item.mediaId}`}\n                secondary={\n                  <>\n                    <Typography component=\"span\" variant=\"body2\" color=\"text.secondary\">\n                      {item.relationship}\n                    </Typography>\n                    {item.note && (\n                      <Typography component=\"span\" variant=\"body2\" color=\"text.secondary\" sx={{ ml: 1 }}>\n                        - {item.note}\n                      </Typography>\n                    )}\n                  </>\n                }\n              />\n              <ListItemSecondaryAction>\n                <IconButton \n                  edge=\"end\" \n                  aria-label=\"delete\"\n                  onClick={() => handleRemoveRelatedMedia(index)}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n        </List>\n      ) : (\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n          No related media added yet.\n        </Typography>\n      )}\n      \n      {/* Media picker */}\n      <MediaPicker\n        open={isPickerOpen}\n        onClose={() => setIsPickerOpen(false)}\n        onSelect={handleMediaSelect}\n        title=\"Select Related Media\"\n        excludeIds={[\n          // Exclude the current media item (if it has an ID)\n          ...(metadata.mediaId ? [metadata.mediaId] : []),\n          // Also exclude already related media\n          ...relatedMedia.map(item => item.mediaId)\n        ]}\n      />\n    </Box>\n  );\n};\n\nexport default RelatedMediaSection; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/components/SimpleFormFieldsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/components/StandardFields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/components/UploadStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[170,173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[170,173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[535,538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[535,538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BaseMediaFile } from \"../../interfaces/MediaFile\";\n\nexport interface MediaTypeUploaderProps {\n  open: boolean;\n  onClose: () => void;\n  onUploadComplete: (file: any | null) => void;\n}\n\nexport interface MetadataState {\n  fileName: string;\n  tags: string[];\n  tagsInput: string;\n  visibility: string;\n  altText: string;\n  description: string;\n  recordedDate: string;\n  uploadedBy?: string;\n  modifiedBy?: string;\n  mediaTypeId: string;\n  mediaTypeName: string;\n  title: string;\n  relatedMedia?: RelatedMedia[];\n  [key: string]: any; // Allow for additional properties\n}\n\nexport interface UploaderState {\n  completionPending: boolean;\n  isClosing: boolean;\n  uploadedFileData: BaseMediaFile | null;\n}\n\nexport interface FieldLabelProps {\n  name: string;\n  required: boolean;\n  isValid: boolean | null;\n}\n\nexport interface RelatedMedia {\n  mediaId: string;\n  relationship: string; // e.g., \"reference\", \"version\", \"attachment\"\n  note?: string;\n  _display?: {\n    title?: string;\n    thumbnail?: string;\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/utils/fileUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/utils/mediaTypeUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[201,204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[201,204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[315,318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[315,318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3012,3015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3012,3015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MediaType, TagCategory } from \"../../../hooks/query-hooks\";\n\n/**\n * Returns base fields for a specific MIME type\n */\nexport const getBaseFieldsForMimeType = (mimeType: string): Record<string, any> => {\n  console.log('getBaseFieldsForMimeType called with:', mimeType);\n  \n  const baseFields: Record<string, any> = {};\n  \n  if (mimeType.startsWith('image/')) {\n    baseFields.imageWidth = { \n      type: 'Number', \n      required: false \n    };\n    baseFields.imageHeight = { \n      type: 'Number', \n      required: false \n    };\n    baseFields.imageFormat = { \n      type: 'Text', \n      required: false \n    };\n    // Add more image-specific fields\n    baseFields.colorSpace = {\n      type: 'Select',\n      options: ['RGB', 'CMYK', 'Grayscale'],\n      required: false\n    };\n    baseFields.imageOrientation = {\n      type: 'Select',\n      options: ['Landscape', 'Portrait', 'Square'],\n      required: false\n    };\n  } else if (mimeType.startsWith('video/')) {\n    baseFields.videoDuration = { \n      type: 'Text', \n      required: false \n    };\n    baseFields.videoCodec = { \n      type: 'Text', \n      required: false \n    };\n    baseFields.videoResolution = { \n      type: 'Text', \n      required: false \n    };\n    // Add more video-specific fields\n    baseFields.frameRate = {\n      type: 'Text',\n      required: false\n    };\n    baseFields.aspectRatio = {\n      type: 'Select',\n      options: ['16:9', '4:3', '21:9', 'Other'],\n      required: false\n    };\n  } else if (mimeType.startsWith('audio/')) {\n    baseFields.audioDuration = { \n      type: 'Text', \n      required: false \n    };\n    baseFields.audioCodec = { \n      type: 'Text', \n      required: false \n    };\n    baseFields.audioSampleRate = { \n      type: 'Text', \n      required: false \n    };\n    // Add more audio-specific fields\n    baseFields.bitRate = {\n      type: 'Text',\n      required: false\n    };\n    baseFields.channels = {\n      type: 'Select',\n      options: ['Mono', 'Stereo', 'Surround'],\n      required: false\n    };\n  } else if (mimeType === 'application/pdf') {\n    baseFields.pageCount = { \n      type: 'Number', \n      required: false \n    };\n    baseFields.documentType = { \n      type: 'Text', \n      required: false,\n      value: 'PDF'\n    };\n    // Add more document-specific fields\n    baseFields.author = {\n      type: 'Text',\n      required: false\n    };\n    baseFields.creationDate = {\n      type: 'Date',\n      required: false\n    };\n  }\n  \n  console.log('Generated baseFields:', Object.keys(baseFields).length, 'fields for MIME type:', mimeType);\n  return baseFields;\n};\n\n/**\n * Get tag options from a tag category\n */\nexport const getTagCategoryOptions = (\n  tagCategories: TagCategory[],\n  tagCategoryId: string\n): string[] => {\n  if (!tagCategoryId || !tagCategories) return [];\n  \n  const category = tagCategories.find(cat => cat._id === tagCategoryId);\n  return category?.tags?.map(tag => tag.name) || [];\n};\n\n/**\n * Check if a field uses tag categories\n */\nexport const isTagCategoryField = (field: any): boolean => {\n  return field && \n    (field.type === 'Select' || field.type === 'MultiSelect') && \n    field.useTagCategory && \n    !!field.tagCategoryId;\n};\n\n/**\n * Find a media type by ID or name\n */\nexport const findMediaType = (\n  mediaTypes: MediaType[],\n  mediaTypeId: string | null\n): MediaType | null => {\n  if (!mediaTypeId || !mediaTypes.length) return null;\n  \n  // First try to find by ID\n  let matchingType = mediaTypes.find(type => type._id === mediaTypeId);\n  \n  // If not found, try by name (for backward compatibility)\n  if (!matchingType) {\n    matchingType = mediaTypes.find(type => type.name === mediaTypeId);\n  }\n  \n  return matchingType || null;\n};\n\n/**\n * Checks if a media type supports related media\n */\nexport const supportsRelatedMedia = (mediaType: MediaType | null): boolean => {\n  if (!mediaType) return false;\n  \n  // Check if the mediaType has the settings property with allowRelatedMedia: true\n  return !!mediaType.settings?.allowRelatedMedia;\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/utils/uploadUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[431,434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[431,434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[765,768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[765,768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[908,911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[908,911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":4,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":7,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[933,936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[933,936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1013,1016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1013,1016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1414,1417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1414,1417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1606,1609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1606,1609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3740,3743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3740,3743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4542,4545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4542,4545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5081,5084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5081,5084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport env from '../../../config/env';\nimport { MetadataState } from '../types';\nimport { BaseMediaFile } from '../../../interfaces/MediaFile';\n\ninterface UploadProgressCallback {\n  (progress: number): void;\n}\n\ninterface MediaUploadConfig {\n  file: File;\n  metadata: MetadataState;\n  videoThumbnailTimestamp?: string;\n  videoThumbnail?: string;\n  onProgress?: UploadProgressCallback;\n  onError?: (error: any) => void;\n}\n\ninterface UploadedFile extends BaseMediaFile {\n  slug: string;\n  _id: string;\n  mediaType: string;\n  modifiedDate: string;\n  metadata: {\n    fileName: string;\n    fileSize: number;\n    fileExtension: string;\n    tags: string[];\n    visibility: string;\n    altText: string;\n    description: string;\n    [key: string]: any;\n  };\n}\n\n/**\n * Prepares metadata for upload by adding user ID and cleaning tags\n */\nexport const prepareMetadataForUpload = (\n  metadata: any,\n  userId: string\n): any => {\n  // Start with required fields and defaults\n  const preparedMetadata: any = {\n    // Set default values for required fields\n    userId,\n    visibility: metadata.visibility || 'public',\n    recordedDate: metadata.recordedDate || new Date().toISOString(),\n    uploadedBy: metadata.uploadedBy || userId,\n    modifiedBy: metadata.modifiedBy || userId,\n    // Ensure tags are valid strings, filtering out any undefined/null values\n    tags: (metadata.tags || []).filter((tag: any) => typeof tag === 'string' && tag !== ''),\n    // Include related media if present, but strip out _display which is only for UI\n    relatedMedia: (metadata.relatedMedia || []).map((item: any) => ({\n      mediaId: item.mediaId,\n      relationship: item.relationship,\n      note: item.note\n    }))\n  };\n  \n  // Copy other metadata fields, but only if they have actual values\n  Object.entries(metadata).forEach(([key, value]) => {\n    // Skip fields we've already handled\n    if (['userId', 'visibility', 'recordedDate', 'uploadedBy', 'modifiedBy', 'tags', 'relatedMedia'].includes(key)) {\n      return;\n    }\n    \n    // Only include fields with actual values (not empty strings, null, or undefined)\n    if (value !== undefined && value !== null && value !== '') {\n      preparedMetadata[key] = value;\n    }\n  });\n  \n  return preparedMetadata;\n};\n\n/**\n * Uploads a media file to the server with metadata\n */\nexport const uploadMedia = async ({\n  file,\n  metadata,\n  videoThumbnailTimestamp,\n  videoThumbnail,\n  onProgress,\n  onError\n}: MediaUploadConfig): Promise<UploadedFile> => {\n  try {\n    // Create form data for the upload\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('mediaType', metadata.mediaTypeName || ''); // Ensure we have a string value\n    formData.append('mediaTypeId', metadata.mediaTypeId || ''); // Ensure we have a string value\n    \n    // Set explicit title value\n    const title = metadata.fileName || file.name;\n    formData.append('title', title);\n    \n    // Extract and add file extension\n    const fileExtension = file.name.split('.').pop() || '';\n    formData.append('fileExtension', fileExtension);\n    \n    // Add all metadata as JSON\n    const metadataWithType = {\n      ...metadata,\n      title: title, // Make sure there's always a title\n      fileExtension: fileExtension, // Include the file extension in metadata as well\n      v_thumbnailTimestamp: videoThumbnailTimestamp || ''\n    };\n    \n    // Filter out empty/null/undefined values before sending to the server\n    const cleanedMetadata = Object.entries(metadataWithType).reduce((acc, [key, value]) => {\n      // Only include fields with actual values\n      if (value !== undefined && value !== null && value !== '') {\n        acc[key] = value;\n      }\n      return acc;\n    }, {} as any);\n    \n    formData.append('metadata', JSON.stringify(cleanedMetadata));\n    \n    // Add video thumbnail if available\n    if (videoThumbnail) {\n      console.log('Video thumbnail found:', videoThumbnail);\n      // Convert data URL to Blob for upload\n      if (videoThumbnail.startsWith('data:')) {\n        const res = await fetch(videoThumbnail);\n        const blob = await res.blob();\n        formData.append('v_thumbnail', blob);\n        formData.append('v_thumbnailTimestamp', videoThumbnailTimestamp || '00:00:01');\n      }\n    }\n    \n    // Make the API call with proper type annotations\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n      },\n      onUploadProgress: (progressEvent: any) => {\n        if (progressEvent.total && onProgress) {\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n          onProgress(percentCompleted);\n        }\n      }\n    };\n    \n    const response = await axios.post<UploadedFile>(`${env.BASE_URL}/api/media/upload`, formData, config);\n    \n    // Handle successful upload\n    if (response.data && response.data.slug) {\n      return response.data;\n    } else {\n      throw new Error('Invalid response from server');\n    }\n  } catch (error: any) {\n    console.error('Upload request failed:', error.response?.status, error.response?.statusText);\n    if (error.response?.data) {\n      console.error('Server error message:', error.response.data);\n    }\n    if (onError) {\n      onError(error);\n    }\n    throw error;\n  }\n};\n\n/**\n * Generates thumbnail for video file\n */\nexport const generateVideoThumbnail = async (\n  videoFile: File,\n  timestamp: string = '00:00:01'\n): Promise<string | null> => {\n  return new Promise((resolve) => {\n    try {\n      // Create video element\n      const video = document.createElement('video');\n      video.preload = 'metadata';\n      \n      // Create URL for the video file\n      const videoUrl = URL.createObjectURL(videoFile);\n      video.src = videoUrl;\n      \n      // Parse the timestamp (format: \"hh:mm:ss\")\n      const timeParts = timestamp.split(':').map(part => parseInt(part, 10));\n      const seconds = timeParts[0] * 3600 + timeParts[1] * 60 + timeParts[2];\n      \n      video.onloadedmetadata = () => {\n        // Set the current time to the timestamp or to 1 second if invalid\n        video.currentTime = seconds > 0 && seconds < video.duration ? seconds : 1;\n      };\n      \n      video.onseeked = () => {\n        // Create canvas and draw the video frame\n        const canvas = document.createElement('canvas');\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        \n        const ctx = canvas.getContext('2d');\n        if (ctx) {\n          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n          const thumbnailUrl = canvas.toDataURL('image/jpeg');\n          \n          // Clean up\n          URL.revokeObjectURL(videoUrl);\n          resolve(thumbnailUrl);\n        } else {\n          // Clean up\n          URL.revokeObjectURL(videoUrl);\n          resolve(null);\n        }\n      };\n      \n      video.onerror = () => {\n        // Clean up\n        URL.revokeObjectURL(videoUrl);\n        resolve(null);\n      };\n    } catch (error) {\n      console.error('Error generating thumbnail:', error);\n      resolve(null);\n    }\n  });\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/utils/validationUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2172,2175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2172,2175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":73,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2268,2271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2268,2271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MetadataState } from \"../types\";\nimport { MediaType } from \"../../../hooks/query-hooks\";\n\n/**\n * Validates if all required fields are filled\n */\nexport const validateRequiredFields = (\n  metadata: MetadataState,\n  selectedType: MediaType | null\n): boolean => {\n  // If no media type is selected, validation fails\n  if (!selectedType || !selectedType.fields) return false;\n  \n  // Check if all required fields in metadata have values\n  const requiredFields = [\n    // Standard required fields\n    ...(metadata.fileName.trim() === '' ? ['fileName'] : []),\n    \n    // Check media type specific required fields\n    ...(selectedType.fields || [])\n      .filter(field => field.required)\n      .filter(field => {\n        // For different field types, check if they have valid values\n        if (field.type === 'MultiSelect') {\n          return !metadata[field.name] || (Array.isArray(metadata[field.name]) && metadata[field.name].length === 0);\n        }\n        \n        // For all other field types\n        return metadata[field.name] === undefined || metadata[field.name] === \"\";\n      })\n      .map(field => field.name)\n  ];\n  \n  // If any required fields are missing values, validation fails\n  return requiredFields.length === 0;\n};\n\n/**\n * Checks if standard fields (like fileName) are incomplete\n */\nexport const hasIncompleteStandardFields = (metadata: MetadataState): boolean => {\n  return metadata.fileName.trim() === '';\n};\n\n/**\n * Checks if media type specific fields are incomplete\n */\nexport const hasIncompleteCustomFields = (\n  metadata: MetadataState,\n  mediaType: MediaType | null\n): boolean => {\n  if (!mediaType || !mediaType.fields) return false;\n  \n  return mediaType.fields\n    .filter(field => field.required)\n    .some(field => {\n      if (field.type === 'MultiSelect') {\n        return !metadata[field.name] || \n          (Array.isArray(metadata[field.name]) && metadata[field.name].length === 0);\n      }\n      return metadata[field.name] === undefined || metadata[field.name] === \"\";\n    });\n};\n\n/**\n * Checks if base fields are incomplete\n */\nexport const hasIncompleteBaseFields = (\n  metadata: MetadataState,\n  baseFields: Record<string, any>\n): boolean => {\n  return Object.entries(baseFields)\n    .filter(([_, fieldProps]: [string, any]) => fieldProps.required)\n    .some(([fieldName]) => \n      metadata[fieldName] === undefined || metadata[fieldName] === \"\");\n};\n\n/**\n * Normalizes a tag string (trims whitespace, removes special characters)\n */\nexport const normalizeTag = (tag: string): string => {\n  // Remove any leading/trailing whitespace and make lowercase for consistency\n  return tag.trim().toLowerCase();\n};\n\nexport const areRequiredFieldsFilled = (\n  metadata: MetadataState,\n  selectedType: MediaType | null\n): boolean => {\n  if (!selectedType || !selectedType.fields) {\n    return true; // No fields to check, so considered filled\n  }\n  return !(selectedType.fields || [])\n    .filter(field => field.required)\n    .some(field => {\n      if (field.type === 'MultiSelect') {\n        return !metadata[field.name] || \n          (Array.isArray(metadata[field.name]) && metadata[field.name].length === 0);\n      }\n      return metadata[field.name] === undefined || metadata[field.name] === \"\";\n    });\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/NavBar/NavBar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":7,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":7,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { QueryKeys } from '../../hooks/query-hooks';\n\n// Create a standalone hook for logout functionality\nexport const useLogout = () => {\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n\n  return () => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Executing logout via useLogout hook...');\n    }\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('refreshToken');\n    \n    queryClient.removeQueries({ queryKey: QueryKeys.userProfile });\n    queryClient.removeQueries({ queryKey: QueryKeys.allUsers });\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log('User and auth tokens cleared, navigating to login.');\n    }\n    navigate('/login');\n  };\n};\n\nconst NavBar: React.FC = () => {\n  // Component currently not used in the app\n  return null;\n};\n\nexport default NavBar; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/ProtectedRoute.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/SearchInput/SearchInput.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/SearchInput/SearchInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/Sidebar/Sidebar.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/Sidebar/Sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[909,912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[909,912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":149,"column":14,"nodeType":"BlockStatement","messageId":"unexpected","endLine":150,"endColumn":8,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[4646,4653],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":154,"column":14,"nodeType":"BlockStatement","messageId":"unexpected","endLine":155,"endColumn":8,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[4788,4795],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'openSubMenu'. Either include it or remove the dependency array.","line":157,"column":6,"nodeType":"ArrayExpression","endLine":157,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [location.pathname, isAdmin, openSubMenu]","fix":{"range":[4808,4836],"text":"[location.pathname, isAdmin, openSubMenu]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import \"./sidebar.scss\";\nimport { Sidebar, Menu, MenuItem } from \"react-pro-sidebar\";\nimport { Box, Avatar, CircularProgress } from \"@mui/material\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport \"./sidebar.scss\";\nimport { NavLink, useLocation, useNavigate } from \"react-router-dom\";\nimport logoLight from \"../../assets/Omni-new-logo-revvity-grey.png\";\nimport logoDark from \"../../assets/Omni-new-logo-revvity-white.png\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { \n  FaImages, \n  FaSignOutAlt, \n  FaUser, \n  FaTachometerAlt, \n  FaTags, \n  FaUsers, \n  FaLayerGroup,\n  FaChevronDown,\n  FaPalette\n} from \"react-icons/fa\";\nimport { useState, useEffect, ReactNode } from \"react\";\nimport { useQueryClient } from '@tanstack/react-query';\nimport { QueryKeys, useUserProfile } from '../../hooks/query-hooks';\n\n// Define CSS variables for the components\nconst setCssVariables = (theme: any) => {\n  const root = document.documentElement;\n  const primaryColor = theme.palette.primary.main;\n  // Convert hex to RGB for rgba usage\n  const hexToRgb = (hex: string) => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result \n      ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}`\n      : null;\n  };\n  \n  root.style.setProperty('--primary-color', primaryColor);\n  root.style.setProperty('--primary-color-rgb', hexToRgb(primaryColor));\n  root.style.setProperty('--text-color', theme.palette.mode === 'light' ? '#333' : '#fff');\n};\n\n// Custom animated submenu component to replace the default SubMenu\ninterface AnimatedSubMenuProps {\n  label: ReactNode;\n  children: ReactNode;\n  open: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  className?: string;\n}\n\nconst AnimatedSubMenu: React.FC<AnimatedSubMenuProps> = ({ \n  label, \n  children, \n  open, \n  onOpenChange, \n  className \n}) => {\n  return (\n    <Box className={className}>\n      <Box \n        onClick={() => {\n          onOpenChange(!open);\n        }} \n        sx={{ \n          cursor: 'pointer',\n          display: 'flex',\n          alignItems: 'center',\n          padding: '0.75rem 1.5rem',\n          borderRadius: '4px',\n          '&:hover': {\n            backgroundColor: 'rgba(0, 0, 0, 0.04)'\n          }\n        }}\n      >\n        {label}\n      </Box>\n      <AnimatePresence>\n        {open && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            transition={{ \n              duration: 0.3,\n              ease: [0.4, 0, 0.2, 1]\n            }}\n            style={{ overflow: 'hidden' }}\n          >\n            <Box sx={{ paddingLeft: '1rem' }}>\n              {children}\n            </Box>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </Box>\n  );\n};\n\nconst CustomSidebar: React.FC = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [openSubMenu, setOpenSubMenu] = useState<string | null>(null);\n  const theme = useTheme();\n  const queryClient = useQueryClient();\n\n  const { data: userProfile, isLoading: isUserLoading, error: userError } = useUserProfile();\n\n  const isAdmin = userProfile && (userProfile.role === \"admin\" || userProfile.role === \"superAdmin\");\n\n  // Apply CSS variables when theme changes\n  useEffect(() => {\n    setCssVariables(theme);\n  }, [theme]);\n\n  const handleSignOut = () => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log(\"Sidebar: User signing out...\");\n    }\n    localStorage.removeItem(\"authToken\");\n    localStorage.removeItem(\"refreshToken\");\n\n    // Clear the user profile from TanStack Query cache\n    queryClient.removeQueries({ queryKey: QueryKeys.userProfile });\n    // Optionally, clear allUsers cache as well\n    queryClient.removeQueries({ queryKey: QueryKeys.allUsers });\n    \n    // Consider invalidating other queries that depend on auth state if necessary\n    // queryClient.invalidateQueries(); // Or more specific keys\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Sidebar: User and auth tokens cleared, navigating to login.');\n    }\n    navigate(\"/login\");\n  };\n\n  // Detect active submenu based on current route\n  useEffect(() => {\n    const onAdminPage = isAdmin && (\n      location.pathname === \"/account\" ||\n      location.pathname === \"/admin-dashboard\" ||\n      location.pathname === \"/admin-tags\" ||\n      location.pathname === \"/admin-users\" ||\n      location.pathname === \"/admin-media-types\"\n    );\n\n    if (onAdminPage) {\n      if (openSubMenu === null) {\n        setOpenSubMenu(\"admin\");\n      } else {\n      }\n    } else { // Not on an admin page (or not admin)\n      if (openSubMenu === \"admin\") {\n        setOpenSubMenu(null);\n      } else {\n      }\n    }\n  }, [location.pathname, isAdmin]); // openSubMenu REMOVED from dependencies\n\n  // Avatar and user name display logic\n  const renderUserProfile = () => {\n    if (isUserLoading) {\n      return (\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height=\"60px\">\n          <CircularProgress size={24} />\n        </Box>\n      );\n    }\n    if (userError || !userProfile) {\n      // Minimal display or error indication if profile fetch failed or no profile\n      return (\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height=\"60px\">\n          <Avatar className=\"sidebar-avatar\" /> \n          <span className=\"user-name\">User</span>\n        </Box>\n      );\n    }\n\n    // Display for Admin users (AnimatedSubMenu)\n    if (isAdmin) {\n      return (\n        <div className=\"user-profile\">\n          <Avatar \n            className=\"sidebar-avatar\" \n            src={userProfile.avatar || undefined} \n            alt={`${userProfile.firstName || ''} ${userProfile.lastName || ''}`.trim()}\n          />\n          <span className=\"user-name\">\n            {`${userProfile.firstName || ''} ${userProfile.lastName || ''}`.trim()}\n            {userProfile.username && <span className=\"username-tag\">@{userProfile.username}</span>}\n          </span>\n          <FaChevronDown className={`profile-chevron ${openSubMenu === \"admin\" ? 'chevron-open' : ''}`} />\n        </div>\n      );\n    }\n\n    // Display for non-admin users (Direct MenuItem link)\n    return (\n      <div className=\"user-profile\">\n        <Avatar \n          className=\"sidebar-avatar\" \n          src={userProfile.avatar || undefined} \n          alt={`${userProfile.firstName || ''} ${userProfile.lastName || ''}`.trim()}\n        />\n        <span className=\"user-name\">\n          {`${userProfile.firstName || ''} ${userProfile.lastName || ''}`.trim()}\n        </span>\n      </div>\n    );\n  };\n\n  return (\n    <Box className=\"sidebar-container\">\n      <motion.div\n        transition={{ duration: 0.5 }}\n        className=\"sidebar-wrapper\"\n      >\n        <Sidebar id=\"sidebar\">\n          <div className=\"sidebar-header\">\n            { theme.palette.mode === \"light\" ? <img src={logoLight} alt=\"logo\" className=\"sidebar-logo\" /> : <img src={logoDark} alt=\"logo\" className=\"sidebar-logo\" /> }\n          </div>\n\n          <Menu className=\"sidebar-menu\">\n            {isAdmin ? (\n              <AnimatedSubMenu\n                label={renderUserProfile()}\n                open={openSubMenu === \"admin\"}\n                onOpenChange={(isOpen) => {\n                  setOpenSubMenu(isOpen ? \"admin\" : null);\n                }}\n                className=\"admin-profile-submenu\"\n                children={\n                  <>\n                    <MenuItem \n                      icon={<FaUser />} \n                      className={location.pathname === \"/account\" ? \"active-item\" : \"\"}\n                      component={\n                        <NavLink \n                          to=\"/account\" \n                          className={({isActive}) => isActive ? \"active-menu-item\" : \"\"}\n                          end\n                        />\n                      }\n                    >\n                      Account\n                    </MenuItem>\n                    <MenuItem \n                      icon={<FaTachometerAlt />} \n                      className={location.pathname === \"/admin-dashboard\" ? \"active-item\" : \"\"}\n                      component={\n                        <NavLink \n                          to=\"/admin-dashboard\" \n                          className={({isActive}) => isActive ? \"active-menu-item\" : \"\"}\n                          end\n                        />\n                      }\n                    >\n                      Dashboard\n                    </MenuItem>\n                    <MenuItem \n                      icon={<FaTags />} \n                      className={location.pathname === \"/admin-tags\" ? \"active-item\" : \"\"}\n                      component={\n                        <NavLink \n                          to=\"/admin-tags\" \n                          className={({isActive}) => isActive ? \"active-menu-item\" : \"\"}\n                          end\n                        />\n                      }\n                    >\n                      Tags\n                    </MenuItem>\n                    <MenuItem \n                      icon={<FaUsers />} \n                      className={location.pathname === \"/admin-users\" ? \"active-item\" : \"\"}\n                      component={\n                        <NavLink \n                          to=\"/admin-users\" \n                          className={({isActive}) => isActive ? \"active-menu-item\" : \"\"}\n                          end\n                        />\n                      }\n                    >\n                      Users\n                    </MenuItem>\n                    <MenuItem \n                      icon={<FaLayerGroup />} \n                      className={location.pathname === \"/admin-media-types\" ? \"active-item\" : \"\"}\n                      component={\n                        <NavLink \n                          to=\"/admin-media-types\" \n                          className={({isActive}) => isActive ? \"active-menu-item\" : \"\"}\n                          end\n                        />\n                      }\n                    >\n                      Media Types\n                    </MenuItem>\n                  </>\n                }\n              />\n            ) : (\n              // Non-admin users get a direct link to their account page if userProfile exists\n              userProfile ? (\n                <MenuItem \n                  className=\"user-menu-item\"\n                  component={<NavLink to=\"/account\" className={({ isActive }) => (isActive ? \"active-menu-item\" : \"\")}/>}\n                >\n                  {renderUserProfile()}\n                </MenuItem>\n              ) : isUserLoading ? (\n                // Show a loading placeholder for the user menu item\n                <MenuItem className=\"user-menu-item\">\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" width=\"100%\" height=\"40px\">\n                    <CircularProgress size={20} />\n                  </Box>\n                </MenuItem>\n              ) : null // Or some error/fallback display if needed when not loading and no profile\n            )}\n\n            {/* <MenuItem \n              icon={<FaHubspot />} \n              className={location.pathname === \"/home\" ? \"active-item\" : \"\"}\n              component={\n                <NavLink \n                  to=\"/home\" \n                  className={({isActive}) => isActive ? \"active-menu-item\" : \"\"}\n                  end\n                />\n              }\n            >\n              HubSpot\n            </MenuItem> */}\n            \n            <MenuItem \n              icon={<FaImages />} \n              className={location.pathname === \"/media-library\" ? \"active-item\" : \"\"}\n              component={\n                <NavLink \n                  to=\"/media-library\" \n                  className={({isActive}) => isActive ? \"active-menu-item\" : \"\"}\n                  end\n                />\n              }\n            >\n              Media Library\n            </MenuItem>\n            \n            {isAdmin && (\n              <MenuItem \n                icon={<FaPalette />} \n                className={location.pathname === \"/style-guide\" ? \"active-item\" : \"\"}\n                component={\n                  <NavLink \n                    to=\"/style-guide\" \n                    className={({isActive}) => isActive ? \"active-menu-item\" : \"\"}\n                    end\n                  />\n                }\n              >\n                Style Guide\n              </MenuItem>\n            )}\n          </Menu>\n          \n          <Menu className=\"sidebar-footer\">\n            <MenuItem \n              icon={<FaSignOutAlt />} \n              onClick={handleSignOut}\n              className=\"signout-button\"\n            >\n              Sign Out\n            </MenuItem>\n          </Menu>\n        </Sidebar>\n      </motion.div>\n    </Box>\n  );\n};\n\nexport default CustomSidebar;\n","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/StyleGuide/TypographyDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/TagCategoryManager/DeleteConfirmationDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/TagCategoryManager/TagCategoryForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Switch' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createTagCategory' is assigned a value but never used.","line":51,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'updateTagCategory' is assigned a value but never used.","line":52,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":41}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Typography,\n  Button,\n  Box,\n  Chip,\n  Alert,\n  Paper,\n  InputAdornment,\n  IconButton,\n  Tooltip,\n  FormControlLabel,\n  Switch\n} from '@mui/material';\nimport { FaTag, FaSearch, FaPlus, FaTimes, FaArrowRight } from 'react-icons/fa';\nimport { DragDropContext, Droppable, Draggable, DropResult, DroppableProvided, DraggableProvided } from '@hello-pangea/dnd';\nimport { useUserProfile, useTags, useCreateTag, useCreateTagCategory, useUpdateTagCategory } from '../../hooks/query-hooks';\n\ninterface TagCategoryFormData {\n  name: string;\n  description: string;\n  tags: Array<{ id: string; name: string }>;\n}\n\ninterface TagCategoryFormProps {\n  open: boolean;\n  formData: TagCategoryFormData;\n  setFormData: React.Dispatch<React.SetStateAction<TagCategoryFormData>>;\n  onClose: () => void;\n  onSubmit: () => void;\n  isEditing: boolean;\n}\n\nexport const TagCategoryForm: React.FC<TagCategoryFormProps> = ({\n  open,\n  formData,\n  setFormData,\n  onClose,\n  onSubmit,\n  isEditing\n}) => {\n  // Use TanStack Query hooks instead of Redux\n  const { data: userProfile } = useUserProfile();\n  const { data: tags = [] } = useTags(userProfile);\n  const { mutateAsync: createTag } = useCreateTag();\n  const { mutateAsync: createTagCategory } = useCreateTagCategory();\n  const { mutateAsync: updateTagCategory } = useUpdateTagCategory();\n  \n  const [searchTerm, setSearchTerm] = useState('');\n  const [newTagName, setNewTagName] = useState('');\n  const [showCreateTag, setShowCreateTag] = useState(false);\n  \n  // Filter tags based on search term\n  const filteredTags = tags.filter(tag => \n    tag.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n  \n  // Check if search term doesn't match any existing tags\n  useEffect(() => {\n    const tagExists = tags.some(tag => \n      tag.name.toLowerCase() === searchTerm.toLowerCase()\n    );\n    \n    if (searchTerm && !tagExists && filteredTags.length === 0) {\n      setShowCreateTag(true);\n      setNewTagName(searchTerm);\n    } else {\n      setShowCreateTag(false);\n      setNewTagName('');\n    }\n  }, [searchTerm, tags, filteredTags]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n  };\n\n  const handleTagToggle = (tagId: string, tagName: string) => {\n    setFormData(prev => {\n      // Check if the tag is already in the tags array\n      const tagIndex = prev.tags.findIndex(tag => tag.id === tagId);\n      \n      if (tagIndex !== -1) {\n        // Remove tag if it exists\n        return { \n          ...prev, \n          tags: prev.tags.filter(tag => tag.id !== tagId)\n        };\n      } else {\n        // Add tag\n        return { \n          ...prev, \n          tags: [...prev.tags, { id: tagId, name: tagName }]\n        };\n      }\n    });\n  };\n  \n  const handleCreateNewTag = async () => {\n    if (newTagName.trim()) {\n      try {\n        // Use TanStack Query mutation instead of Redux action\n        const newTag = await createTag(newTagName.trim());\n        \n        // Add the newly created tag to the selected tags\n        if (newTag && newTag._id) {\n          handleTagToggle(newTag._id, newTag.name);\n        }\n        \n        // Reset states\n        setNewTagName('');\n        setSearchTerm('');\n        setShowCreateTag(false);\n      } catch (error) {\n        console.error('Failed to create new tag:', error);\n      }\n    }\n  };\n  \n  const handleOnDragEnd = (result: DropResult) => {\n    if (!result.destination) return;\n    \n    if (result.source.droppableId === 'availableTags' && \n        result.destination.droppableId === 'selectedTags') {\n      // User dragged from available to selected\n      const tagId = result.draggableId;\n      const tag = tags.find(t => t._id === tagId);\n      if (tag && !formData.tags.some(t => t.id === tagId)) {\n        handleTagToggle(tagId, tag.name);\n      }\n    } else if (result.source.droppableId === 'selectedTags' && \n               result.destination.droppableId === 'availableTags') {\n      // User dragged from selected to available (remove)\n      const tagId = result.draggableId;\n      if (formData.tags.some(t => t.id === tagId)) {\n        handleTagToggle(tagId, '');\n      }\n    }\n  };\n  \n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        {isEditing ? 'Edit Tag Category' : 'Create Tag Category'}\n      </DialogTitle>\n      <DialogContent>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          name=\"name\"\n          label=\"Category Name\"\n          type=\"text\"\n          fullWidth\n          variant=\"outlined\"\n          value={formData.name}\n          onChange={handleInputChange}\n          required\n          sx={{ mb: 2 }}\n        />\n        <TextField\n          margin=\"dense\"\n          name=\"description\"\n          label=\"Description (optional)\"\n          type=\"text\"\n          fullWidth\n          variant=\"outlined\"\n          value={formData.description}\n          onChange={handleInputChange}\n          multiline\n          rows={2}\n          sx={{ mb: 3 }}\n        />\n        \n        <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n          Select Tags for this Category\n        </Typography>\n        \n        {tags.length === 0 ? (\n          <Alert severity=\"info\" sx={{ mb: 2 }}>\n            No tags available. Create tags first before adding them to categories.\n          </Alert>\n        ) : (\n          <DragDropContext onDragEnd={handleOnDragEnd}>\n            <Box sx={{ \n              display: 'flex', \n              gap: 2, \n              minHeight: '300px',\n              maxHeight: '400px',\n              overflow: 'hidden',\n              position: 'relative'\n            }}>\n              {/* Left Column - Available Tags */}\n              <Paper \n                elevation={0} \n                variant=\"outlined\" \n                sx={{ \n                  width: '50%', \n                  p: 1,\n                  display: 'flex',\n                  flexDirection: 'column',\n                  flexGrow: 1\n                }}\n              >\n                <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                  Available Tags\n                </Typography>\n                \n                <TextField\n                  size=\"small\"\n                  placeholder=\"Search tags...\"\n                  value={searchTerm}\n                  onChange={handleSearchChange}\n                  variant=\"outlined\"\n                  fullWidth\n                  sx={{ mb: 1 }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <FaSearch />\n                      </InputAdornment>\n                    ),\n                    endAdornment: searchTerm ? (\n                      <InputAdornment position=\"end\">\n                        <IconButton \n                          size=\"small\" \n                          onClick={() => setSearchTerm('')}\n                          edge=\"end\"\n                        >\n                          <FaTimes />\n                        </IconButton>\n                      </InputAdornment>\n                    ) : null\n                  }}\n                />\n                \n                {showCreateTag && (\n                  <Box sx={{ \n                    display: 'flex', \n                    alignItems: 'center', \n                    mb: 1, \n                    p: 1,\n                    bgcolor: 'action.hover',\n                    borderRadius: 1\n                  }}>\n                    <Typography variant=\"body2\" sx={{ flex: 1 }}>\n                      Create new tag: <strong>{newTagName}</strong>\n                    </Typography>\n                    <Button \n                      size=\"small\" \n                      variant=\"contained\" \n                      color=\"primary\" \n                      startIcon={<FaPlus />}\n                      onClick={handleCreateNewTag}\n                    >\n                      Create\n                    </Button>\n                  </Box>\n                )}\n                \n                <Droppable droppableId=\"availableTags\">\n                  {(provided: DroppableProvided) => (\n                    <Box\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                      sx={{ \n                        flex: 1,\n                        overflowY: 'auto',\n                        minHeight: 0,\n                        display: 'flex',\n                        flexWrap: 'wrap',\n                        alignContent: 'flex-start',\n                        gap: 0.5,\n                        p: 1\n                      }}\n                    >\n                      {filteredTags\n                        .filter(tag => !formData.tags.some(t => t.id === tag._id))\n                        .map((tag, index) => (\n                          <Draggable key={tag._id} draggableId={tag._id} index={index}>\n                            {(provided: DraggableProvided) => (\n                              <Chip\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                label={tag.name}\n                                icon={<FaTag />}\n                                onClick={() => handleTagToggle(tag._id, tag.name)}\n                                variant=\"outlined\"\n                                sx={{ m: 0.5 }}\n                              />\n                            )}\n                          </Draggable>\n                        ))}\n                      {provided.placeholder}\n                      {filteredTags.length === 0 && !showCreateTag && (\n                        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ p: 1, width: '100%', textAlign: 'center' }}>\n                          No matching tags found\n                        </Typography>\n                      )}\n                    </Box>\n                  )}\n                </Droppable>\n              </Paper>\n              \n              {/* Center - Drag Indicator */}\n              <Box sx={{ \n                display: 'flex', \n                flexDirection: 'column', \n                justifyContent: 'center',\n                alignItems: 'center'\n              }}>\n                <FaArrowRight />\n                <Typography variant=\"caption\" sx={{ mt: 1, textAlign: 'center', width: '60px' }}>\n                  Drag and drop\n                </Typography>\n              </Box>\n              \n              {/* Right Column - Selected Tags */}\n              <Paper \n                elevation={0} \n                variant=\"outlined\" \n                sx={{ \n                  width: '50%', \n                  p: 1,\n                  display: 'flex',\n                  flexDirection: 'column',\n                  flexGrow: 1\n                }}\n              >\n                <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                  Selected Tags ({formData.tags.length})\n                </Typography>\n                \n                <Droppable droppableId=\"selectedTags\">\n                  {(provided: DroppableProvided) => (\n                    <Box\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                      sx={{ \n                        flex: 1,\n                        overflowY: 'auto',\n                        minHeight: 0,\n                        display: 'flex',\n                        flexWrap: 'wrap',\n                        alignContent: 'flex-start',\n                        gap: 0.5,\n                        p: 1,\n                        backgroundColor: formData.tags.length ? 'inherit' : 'action.hover'\n                      }}\n                    >\n                      {formData.tags.length > 0 ? (\n                        formData.tags.map((tag, index) => (\n                          <Draggable key={tag.id} draggableId={tag.id} index={index}>\n                            {(provided: DraggableProvided) => (\n                              <Chip\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                label={tag.name}\n                                onDelete={() => handleTagToggle(tag.id, tag.name)}\n                                color=\"primary\"\n                                size=\"medium\"\n                                sx={{ m: 0.5 }}\n                              />\n                            )}\n                          </Draggable>\n                        ))\n                      ) : (\n                        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ p: 1, width: '100%', textAlign: 'center' }}>\n                          Drag tags here or click on tags to select\n                        </Typography>\n                      )}\n                      {provided.placeholder}\n                    </Box>\n                  )}\n                </Droppable>\n              </Paper>\n            </Box>\n          </DragDropContext>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button \n          onClick={onSubmit} \n          variant=\"contained\" \n          color=\"primary\"\n          disabled={!formData.name.trim()}\n        >\n          {isEditing ? 'Update' : 'Create'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// Add default export for lazy loading\nexport default TagCategoryForm; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/TagCategoryManager/TagCategoryItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/TagCategoryManager/TagCategoryManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'updateTagCategoryMutation' is assigned a value but never used.","line":62,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'deleteTagCategoryMutation' is assigned a value but never used.","line":63,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'disableComponentToasts' is assigned a value but never used.","line":84,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4002,4005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4002,4005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4022,4025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4022,4025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'showToastOnce'. Either exclude it or remove the dependency array.","line":183,"column":6,"nodeType":"ArrayExpression","endLine":183,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [dialogState, refetch]","fix":{"range":[5466,5503],"text":"[dialogState, refetch]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":247,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8350,8353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8350,8353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'refetch'. Either exclude it or remove the dependency array.","line":260,"column":6,"nodeType":"ArrayExpression","endLine":260,"endColumn":123,"suggestions":[{"desc":"Update the dependencies array to be: [dialogState, showToastOnce, categoryNameExists, handleClose, createTagCategoryMutation, isCreatingCategory]","fix":{"range":[9064,9181],"text":"[dialogState, showToastOnce, categoryNameExists, handleClose, createTagCategoryMutation, isCreatingCategory]"}}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo, useRef, lazy, Suspense } from 'react';\nimport {\n  Box,\n  Typography,\n  Button,\n  List,\n  Paper,\n  Alert,\n  CircularProgress\n} from '@mui/material';\nimport { FaPlus } from 'react-icons/fa';\nimport { toast } from 'react-toastify';\nimport { \n  useTagCategories, \n  useCreateTagCategory,\n  useUpdateTagCategory,\n  useDeleteTagCategory,\n  TagCategory as QueryTagCategory\n} from '../../hooks/query-hooks';\nimport type { NewTagCategoryData } from '../../hooks/query-hooks'; // Import NewTagCategoryData\n\n// Lazy load subcomponents\nconst TagCategoryForm = lazy(() => import('./TagCategoryForm'));\nconst TagCategoryItem = lazy(() => import('./TagCategoryItem'));\nconst DeleteConfirmationDialog = lazy(() => import('./DeleteConfirmationDialog'));\n\n// Match the interface in TagCategoryForm.tsx\ninterface TagCategoryFormData {\n  name: string;\n  description: string;\n  tags: Array<{ id: string; name: string }>;\n}\n\n// Memoized initial form data\nconst initialFormData: TagCategoryFormData = {\n  name: '',\n  description: '',\n  tags: []\n};\n\n// Loading fallback component\nconst LoadingFallback = () => (\n  <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" p={2}>\n    <CircularProgress size={24} />\n  </Box>\n);\n\nconst TagCategoryManager: React.FC = () => {\n  // --- User Profile --- Fetch user profile to pass to hooks\n  const { data: userProfile } = useUserProfile(); // Assuming useUserProfile is available and imported\n\n  // Use TanStack Query hooks instead of Redux\n  const { \n    data: tagCategories = [],\n    isLoading,\n    isError,\n    error,\n    refetch\n  } = useTagCategories(userProfile); // Pass userProfile\n  \n  const { mutateAsync: createTagCategoryMutation, isPending: isCreatingCategory } = useCreateTagCategory(); // Use isPending\n  const { mutateAsync: updateTagCategoryMutation } = useUpdateTagCategory();\n  const { mutateAsync: deleteTagCategoryMutation } = useDeleteTagCategory();\n  \n  // State management with useRef for values that don't affect rendering\n  const operationInProgressRef = useRef<boolean>(false);\n  const isMountedRef = useRef<boolean>(true);\n  const toastShownRef = useRef<string[]>([]); // Changed from Set to array\n  \n  // Local state management\n  const [dialogState, setDialogState] = useState({\n    open: false,\n    deleteDialogOpen: false,\n    deleteTarget: null as string | null,\n    hardDelete: false,\n    editingCategory: null as QueryTagCategory | null,\n    creationAttempted: false\n  });\n  \n  // Use a separate state for form data to prevent re-renders of the entire component\n  const [formData, setFormData] = useState<TagCategoryFormData>(initialFormData);\n  \n  // Add a flag to disable component-level toasts\n  const [disableComponentToasts] = useState(true);\n  \n  // Function to show toast only if not already shown for this operation\n  const showToastOnce = useCallback((id: string, type: 'success' | 'error', message: string) => {\n    // Only show component toast if not disabled\n    if (!toastShownRef.current.includes(id)) { // Changed from Set.has to array includes\n      // Use standard toast API\n      toast[type](message);\n      \n      // Mark this toast as shown\n      toastShownRef.current.push(id); // Changed from Set.add to array push\n      \n      // Clean up old toast IDs periodically (every 100 operations)\n      if (toastShownRef.current.length > 100) {\n        toastShownRef.current = [id];\n      }\n    }\n  }, []);\n  \n  // Component cleanup on unmount\n  useEffect(() => {\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  \n  // Dialog handlers with optimized state updates\n  const handleOpen = useCallback((category: QueryTagCategory | null = null) => {\n    setDialogState(prev => ({\n      ...prev,\n      open: true,\n      editingCategory: category\n    }));\n    \n    if (category) {\n      setFormData({\n        name: category.name || '',\n        description: category.description || '',\n        tags: category.tags?.map(tag => ({\n          id: (tag as any)._id || (tag as any).id || '',\n          name: tag.name\n        })) || []\n      });\n    } else {\n      setFormData(initialFormData);\n    }\n  }, []);\n  \n  const handleClose = useCallback(() => {\n    setDialogState(prev => ({\n      ...prev,\n      open: false\n    }));\n  }, []);\n  \n  const handleDeleteClick = useCallback((id: string) => {\n    setDialogState(prev => ({\n      ...prev,\n      deleteDialogOpen: true,\n      deleteTarget: id,\n      hardDelete: false\n    }));\n  }, []);\n  \n  const handleCancelDelete = useCallback(() => {\n    setDialogState(prev => ({\n      ...prev,\n      deleteDialogOpen: false\n    }));\n  }, []);\n  \n  const handleHardDeleteChange = useCallback((checked: boolean) => {\n    setDialogState(prev => ({\n      ...prev,\n      hardDelete: checked\n    }));\n  }, []);\n  \n  const handleConfirmDelete = useCallback(async () => {\n    const { deleteTarget } = dialogState;\n    if (!deleteTarget || operationInProgressRef.current) return;\n\n    operationInProgressRef.current = true;\n    toast.info(\"Tag category deletion is temporarily disabled.\");\n\n    // Simulate operation and cleanup\n    setTimeout(() => {\n      if (isMountedRef.current) {\n        setDialogState(prev => ({\n          ...prev,\n          deleteDialogOpen: false,\n          deleteTarget: null,\n          hardDelete: false\n        }));\n        refetch(); // Refetch categories after simulated deletion\n        operationInProgressRef.current = false;\n      }\n    }, 500); \n\n  }, [dialogState, refetch, showToastOnce]); // Removed tagCategories and deleteTagCategoryMutation\n  \n  // Check if category name exists\n  const categoryNameExists = useCallback((name: string): boolean => {\n    return tagCategories.some(cat => \n      cat.name.toLowerCase() === name.toLowerCase()\n    );\n  }, [tagCategories]);\n  \n  // Handle form submission\n  const handleSubmit = useCallback(async (submittedFormData: TagCategoryFormData) => {\n    if (!submittedFormData.name.trim()) {\n      const errorId = `empty-name-error-${Date.now()}`;\n      showToastOnce(errorId, 'error', 'Category name is required');\n      return;\n    }\n    \n    if (operationInProgressRef.current || isCreatingCategory /* || isUpdatingCategory */) return; // Add loading checks\n\n    // operationInProgressRef.current = true; // Mutation hook handles its own loading state\n    // toast.info(\"Tag category creation/update is temporarily disabled.\"); // Remove this\n\n    const { editingCategory } = dialogState;\n    \n    try {\n      operationInProgressRef.current = true; // Still useful to prevent double-submit before mutation state updates\n\n      // Check for duplicate name\n      const exists = categoryNameExists(submittedFormData.name);\n      const isEditingSameName = editingCategory && \n        editingCategory.name.toLowerCase() === submittedFormData.name.toLowerCase();\n      \n      if (exists && (!editingCategory || !isEditingSameName)) {\n        const errorId = `duplicate-name-${submittedFormData.name}-${Date.now()}`;\n        showToastOnce(errorId, 'error', `Category \"${submittedFormData.name}\" already exists. Please choose a different name.`);\n        operationInProgressRef.current = false;\n        return;\n      }\n      \n      const categoryData: NewTagCategoryData = {\n        name: submittedFormData.name,\n        description: submittedFormData.description,\n        // Ensure tags are in the format { id: string, name: string } if your API expects that for creation\n        // Or adjust if it only needs an array of tag names or IDs.\n        // For now, assuming it matches TagCategoryFormData's structure.\n        tags: submittedFormData.tags.map(tag => ({ id: tag.id, name: tag.name })) \n      };\n\n      if (editingCategory) {\n        // TODO: Implement update logic using updateTagCategoryMutation\n        toast.info('Update functionality for tag categories is not yet implemented.');\n        operationInProgressRef.current = false; // Reset for now\n      } else {\n        // Create using TanStack Query mutation\n        await createTagCategoryMutation(categoryData, {\n          onSuccess: () => {\n            if (isMountedRef.current) {\n              handleClose();\n              // refetch(); // Invalidation in useCreateTagCategory handles this\n            }\n          },\n          // onError is handled by the useCreateTagCategory hook's toast\n        });\n      }\n    } catch (error: any) {\n      // This catch block might be redundant if the hook handles all errors with toasts\n      // However, keeping it for now for any local errors or direct throws\n      console.error('Error submitting tag category:', error);\n      const errorId = `submit-error-${Date.now()}`;\n      showToastOnce(errorId, 'error', `Failed to save category: ${error.message || 'Unknown error'}`);\n    } finally {\n      if (isMountedRef.current) {\n        // Only set to false if not handled by mutation states, or if you want to allow re-submission after a local error\n        // For now, let the mutation hook's pending state manage this more globally.\n        // operationInProgressRef.current = false;\n      }\n    }\n  }, [dialogState, showToastOnce, categoryNameExists, handleClose, refetch, createTagCategoryMutation, isCreatingCategory]); \n  \n  // Memoized derived state\n  const isEmpty = useMemo(() => \n    tagCategories.length === 0, \n    [tagCategories.length]\n  );\n  \n  const categoryNameToDelete = useMemo(() => \n    dialogState.deleteTarget ? \n      tagCategories.find(c => c._id === dialogState.deleteTarget)?.name || '' : \n      '', \n    [dialogState.deleteTarget, tagCategories]\n  );\n  \n  // Render loading state\n  if (isLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" padding={4}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n  \n  // Render error state\n  if (isError) {\n    return (\n      <Box sx={{ mt: 2, mb: 2 }}>\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error instanceof Error ? error.message : 'Failed to load tag categories'}\n        </Alert>\n        <Button variant=\"outlined\" onClick={() => refetch()}>\n          Try Again\n        </Button>\n      </Box>\n    );\n  }\n  \n  return (\n    <Box className=\"tag-category-manager\" sx={{ mt: 4 }}>\n      {/* Header with action buttons */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n        <Box>\n          <Typography variant=\"h5\">Tag Categories</Typography>\n        </Box>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<FaPlus />}\n          onClick={() => handleOpen()}\n          sx={{\n            minWidth: '160px',\n            height: '38px'\n          }}\n        >\n          Create Category\n        </Button>\n      </Box>\n      \n      {/* Warning for creation attempts with no visible results */}\n      {isEmpty && dialogState.creationAttempted && (\n        <Alert severity=\"warning\" sx={{ mb: 2 }}>\n          Category was created but isn't displaying. Try refreshing the page.\n        </Alert>\n      )}\n      \n      {/* Display tag categories or empty state */}\n      {isEmpty ? (\n        <Alert severity=\"info\">No tag categories found. Create one to get started.</Alert>\n      ) : (\n        <Paper elevation={2}>\n          <List>\n            {tagCategories.map((category, index) => (\n              <Suspense key={category._id} fallback={<LoadingFallback />}>\n                <TagCategoryItem \n                  category={category}\n                  index={index}\n                  totalCount={tagCategories.length}\n                  onEdit={() => handleOpen(category)}\n                  onDelete={() => handleDeleteClick(category._id)}\n                />\n              </Suspense>\n            ))}\n          </List>\n        </Paper>\n      )}\n      \n      {/* Conditionally render dialogs only when needed */}\n      {dialogState.open && (\n        <Suspense fallback={<LoadingFallback />}>\n          <TagCategoryForm\n            open={dialogState.open}\n            formData={formData}\n            setFormData={setFormData}\n            onClose={handleClose}\n            onSubmit={() => handleSubmit(formData)}\n            isEditing={!!dialogState.editingCategory}\n          />\n        </Suspense>\n      )}\n      \n      {dialogState.deleteDialogOpen && (\n        <Suspense fallback={<LoadingFallback />}>\n          <DeleteConfirmationDialog\n            open={dialogState.deleteDialogOpen}\n            onClose={handleCancelDelete}\n            onConfirm={handleConfirmDelete}\n            hardDelete={dialogState.hardDelete}\n            setHardDelete={handleHardDeleteChange}\n            categoryName={categoryNameToDelete}\n          />\n        </Suspense>\n      )}\n    </Box>\n  );\n};\n\nexport default React.memo(TagCategoryManager);\n","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/ThemeToggle/ThemeToggle.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/ThemeToggle/ThemeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/UserDisplay/UserAvatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/UserInvitation/InvitationForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1115,1118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1115,1118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1179,1182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1179,1182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1436,1439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1436,1439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2896,2899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2896,2899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Typography, \n  TextField, \n  Button, \n  FormControl,\n  FormHelperText,\n  InputLabel, \n  MenuItem, \n  Select,\n  Paper,\n  CircularProgress,\n  Collapse,\n  Alert,\n  IconButton\n} from '@mui/material';\nimport { Close as CloseIcon } from '@mui/icons-material';\nimport { useUserProfile, useSendInvitation, InvitationData } from '../../hooks/query-hooks';\n\ninterface InvitationFormProps {\n  onInvitationSent?: () => void;\n}\n\nconst InvitationForm: React.FC<InvitationFormProps> = ({ onInvitationSent }) => {\n  const { data: userProfile } = useUserProfile();\n  const { mutate: sendInvitationMutate, isPending: isLoadingInvitation, error: invitationErrorHook } = useSendInvitation();\n\n  const [formData, setFormData] = useState({\n    email: '',\n    firstName: '',\n    lastName: '',\n    role: 'user',\n    message: ''\n  });\n  \n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  \n  useEffect(() => {\n    if (invitationErrorHook) {\n      const message =\n        (invitationErrorHook as any).response?.data?.message ||\n        (invitationErrorHook as any).message ||\n        'Failed to send invitation. Please try again.';\n      setError(message);\n    } else {\n      setError(null);\n    }\n  }, [invitationErrorHook]);\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | any) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  const validateEmail = (email: string): boolean => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n  \n  const resetMessages = () => {\n    setError(null);\n    setSuccess(null);\n  };\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    resetMessages();\n    \n    if (!formData.email || !formData.firstName || !formData.lastName) {\n      setError('Email, first name, and last name are required');\n      return;\n    }\n    \n    if (!validateEmail(formData.email)) {\n      setError('Please enter a valid email address');\n      return;\n    }\n\n    if (!userProfile?._id) {\n      setError('Could not identify the current user. Please try logging in again.');\n      return;\n    }\n    \n    const invitationPayload: InvitationData = {\n      ...formData,\n      role: formData.role as InvitationData['role'],\n      invitedBy: userProfile._id\n    };\n    \n    sendInvitationMutate(invitationPayload, {\n      onSuccess: (data) => {\n        setSuccess(data.message || `Invitation sent to ${formData.email} successfully!`);\n        setFormData({\n          email: '',\n          firstName: '',\n          lastName: '',\n          role: 'user',\n          message: ''\n        });\n        if (onInvitationSent) {\n          onInvitationSent();\n        }\n      },\n      onError: (error: any) => {\n        console.error('Error sending invitation from component callback:', error);\n      }\n    });\n  };\n  \n  return (\n    <Paper elevation={3} sx={{ p: 3, mb: 3 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Invite New User\n      </Typography>\n      \n      <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n        Send an email invitation to a new user to join Omni's Media Library.\n      </Typography>\n      \n      <Collapse in={!!success}>\n        <Alert \n          severity=\"success\"\n          action={\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              size=\"small\"\n              onClick={() => setSuccess(null)}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n          sx={{ mb: 2 }}\n        >\n          {success}\n        </Alert>\n      </Collapse>\n      \n      <Collapse in={!!error}>\n        <Alert \n          severity=\"error\"\n          action={\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              size=\"small\"\n              onClick={() => setError(null)}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n          sx={{ mb: 2 }}\n        >\n          {error}\n        </Alert>\n      </Collapse>\n      \n      <Box component=\"form\" onSubmit={handleSubmit} noValidate>\n        <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\n          <TextField\n            name=\"firstName\"\n            label=\"First Name\"\n            value={formData.firstName}\n            onChange={handleChange}\n            fullWidth\n            required\n            autoFocus\n            autoComplete=\"given-name\"\n            disabled={isLoadingInvitation}\n          />\n          \n          <TextField\n            name=\"lastName\"\n            label=\"Last Name\"\n            value={formData.lastName}\n            onChange={handleChange}\n            fullWidth\n            required\n            autoComplete=\"family-name\"\n            disabled={isLoadingInvitation}\n          />\n        </Box>\n        <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\n        <TextField\n          name=\"email\"\n          label=\"Email Address\"\n          value={formData.email}\n          onChange={handleChange}\n          fullWidth\n          required\n          margin=\"normal\"\n          type=\"email\"\n          autoComplete=\"email\"\n          disabled={isLoadingInvitation}\n        />\n        \n        <FormControl fullWidth margin=\"normal\" disabled={isLoadingInvitation}>\n          <InputLabel id=\"role-label\">Role</InputLabel>\n          <Select\n            labelId=\"role-label\"\n            name=\"role\"\n            value={formData.role}\n            onChange={handleChange}\n            label=\"Role\"\n            disabled={isLoadingInvitation}\n          >\n            <MenuItem value=\"user\">User</MenuItem>\n            <MenuItem value=\"distributor\">Distributor</MenuItem>\n            <MenuItem value=\"admin\">Admin</MenuItem>\n          </Select>\n          <FormHelperText>\n            Select the role for the new user\n          </FormHelperText>\n        </FormControl>\n        </Box>\n        \n        <TextField\n          name=\"message\"\n          label=\"Personal Message (Optional)\"\n          value={formData.message}\n          onChange={handleChange}\n          fullWidth\n          margin=\"normal\"\n          multiline\n          rows={3}\n          placeholder=\"Add a personal message to include in the invitation email\"\n          disabled={isLoadingInvitation}\n        />\n        \n        <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            sx={{ minWidth: 120 }}\n            disabled={isLoadingInvitation}\n          >\n            {isLoadingInvitation ? <CircularProgress size={24} sx={{ color: 'white'}} /> : 'Send Invitation'}\n          </Button>\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default InvitationForm; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/UserInvitation/InvitationList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setPage' is assigned a value but never used.","line":56,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setRowsPerPage' is assigned a value but never used.","line":57,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2560,2563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2560,2563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3973,3976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3973,3976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":184,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5149,5152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5149,5152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6532,6535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6532,6535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":280,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":280,"endColumn":19}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Chip,\n  IconButton,\n  Button,\n  Tooltip,\n  CircularProgress,\n  Alert,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Container\n} from '@mui/material';\nimport {\n  Refresh as RefreshIcon,\n  Send as ResendIcon,\n  Delete as DeleteIcon,\n  DeleteForever as DeleteForeverIcon\n} from '@mui/icons-material';\nimport axios from 'axios';\nimport { API_BASE_URL } from '../../config/config';\nimport { formatDistance } from 'date-fns';\nimport './invitationList.scss'; // Import the new SCSS file\n\ninterface Invitation {\n  _id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  status: 'pending' | 'accepted' | 'expired' | 'cancelled';\n  expiresAt: string;\n  createdAt: string;\n  invitedBy: {\n    _id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n}\n\ninterface InvitationListProps {\n  refreshTrigger?: number;\n  onRefresh?: () => void;\n}\n\nconst InvitationList: React.FC<InvitationListProps> = ({ refreshTrigger, onRefresh }) => {\n  // State\n  const [invitations, setInvitations] = useState<Invitation[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [page, _setPage] = useState<number>(0);\n  const [rowsPerPage, _setRowsPerPage] = useState<number>(10);\n  const [invitationToCancel, setInvitationToCancel] = useState<Invitation | null>(null);\n  const [invitationToResend, setInvitationToResend] = useState<Invitation | null>(null);\n  const [actionLoading, setActionLoading] = useState<string | null>(null);\n  const [actionSuccess, setActionSuccess] = useState<string | null>(null);\n  const [invitationToDeletePermanently, setInvitationToDeletePermanently] = useState<Invitation | null>(null);\n  const [deletePermanentlyDialogOpen, setDeletePermanentlyDialogOpen] = useState<boolean>(false);\n  \n  // Load invitations\n  const fetchInvitations = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Get token\n      const token = localStorage.getItem('authToken');\n      \n      if (!token) {\n        setError('You must be logged in to view invitations');\n        setLoading(false);\n        return;\n      }\n      \n      // Fetch invitations\n      const response = await axios.get<Invitation[]>(`${API_BASE_URL}/api/invitations`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      \n      setInvitations(response.data);\n      \n    } catch (err: any) {\n      console.error('Error fetching invitations:', err);\n      \n      if (err.response?.data?.message) {\n        setError(err.response.data.message);\n      } else {\n        setError('An error occurred while fetching invitations');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Load on mount and when refreshTrigger changes\n  useEffect(() => {\n    fetchInvitations();\n  }, [refreshTrigger]);\n  \n  // Cancel invitation\n  const handleCancelInvitation = async () => {\n    if (!invitationToCancel) return;\n    \n    try {\n      setActionLoading(`cancel-${invitationToCancel._id}`);\n      \n      // Get token\n      const token = localStorage.getItem('authToken');\n      \n      if (!token) {\n        setError('You must be logged in to cancel invitations');\n        setActionLoading(null);\n        return;\n      }\n      \n      // Cancel invitation\n      await axios.delete(`${API_BASE_URL}/api/invitations/${invitationToCancel._id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      \n      // Update local state\n      setInvitations(prev => \n        prev.map(inv => \n          inv._id === invitationToCancel._id \n            ? { ...inv, status: 'cancelled' } \n            : inv\n        )\n      );\n      \n      setActionSuccess(`Invitation to ${invitationToCancel.email} has been cancelled`);\n      setInvitationToCancel(null);\n      \n    } catch (err: any) {\n      console.error('Error cancelling invitation:', err);\n      \n      if (err.response?.data?.message) {\n        setError(err.response.data.message);\n      } else {\n        setError('An error occurred while cancelling the invitation');\n      }\n    } finally {\n      setActionLoading(null);\n    }\n  };\n  \n  // Resend invitation\n  const handleResendInvitation = async () => {\n    if (!invitationToResend) return;\n    \n    try {\n      setActionLoading(`resend-${invitationToResend._id}`);\n      \n      // Get token\n      const token = localStorage.getItem('authToken');\n      \n      if (!token) {\n        setError('You must be logged in to resend invitations');\n        setActionLoading(null);\n        return;\n      }\n      \n      // Resend invitation\n      await axios.post(`${API_BASE_URL}/api/invitations/${invitationToResend._id}/resend`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      \n      // Update local state to refresh expiration date\n      fetchInvitations();\n      \n      setActionSuccess(`Invitation has been resent to ${invitationToResend.email}`);\n      setInvitationToResend(null);\n      \n    } catch (err: any) {\n      console.error('Error resending invitation:', err);\n      \n      if (err.response?.data?.message) {\n        setError(err.response.data.message);\n      } else {\n        setError('An error occurred while resending the invitation');\n      }\n    } finally {\n      setActionLoading(null);\n    }\n  };\n  \n  // --- New: Delete Permanently ---\n  const handleDeletePermanentlyClicked = (invitation: Invitation) => {\n    setInvitationToDeletePermanently(invitation);\n    setDeletePermanentlyDialogOpen(true);\n  };\n\n  const handleDeletePermanentlySubmit = async () => {\n    if (!invitationToDeletePermanently) return;\n\n    try {\n      setActionLoading(`delete-perm-${invitationToDeletePermanently._id}`);\n      const token = localStorage.getItem('authToken');\n      if (!token) {\n        setError('You must be logged in to delete invitations');\n        setActionLoading(null);\n        return;\n      }\n\n      await axios.delete(`${API_BASE_URL}/api/invitations/${invitationToDeletePermanently._id}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      setInvitations(prev => prev.filter(inv => inv._id !== invitationToDeletePermanently._id));\n      setActionSuccess(`Invitation to ${invitationToDeletePermanently.email} has been permanently deleted.`);\n      setInvitationToDeletePermanently(null);\n      setDeletePermanentlyDialogOpen(false);\n\n    } catch (err: any) {\n      console.error('Error permanently deleting invitation:', err);\n      setError(err.response?.data?.message || 'An error occurred while permanently deleting the invitation.');\n    } finally {\n      setActionLoading(null);\n    }\n  };\n  \n  // Handle refresh\n  const handleRefresh = () => {\n    fetchInvitations();\n    if (onRefresh) onRefresh();\n  };\n  \n  \n  // Render status chip\n  const renderStatusChip = (status: string) => {\n    let color: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' = 'default';\n    \n    switch (status) {\n      case 'pending':\n        color = 'info';\n        break;\n      case 'accepted':\n        color = 'success';\n        break;\n      case 'expired':\n        color = 'warning';\n        break;\n      case 'cancelled':\n        color = 'error';\n        break;\n    }\n    \n    return (\n      <Chip \n        label={status} \n        color={color} \n        size=\"small\"\n        sx={{ textTransform: 'capitalize' }}\n      />\n    );\n  };\n  \n  // Check if invitation is expired\n  const isExpired = (expiresAt: string) => {\n    return new Date(expiresAt) < new Date();\n  };\n  \n  // Format date\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    \n    // For expiration dates, show relative time\n    try {\n      return formatDistance(date, new Date(), { addSuffix: true });\n    } catch (error) {\n      return dateString;\n    }\n  };\n  \n  return (\n    <Container className=\"invitation-list-container\">\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\">\n          Invitations\n        </Typography>\n        \n        <Button \n          startIcon={<RefreshIcon />} \n          onClick={handleRefresh}\n          disabled={loading}\n        >\n          Refresh\n        </Button>\n      </Box>\n      \n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n      \n      {actionSuccess && (\n        <Alert \n          severity=\"success\" \n          sx={{ mb: 2 }}\n          onClose={() => setActionSuccess(null)}\n        >\n          {actionSuccess}\n        </Alert>\n      )}\n      \n      {loading ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n          <CircularProgress />\n        </Box>\n      ) : invitations.length === 0 ? (\n        <Alert severity=\"info\">\n          No invitations found. Use the form above to invite new users.\n        </Alert>\n      ) : (\n        <>\n          <div className=\"invitation-custom-list\">\n            {/* Header Row */}\n            <div className=\"invitation-list-header\">\n              <div className=\"invitation-header-cell\">Name</div>\n              <div className=\"invitation-header-cell\">Email</div>\n              <div className=\"invitation-header-cell\">Role</div>\n              <div className=\"invitation-header-cell\">Status</div>\n              <div className=\"invitation-header-cell\">Expires</div>\n              <div className=\"invitation-header-cell\">Created</div>\n              <div className=\"invitation-header-cell actions-header\">Actions</div>\n            </div>\n\n            {/* Data Rows */}\n            {invitations\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) // Pagination logic still applied here\n              .map((invitation, index) => (\n                <div \n                  className={`invitation-list-row ${index % 2 === 0 ? 'invitation-list-row--even' : 'invitation-list-row--odd'}`} \n                  key={invitation._id}\n                >\n                  <div className=\"invitation-data-cell\" data-label=\"Name\">\n                    {invitation.firstName} {invitation.lastName}\n                  </div>\n                  <div className=\"invitation-data-cell\" data-label=\"Email\">{invitation.email}</div>\n                  <div className=\"invitation-data-cell\" data-label=\"Role\" style={{ textTransform: 'capitalize' }}>\n                    {invitation.role}\n                  </div>\n                  <div className=\"invitation-data-cell\" data-label=\"Status\">\n                    {invitation.status === 'pending' && isExpired(invitation.expiresAt)\n                      ? renderStatusChip('expired')\n                      : renderStatusChip(invitation.status)}\n                  </div>\n                  <div className=\"invitation-data-cell\" data-label=\"Expires\">\n                    {formatDate(invitation.expiresAt)}\n                  </div>\n                  <div className=\"invitation-data-cell\" data-label=\"Created\">\n                    {formatDate(invitation.createdAt)}\n                  </div>\n                  <div className=\"invitation-data-cell invitation-actions-cell\" data-label=\"Actions\">\n                    {invitation.status === 'pending' && !isExpired(invitation.expiresAt) && (\n                      <>\n                        <Tooltip title=\"Cancel Invitation\">\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => setInvitationToCancel(invitation)}\n                            disabled={!!actionLoading}\n                            color=\"warning\"\n                            className=\"action-button cancel-button\"\n                          >\n                            <DeleteIcon fontSize=\"small\" />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Resend Invitation\">\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => setInvitationToResend(invitation)}\n                            disabled={!!actionLoading}\n                            color=\"primary\"\n                            className=\"action-button resend-button\"\n                          >\n                            <ResendIcon fontSize=\"small\" />\n                          </IconButton>\n                        </Tooltip>\n                      </>\n                    )}\n                    {invitation.status === 'cancelled' && (\n                      <Tooltip title=\"Delete Permanently\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => handleDeletePermanentlyClicked(invitation)}\n                          disabled={!!actionLoading}\n                          color=\"error\"\n                          className=\"action-button delete-permanently-button\"\n                        >\n                          <DeleteForeverIcon fontSize=\"small\" />\n                        </IconButton>\n                      </Tooltip>\n                    )}\n                    {/* Placeholder for other statuses if needed */}\n                  </div>\n                </div>\n              ))}\n          </div>\n          \n          {/* \n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25]}\n            component=\"div\"\n            count={invitations.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          /> \n          */}\n        </>\n      )}\n      \n      {/* Cancel Confirmation Dialog */}\n      <Dialog\n        open={!!invitationToCancel}\n        onClose={() => setInvitationToCancel(null)}\n      >\n        <DialogTitle>Cancel Invitation</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to cancel the invitation sent to{' '}\n            <strong>{invitationToCancel?.email}</strong>?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setInvitationToCancel(null)}>No, Keep It</Button>\n          <Button onClick={handleCancelInvitation} color=\"error\" autoFocus>\n            Yes, Cancel Invitation\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      {/* Resend Confirmation Dialog */}\n      <Dialog\n        open={!!invitationToResend}\n        onClose={() => setInvitationToResend(null)}\n      >\n        <DialogTitle>Resend Invitation</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Do you want to resend the invitation to{' '}\n            <strong>{invitationToResend?.email}</strong>?\n          </DialogContentText>\n          <DialogContentText sx={{ mt: 2 }}>\n            This will send a new email and extend the expiration date.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setInvitationToResend(null)}>Cancel</Button>\n          <Button onClick={handleResendInvitation} color=\"primary\" autoFocus>\n            Resend Invitation\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* --- New: Confirmation Dialog for Permanent Deletion --- */}\n      <Dialog open={deletePermanentlyDialogOpen} onClose={() => setDeletePermanentlyDialogOpen(false)}>\n        <DialogTitle>Confirm Permanent Delete</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to permanently delete the invitation for {' '}\n            <strong>{invitationToDeletePermanently?.email}</strong>? \n            This action cannot be undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeletePermanentlyDialogOpen(false)} color=\"inherit\" disabled={!!actionLoading}>\n            Cancel\n          </Button>\n          <Button \n            onClick={handleDeletePermanentlySubmit} \n            color=\"error\" \n            variant=\"contained\"\n            disabled={!!actionLoading}\n            startIcon={actionLoading === `delete-perm-${invitationToDeletePermanently?._id}` ? <CircularProgress size={16} color=\"inherit\" /> : null}\n          >\n            {actionLoading === `delete-perm-${invitationToDeletePermanently?._id}` ? 'Deleting...' : 'Delete Permanently'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default InvitationList; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/VideoThumbnailSelector/MediaDetailThumbnailSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[693,696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[693,696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[943,946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[943,946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_e' is defined but never used.","line":94,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":28},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'isSliding'. Either include it or remove the dependency array.","line":119,"column":6,"nodeType":"ArrayExpression","endLine":119,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [isSliding, videoUrl]","fix":{"range":[3503,3513],"text":"[isSliding, videoUrl]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":270,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":270,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect, useMemo } from 'react';\nimport {\n  Box,\n  Slider,\n  IconButton,\n  Typography,\n  Button,\n  CircularProgress,\n  Alert,\n  Fade\n} from '@mui/material';\nimport {\n  PlayArrow,\n  Pause,\n  PhotoCamera,\n  ErrorOutline,\n  CheckCircle,\n  AccessTime,\n  ArrowForward,\n  FastForward,\n  FastRewind,\n  Replay\n} from '@mui/icons-material';\nimport './VideoThumbnailSelector.scss';\nimport axios from 'axios';\nimport env from '../../config/env';\nimport { toast } from 'react-toastify';\n\ninterface MediaDetailThumbnailSelectorProps {\n  videoUrl: string;\n  mediaId: string;\n  currentThumbnail?: string;\n  onThumbnailUpdate: (thumbnailUrl: string) => void;\n  mediaData?: any; // Optional complete media data from parent\n  onClose?: () => void; // Optional close handler for dialog mode\n}\n\ninterface ThumbnailResponse {\n  success?: boolean;\n  message?: string;\n  timestamp?: string;\n  thumbnailUrl?: string;\n  mediaFile?: any;\n}\n\nconst MediaDetailThumbnailSelector: React.FC<MediaDetailThumbnailSelectorProps> = ({\n  videoUrl,\n  mediaId,\n  currentThumbnail,\n  onThumbnailUpdate,\n}) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isSliding, setIsSliding] = useState(false);\n  const [seekTime, setSeekTime] = useState<number | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [refreshKey, setRefreshKey] = useState<string | number>(0);\n  const [isVideoLoading, setIsVideoLoading] = useState(true);\n  const [videoError, setVideoError] = useState<string | null>(null);\n  const [thumbnailUpdated, setThumbnailUpdated] = useState(false);\n  const [showSuccessIndicator, setShowSuccessIndicator] = useState(false);\n  const [processingProgress, setProcessingProgress] = useState(0);\n  const [oldThumbnail, setOldThumbnail] = useState<string | null>(null);\n  const [showOverlay, setShowOverlay] = useState(false);\n\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    video.src = videoUrl;\n    setIsVideoLoading(true);\n    setVideoError(null);\n\n    const handleLoadedMetadata = () => {\n      setDuration(video.duration);\n      setIsVideoLoading(false);\n      video.currentTime = 0;\n    };\n\n    const handleTimeUpdate = () => {\n      if (!isSliding) {\n        setCurrentTime(video.currentTime);\n      }\n    };\n\n    const handleSeeked = () => {\n      setCurrentTime(video.currentTime);\n      video.pause();\n      setIsPlaying(false);\n    };\n\n    const handleError = (_e: Event) => {\n      setVideoError('Failed to load video. Please check the URL and your connection.');\n      setIsVideoLoading(false);\n    };\n\n    const handleLoadStart = () => {\n      setIsVideoLoading(true);\n    };\n\n    video.addEventListener('loadedmetadata', handleLoadedMetadata);\n    video.addEventListener('timeupdate', handleTimeUpdate);\n    video.addEventListener('seeked', handleSeeked);\n    video.addEventListener('error', handleError);\n    video.addEventListener('loadstart', handleLoadStart);\n\n    video.load();\n\n    return () => {\n      video.removeEventListener('loadedmetadata', handleLoadedMetadata);\n      video.removeEventListener('timeupdate', handleTimeUpdate);\n      video.removeEventListener('seeked', handleSeeked);\n      video.removeEventListener('error', handleError);\n      video.removeEventListener('loadstart', handleLoadStart);\n      video.src = '';\n    };\n  }, [videoUrl]);\n\n  useEffect(() => {\n    if (seekTime !== null && videoRef.current) {\n      videoRef.current.currentTime = seekTime;\n    }\n  }, [seekTime]);\n\n  const togglePlay = () => {\n    if (videoRef.current) {\n      if (isPlaying) {\n        videoRef.current.pause();\n      } else {\n        try {\n          const playPromise = videoRef.current.play();\n          if (playPromise !== undefined) {\n            playPromise.catch(error => {\n              setVideoError(`Error playing video: ${error.message}`);\n            });\n          }\n        } catch (error) {\n          setVideoError(`Error playing video: ${error instanceof Error ? error.message : String(error)}`);\n        }\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const handleSliderChange = (_event: Event, newValue: number | number[]) => {\n    const time = newValue as number;\n    setCurrentTime(time);\n    setSeekTime(time);\n  };\n\n  const handleSliderDragStart = () => {\n    setIsSliding(true);\n    if (isPlaying) {\n      videoRef.current?.pause();\n      setIsPlaying(false);\n    }\n  };\n\n  const handleSliderDragEnd = () => {\n    setIsSliding(false);\n    if (videoRef.current) {\n      videoRef.current.currentTime = currentTime;\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const h = Math.floor(seconds / 3600);\n    const m = Math.floor((seconds % 3600) / 60);\n    const s = Math.floor(seconds % 60);\n    return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;\n  };\n\n  const handleStepForward = () => {\n    if (videoRef.current) {\n      const newTime = Math.min(currentTime + 1, duration);\n      videoRef.current.currentTime = newTime;\n      setCurrentTime(newTime);\n    }\n  };\n\n  const handleStepBackward = () => {\n    if (videoRef.current) {\n      const newTime = Math.max(currentTime - 1, 0);\n      videoRef.current.currentTime = newTime;\n      setCurrentTime(newTime);\n    }\n  };\n\n  const resetToStart = () => {\n    if (videoRef.current) {\n      videoRef.current.currentTime = 0;\n      setCurrentTime(0);\n      videoRef.current.pause();\n      setIsPlaying(false);\n    }\n  };\n\n  const simulateProgress = () => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 15;\n      if (progress > 100) {\n        progress = 100;\n        clearInterval(interval);\n      }\n      setProcessingProgress(progress);\n    }, 200);\n\n    return () => clearInterval(interval);\n  };\n\n  const sendTimestampToServer = async (timestamp: string) => {\n    try {\n      // Save the old thumbnail URL to potentially show a comparison\n      if (currentThumbnail) {\n        setOldThumbnail(currentThumbnail);\n      }\n      \n      setIsProcessing(true);\n      setThumbnailUpdated(false);\n      setShowOverlay(false);\n      \n      // Start progress simulation\n      const stopProgressSimulation = simulateProgress();\n      \n      const response = await axios.post<ThumbnailResponse>(\n        `${env.BASE_URL}/api/media/update/timestamp-thumbnail/${mediaId}`,\n        { timestamp },\n        { \n          withCredentials: true,\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          }\n        }\n      );\n      \n      // Stop progress simulation\n      stopProgressSimulation();\n      setProcessingProgress(100);\n      \n      if (response.data.success && response.data.thumbnailUrl) {\n        const originalS3Url = response.data.thumbnailUrl;\n        \n        const timeValue = Date.now();\n        const uniqueId = `${timeValue}`;\n        \n        setRefreshKey(uniqueId);\n        setThumbnailUpdated(true);\n        \n        // Notify parent component about the update\n        onThumbnailUpdate(originalS3Url);\n        \n        // Show success indicator\n        setShowSuccessIndicator(true);\n        setTimeout(() => setShowSuccessIndicator(false), 3000);\n        \n        // Reset video to beginning and show overlay\n        resetToStart();\n        setTimeout(() => {\n          setShowOverlay(true);\n        }, 300);\n        \n        // Toast notification is now handled by parent component\n      } else {\n        toast.error('Failed to update thumbnail: No URL returned');\n      }\n    } catch (error) {\n      toast.error('Error updating thumbnail');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleCaptureThumbnail = () => {\n    const timestamp = formatTime(currentTime);\n    sendTimestampToServer(timestamp);\n  };\n\n  const handleHideOverlay = () => {\n    setShowOverlay(false);\n  };\n\n  const displayThumbnailUrl = useMemo(() => {\n    if (!currentThumbnail) return undefined;\n    \n    // If already a proxied URL, just use it directly\n    if (currentThumbnail.includes('/thumbnail-proxy/')) {\n      return currentThumbnail;\n    }\n    \n    // Extract base URL without query parameters\n    const baseUrl = currentThumbnail.split('?')[0];\n    \n    // Create a timestamp that changes only when refreshKey changes\n    // This prevents multiple requests during renders\n    const uniqueId = `${refreshKey}`;\n    \n    return `${baseUrl}?nocache=${uniqueId}`;\n  }, [currentThumbnail, refreshKey]);\n\n  const retryVideoLoad = () => {\n    if (videoRef.current) {\n      setVideoError(null);\n      setIsVideoLoading(true);\n      videoRef.current.load();\n    }\n  };\n\n  return (\n    <Box\n      className=\"video-thumbnail-selector media-detail-mode\"\n      key={refreshKey}\n    >\n      <Box className=\"video-container\">\n        {videoError && (\n          <Box className=\"video-error\">\n            <Alert\n              severity=\"error\"\n              icon={<ErrorOutline />}\n              action={\n                <Button color=\"inherit\" size=\"small\" onClick={retryVideoLoad}>\n                  Retry\n                </Button>\n              }\n            >\n              {videoError}\n            </Alert>\n          </Box>\n        )}\n\n        {isVideoLoading && !videoError && (\n          <Box className=\"video-loading\">\n            <CircularProgress size={40} />\n            <Typography variant=\"body2\" sx={{ mt: 2 }}>\n              Loading video...\n            </Typography>\n          </Box>\n        )}\n\n        <video\n          ref={videoRef}\n          style={{\n            width: \"100%\",\n            maxHeight: \"300px\",\n            display: videoError ? \"none\" : \"block\",\n          }}\n          playsInline\n          onPlay={() => setIsPlaying(true)}\n          onPause={() => setIsPlaying(false)}\n        />\n        \n        {showOverlay && displayThumbnailUrl && (\n          <Box \n            className=\"thumbnail-overlay\"\n            onClick={handleHideOverlay}\n            sx={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              cursor: 'pointer',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n              backgroundColor: 'rgba(0, 0, 0, 0.5)',\n              zIndex: 10,\n            }}\n          >\n            <img \n              src={displayThumbnailUrl}\n              alt=\"New thumbnail\"\n              style={{\n                maxWidth: '80%',\n                maxHeight: '70%',\n                objectFit: 'contain',\n                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',\n                border: '2px solid white',\n                borderRadius: '4px',\n              }}\n            />\n            <Typography \n              variant=\"body2\" \n              sx={{ \n                color: 'white', \n                mt: 2, \n                backgroundColor: 'rgba(0, 0, 0, 0.7)',\n                px: 2,\n                py: 0.5,\n                borderRadius: '4px',\n                display: 'flex',\n                alignItems: 'center',\n              }}\n            >\n              <CheckCircle fontSize=\"small\" sx={{ mr: 1, color: '#4caf50' }} />\n              New thumbnail set - Click to dismiss\n            </Typography>\n          </Box>\n        )}\n      </Box>\n\n      <Box className=\"controls\">\n        <IconButton\n          onClick={togglePlay}\n          disabled={!!videoError || isVideoLoading}\n        >\n          {isPlaying ? <Pause /> : <PlayArrow />}\n        </IconButton>\n\n        <IconButton\n          onClick={handleStepBackward}\n          disabled={!!videoError || isVideoLoading || currentTime <= 0}\n        >\n          <FastRewind fontSize=\"small\" />\n        </IconButton>\n\n        <Box sx={{ flex: 1, mx: 2 }}>\n          <Slider\n            value={currentTime}\n            max={duration || 100}\n            onChange={handleSliderChange}\n            onMouseDown={handleSliderDragStart}\n            onMouseUp={handleSliderDragEnd}\n            onTouchStart={handleSliderDragStart}\n            onTouchEnd={handleSliderDragEnd}\n            aria-label=\"Video progress\"\n            disabled={!!videoError || isVideoLoading}\n          />\n          <Box sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            <Typography variant=\"caption\">{formatTime(currentTime)}</Typography>\n            <Typography variant=\"caption\">{formatTime(duration)}</Typography>\n          </Box>\n        </Box>\n\n        <IconButton\n          onClick={handleStepForward}\n          disabled={!!videoError || isVideoLoading || currentTime >= duration}\n        >\n          <FastForward fontSize=\"small\" />\n        </IconButton>\n        \n        <IconButton\n          onClick={resetToStart}\n          disabled={!!videoError || isVideoLoading}\n          sx={{ mr: 1 }}\n          title=\"Return to start\"\n        >\n          <Replay fontSize=\"small\" />\n        </IconButton>\n\n        <Button\n          variant=\"contained\"\n          startIcon={\n            isProcessing ? (\n              <CircularProgress size={16} color=\"inherit\" />\n            ) : (\n              <PhotoCamera />\n            )\n          }\n          onClick={handleCaptureThumbnail}\n          disabled={isProcessing || !!videoError || isVideoLoading}\n        >\n          {isProcessing\n            ? `Processing ${Math.round(processingProgress)}%`\n            : \"Set Thumbnail\"}\n        </Button>\n      </Box>\n\n      {displayThumbnailUrl && (\n        <div className=\"video-footer-container\">\n          <Box className=\"current-thumbnail\">\n            <Box className=\"thumbnail-wrapper\">\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Current Thumbnail\n              </Typography>\n              <img\n                key={`thumbnail-${refreshKey}`}\n                src={displayThumbnailUrl}\n                alt=\"Video thumbnail\"\n                style={{\n                  maxWidth: \"160px\",\n                  borderRadius: \"4px\",\n                  transition: \"border 0.3s ease-in-out\",\n                }}\n                className={thumbnailUpdated ? \"thumbnail-updated\" : \"\"}\n                onError={(e) => {\n                  const img = e.target as HTMLImageElement;\n                  const baseUrl = img.src.split(\"?\")[0];\n\n                  const retryTimestamp = Date.now();\n                  const randomId = Math.random().toString(36).substring(2, 8);\n                  img.src = `${baseUrl}?reload=${retryTimestamp}&r=${randomId}`;\n                }}\n              />\n              {isProcessing && (\n                <Box\n                  sx={{\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n                    borderRadius: \"4px\",\n                  }}\n                >\n                  <CircularProgress\n                    size={40}\n                    variant=\"determinate\"\n                    value={processingProgress}\n                    color=\"primary\"\n                    sx={{ color: \"white\" }}\n                  />\n                </Box>\n              )}\n              <Fade in={showSuccessIndicator}>\n                <Box\n                  className={`success-indicator ${\n                    showSuccessIndicator ? \"visible\" : \"\"\n                  }`}\n                >\n                  <CheckCircle fontSize=\"small\" />\n                </Box>\n              </Fade>\n            </Box>\n\n            {oldThumbnail && thumbnailUpdated && (\n              <Fade in={thumbnailUpdated}>\n                <Box className=\"thumbnail_old_new\">\n                  <Box className=\"thumbnail-timestamp\">\n                    <AccessTime fontSize=\"small\" />\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      {formatTime(currentTime)}\n                    </Typography>\n                  </Box>\n                  <Box\n                    sx={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      mt: 2,\n                      opacity: 0.7,\n                    }}\n                  >\n                    {/* Use a stable URL for the old thumbnail to avoid multiple requests */}\n                    <img\n                      src={oldThumbnail.includes('?') ? oldThumbnail : `${oldThumbnail}?v=old`}\n                      alt=\"Previous thumbnail\"\n                      style={{\n                        width: \"60px\",\n                        marginRight: \"8px\",\n                        border: \"1px solid #ddd\",\n                        borderRadius: \"2px\",\n                        opacity: 0.7,\n                      }}\n                    />\n                    <ArrowForward\n                      sx={{ mx: 1, fontSize: 16, color: \"text.secondary\" }}\n                    />\n                    {/* Use the same displayThumbnailUrl for consistency */}\n                    <img\n                      src={displayThumbnailUrl}\n                      alt=\"New thumbnail\"\n                      style={{\n                        width: \"60px\",\n                        border: \"1px solid var(--accent-color)\",\n                        borderRadius: \"2px\",\n                      }}\n                    />\n                  </Box>\n                </Box>\n              </Fade>\n            )}\n          </Box>\n        </div>\n      )}\n    </Box>\n  );\n};\n\nexport default MediaDetailThumbnailSelector; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/VideoThumbnailSelector/UploadThumbnailSelector.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'isSliding'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [isSliding, videoUrl]","fix":{"range":[2083,2093],"text":"[isSliding, videoUrl]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport {\n  Box,\n  Slider,\n  IconButton,\n  Typography,\n  Button,\n} from '@mui/material';\nimport {\n  PlayArrow,\n  Pause,\n  PhotoCamera\n} from '@mui/icons-material';\nimport './VideoThumbnailSelector.scss';\n\ninterface UploadThumbnailSelectorProps {\n  videoUrl: string;\n  onThumbnailSelect: (timestamp: string) => void;\n  currentThumbnail?: string;\n}\n\nconst UploadThumbnailSelector: React.FC<UploadThumbnailSelectorProps> = ({\n  videoUrl,\n  onThumbnailSelect,\n  currentThumbnail\n}) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isSliding, setIsSliding] = useState(false);\n  const [seekTime, setSeekTime] = useState<number | null>(null);\n\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    const handleLoadedMetadata = () => {\n      console.log('Video metadata loaded, duration:', video.duration);\n      setDuration(video.duration);\n      // Ensure video is ready for frame display\n      video.currentTime = 0;\n    };\n\n    const handleTimeUpdate = () => {\n      if (!isSliding) {\n        setCurrentTime(video.currentTime);\n      }\n    };\n\n    const handleSeeked = () => {\n      console.log('Video seeked to:', video.currentTime);\n      // Update current time after seeking\n      setCurrentTime(video.currentTime);\n      // Pause the video after seeking to maintain frame\n      video.pause();\n      setIsPlaying(false);\n    };\n\n    video.addEventListener('loadedmetadata', handleLoadedMetadata);\n    video.addEventListener('timeupdate', handleTimeUpdate);\n    video.addEventListener('seeked', handleSeeked);\n\n    // Load the video\n    video.src = videoUrl;\n    video.load();\n\n    return () => {\n      video.removeEventListener('loadedmetadata', handleLoadedMetadata);\n      video.removeEventListener('timeupdate', handleTimeUpdate);\n      video.removeEventListener('seeked', handleSeeked);\n      video.src = '';\n    };\n  }, [videoUrl]);\n\n  useEffect(() => {\n    // Handle seeking when seekTime changes\n    if (seekTime !== null && videoRef.current) {\n      videoRef.current.currentTime = seekTime;\n    }\n  }, [seekTime]);\n\n  const togglePlay = () => {\n    if (videoRef.current) {\n      if (isPlaying) {\n        videoRef.current.pause();\n      } else {\n        videoRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const handleSliderChange = (_event: Event, newValue: number | number[]) => {\n    const time = newValue as number;\n    setCurrentTime(time);\n    setSeekTime(time);\n  };\n\n  const handleSliderDragStart = () => {\n    setIsSliding(true);\n    if (isPlaying) {\n      videoRef.current?.pause();\n      setIsPlaying(false);\n    }\n  };\n\n  const handleSliderDragEnd = () => {\n    setIsSliding(false);\n    // Ensure we maintain the current frame\n    if (videoRef.current) {\n      videoRef.current.currentTime = currentTime;\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const h = Math.floor(seconds / 3600);\n    const m = Math.floor((seconds % 3600) / 60);\n    const s = Math.floor(seconds % 60);\n    return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;\n  };\n\n  const handleCaptureThumbnail = () => {\n    if (!videoRef.current) return;\n    \n    const video = videoRef.current;\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    \n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    ctx?.drawImage(video, 0, 0, canvas.width, canvas.height);\n    \n    console.log('Capturing thumbnail at time:', currentTime);\n    onThumbnailSelect(formatTime(currentTime));\n  };\n\n  return (\n    <Box className=\"video-thumbnail-selector upload-mode\">\n      <Box className=\"video-container\">\n        <video\n          ref={videoRef}\n          style={{ width: '100%', maxHeight: '300px' }}\n          playsInline\n          onPlay={() => setIsPlaying(true)}\n          onPause={() => setIsPlaying(false)}\n        />\n      </Box>\n\n      <Box className=\"controls\">\n        <IconButton onClick={togglePlay}>\n          {isPlaying ? <Pause /> : <PlayArrow />}\n        </IconButton>\n\n        <Box sx={{ flex: 1, mx: 2 }}>\n          <Slider\n            value={currentTime}\n            max={duration}\n            onChange={handleSliderChange}\n            onMouseDown={handleSliderDragStart}\n            onMouseUp={handleSliderDragEnd}\n            onTouchStart={handleSliderDragStart}\n            onTouchEnd={handleSliderDragEnd}\n            aria-label=\"Video progress\"\n          />\n          <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n            <Typography variant=\"caption\">\n              {formatTime(currentTime)}\n            </Typography>\n            <Typography variant=\"caption\">\n              {formatTime(duration)}\n            </Typography>\n          </Box>\n        </Box>\n\n        <Button\n          variant=\"contained\"\n          startIcon={<PhotoCamera />}\n          onClick={handleCaptureThumbnail}\n        >\n          Set Thumbnail\n        </Button>\n      </Box>\n\n      {currentThumbnail && (\n        <Box className=\"current-thumbnail\">\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Current Thumbnail\n          </Typography>\n          <img\n            src={currentThumbnail}\n            alt=\"Video thumbnail\"\n            style={{ maxWidth: '160px', borderRadius: '4px' }}\n          />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default UploadThumbnailSelector; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/ViewModeToggle/ViewModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/config/config.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/config/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/config/env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/config/mediaInfoConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/hooks/query-hooks.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2189,2192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2189,2192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2216,2219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2216,2219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":103,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":106,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2497,2500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2497,2500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3077,3080],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3077,3080],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3123,3126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3123,3126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3738,3741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3738,3741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":300,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10113,10116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10113,10116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":508,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":508,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16198,16201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16198,16201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'oldFormatError' is defined but never used.","line":528,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":528,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":528,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":528,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17001,17004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17001,17004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":574,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":574,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18782,18785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18782,18785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":597,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":597,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19870,19873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19870,19873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":656,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":656,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22344,22347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22344,22347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":699,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":699,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23834,23837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23834,23837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":728,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":728,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24731,24734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24731,24734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":737,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":737,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25043,25046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25043,25046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":766,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":766,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26233,26236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26233,26236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":814,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":814,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27610,27613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27610,27613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":889,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":889,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30704,30707],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30704,30707],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":914,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":914,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31558,31561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31558,31561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":939,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":939,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32357,32360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32357,32360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":964,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":964,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33215,33218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33215,33218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":989,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":989,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34082,34085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34082,34085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1003,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1003,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34693,34696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34693,34696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1125,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1125,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38736,38739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38736,38739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1131,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1131,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38917,38920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38917,38920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1148,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1148,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39354,39357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39354,39357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1154,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1154,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39551,39554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39551,39554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1175,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1175,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40067,40070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40067,40070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1181,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1181,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40246,40249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40246,40249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1236,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1236,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41960,41963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41960,41963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1242,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1242,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42155,42158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42155,42158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1256,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1256,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42528,42531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42528,42531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1256,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1256,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42542,42545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42542,42545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1262,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1262,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42739,42742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42739,42742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1273,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1273,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43031,43034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43031,43034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1273,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1273,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43045,43048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43045,43048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1279,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1279,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43243,43246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43243,43246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1290,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1290,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43581,43584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43581,43584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1290,"column":110,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1290,"endColumn":113,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43597,43600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43597,43600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1296,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1296,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43794,43797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43794,43797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1321,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1321,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[44522,44525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[44522,44525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1327,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1327,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[44721,44724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[44721,44724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_userProfile' is defined but never used.","line":1369,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":1369,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_data' is defined but never used.","line":1374,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1374,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1378,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1378,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[46297,46300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[46297,46300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_userProfile' is defined but never used.","line":1385,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":1385,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1394,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1394,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[46820,46823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[46820,46823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_userProfile' is defined but never used.","line":1401,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":1401,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1410,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1410,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47347,47350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47347,47350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_userProfile' is defined but never used.","line":1417,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":1417,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1426,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1426,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47877,47880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47877,47880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_userProfile' is defined but never used.","line":1443,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":1443,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1449,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1449,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[48649,48652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[48649,48652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1472,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1472,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[49525,49528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[49525,49528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1472,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1472,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[49559,49562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[49559,49562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1473,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1473,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[49629,49632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[49629,49632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1535,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1535,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[52103,52106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[52103,52106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1652,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1652,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[56721,56724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[56721,56724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1674,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1674,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[57888,57891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[57888,57891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1785,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1785,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[63297,63300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[63297,63300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1893,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1893,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[66945,66948],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[66945,66948],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1934,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1934,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[68544,68547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[68544,68547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2004,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2004,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[70868,70871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[70868,70871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2049,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2049,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[72220,72223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[72220,72223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2162,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2162,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[76646,76649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[76646,76649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2232,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2232,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[79587,79590],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[79587,79590],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2250,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2250,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[80326,80329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[80326,80329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2268,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2268,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[81045,81048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[81045,81048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2306,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2306,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[82416,82419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[82416,82419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":70,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useMutation, useQueryClient, UseQueryOptions, QueryKey } from '@tanstack/react-query';\nimport axios from 'axios';\nimport env from '../config/env';\nimport { toast } from 'react-toastify';\n\n// ======================\n// === Query Keys ===\n// ======================\nexport const QueryKeys = {\n  media: 'media',\n  mediaTypes: 'mediaTypes',\n  mediaDetail: 'mediaDetail',\n  activityLogs: 'activityLogs',\n  userActivities: 'userActivities',\n  databaseStats: 'databaseStats',\n  mediaTypeUsage: 'mediaTypeUsage',\n  notificationSettings: 'notificationSettings',\n  eligibleRecipients: 'eligibleRecipients',\n  // Tags and Tag Categories\n  tags: 'tags',\n  tagCategories: 'tagCategories',\n  tagCategoryById: (id: string) => ['tagCategories', 'id', id],\n  // New more specific query keys for better caching control\n  allMedia: ['media', 'all'],\n  mediaById: (id: string) => ['media', 'id', id],\n  mediaBySlug: (slug: string) => ['media', 'slug', slug],\n  mediaByType: (typeId: string) => ['media', 'type', typeId],\n  // User-related query keys\n  userProfile: ['userProfile'] as const,\n  allUsers: ['allUsers'] as const,\n  userById: (userId: string) => ['user', userId] as const, // Adjusted query key pattern\n  mediaByUserId: (userId: string) => ['media', 'user', userId] as const, // New query key\n  // Auth-related query keys (primarily for mutations, less for direct caching)\n  login: ['auth', 'login'] as const,\n  register: ['auth', 'register'] as const,\n  pendingMediaReviews: ['media', 'pendingReview'] as const, // New query key for admin pending reviews\n};\n\n// ======================\n// === Types ===\n// ======================\nexport interface MediaFile {\n  _id: string;\n  id?: string;\n  title?: string;\n  slug: string; // Changed to required\n  location: string;\n  fileExtension?: string;\n  mediaType?: string;\n  modifiedDate: string;\n  fileSize: number;\n  approvalStatus?: 'pending' | 'approved' | 'rejected' | 'needs_revision'; // Added\n  approvalFeedback?: string; // Added\n  metadata?: {\n    fileName?: string;\n    tags?: string[]; // Changed from any[]\n    v_thumbnail?: string; // Added explicitly\n    v_thumbnailTimestamp?: number; // Added explicitly\n    [key: string]: any;\n  };\n  [key: string]: any;\n}\n\nexport interface MediaType {\n  _id: string;\n  name: string;\n  description: string; // Assuming description is always present, if not, make it optional\n  catColor: string;\n  fields?: Array<{ name: string; type: string; options?: string[]; required?: boolean; [key: string]: any; }>; // Added from schema\n  acceptedFileTypes?: string[]; // Added from schema\n  status?: 'active' | 'deprecated' | 'archived'; // Added from schema\n  usageCount?: number; // Added from schema\n  replacedBy?: string | null; // Assuming ObjectId ref is stringified or null\n  isDeleting?: boolean; // Added from schema\n  baseType?: 'BaseImage' | 'BaseVideo' | 'BaseAudio' | 'BaseDocument' | 'Media'; // Added from schema\n  includeBaseFields?: boolean; // Added from schema\n  defaultTags?: string[]; // Added from schema\n  settings?: { allowRelatedMedia?: boolean; [key: string]: any; }; // Added from schema\n  [key: string]: any;\n}\n\n// Tags and Tag Categories interfaces\nexport interface Tag {\n  _id: string;\n  name: string;\n}\n\nexport interface TagCategory {\n  _id: string;\n  name: string;\n  description?: string;\n  tags?: Array<{\n    id: string;\n    name: string;\n  }>;\n  isActive: boolean;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\n// Add User type\nexport interface User {\n  _id: string;\n  id?: string;\n  username: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  avatar?: string;\n  role: 'user' | 'admin' | 'distributor' | 'superAdmin';\n  createdAt?: string;\n  updatedAt?: string;\n  token?: string;\n  profile?: any;\n}\n\n// Auth-related types\nexport interface UserLoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface UserRegistrationData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  username: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n  refreshToken: string;\n  user: User; // Use the existing User type\n  message?: string;\n}\n\n// For registration, the API might only return a message without user/token\nexport interface RegistrationResponse {\n  message: string;\n  // Optionally, if the API returns user data or other fields on register:\n  // user?: User; \n  // token?: string; // etc.\n}\n\n// Add a type for the data expected by addMediaFile\nexport interface NewMediaData {\n  // Define based on what your backend expects for a new media item\n  // This is a placeholder; adjust as needed.\n  title: string;\n  file: File; // Assuming a file object is part of the upload\n  mediaType?: string;\n  tags?: string[];\n  // Any other relevant fields\n}\n\n// Type for the data sent to create a tag category\nexport interface NewTagCategoryData {\n  name: string;\n  description?: string;\n  tags?: Array<{ id: string; name: string }>; // Match TagCategoryFormData in TagCategoryManager\n}\n\n// Type for invitation data\nexport interface InvitationData {\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: 'user' | 'admin' | 'distributor' | 'superAdmin'; // Or more specific roles\n  message?: string;\n  invitedBy: string; // User ID of the inviter\n}\n\n// Type for invitation response\nexport interface InvitationResponse {\n  message: string;\n  // Include other fields if your API returns more data upon sending an invitation\n  // For example: invitationId?: string;\n}\n\n// ======================\n// === API Functions ===\n// ======================\n\n// -- Media --\nexport const fetchMedia = async (): Promise<MediaFile[]> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const response = await axios.get<MediaFile[]>(`${env.BASE_URL}/api/media/all`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  \n  // Log in development only\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`Fetched ${response.data.length} media items`);\n    if (response.data.length > 0) {\n      console.log('%%%%% RAW MEDIA ITEM SAMPLE (fetchMedia) %%%%%', JSON.stringify(response.data[0], null, 2));\n      console.log('%%%%% TYPEOF RAW fileSize (fetchMedia) %%%%%', typeof response.data[0].fileSize);\n    }\n  }\n  \n  // Process the data to ensure consistent formatting\n  return response.data.map(media => {\n    const processedMedia: MediaFile = {\n      ...media, // Spread first to get all existing fields\n      _id: media._id, // Ensure _id is present\n      // Explicitly use the fileSize from the API, fallback to 0 if not a number or missing\n      fileSize: typeof media.fileSize === 'number' ? media.fileSize : 0,\n      // Use the original modifiedDate if it's a valid string, otherwise fallback\n      modifiedDate: typeof media.modifiedDate === 'string' && media.modifiedDate.length > 0 \n                      ? media.modifiedDate \n                      : new Date().toISOString(),\n      // Ensure metadata exists\n      metadata: media.metadata || {},\n    };\n    \n    // Add cache parameter to video thumbnails to prevent browser caching\n    if (processedMedia.metadata?.v_thumbnail) {\n      const uniqueId = processedMedia._id || processedMedia.id || '';\n      const separator = processedMedia.metadata.v_thumbnail.includes('?') ? '&' : '?';\n      processedMedia.metadata.v_thumbnail = `${processedMedia.metadata.v_thumbnail}${separator}mediaId=${uniqueId}`;\n    }\n    \n    return processedMedia;\n  });\n};\n\n// Enhanced function to fetch media by type\nexport const fetchMediaByType = async (typeId: string): Promise<MediaFile[]> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  if (typeId === 'All') {\n    return fetchMedia(); // This will use the updated fetchMedia logic\n  }\n  \n  const response = await axios.get<MediaFile[]>(`${env.BASE_URL}/api/media/byType/${typeId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  \n  if (process.env.NODE_ENV === 'development') {\n    console.log(`Fetched ${response.data.length} media items for type ${typeId}`);\n    if (response.data.length > 0) {\n      console.log('%%%%% RAW MEDIA ITEM SAMPLE (fetchMediaByType) %%%%%', JSON.stringify(response.data[0], null, 2));\n      console.log('%%%%% TYPEOF RAW fileSize (fetchMediaByType) %%%%%', typeof response.data[0].fileSize);\n    }\n  }\n  \n  // Process the data like in fetchMedia\n  return response.data.map(media => {\n    const processedMedia: MediaFile = {\n      ...media, // Spread first\n      _id: media._id,\n      fileSize: typeof media.fileSize === 'number' ? media.fileSize : 0,\n      modifiedDate: typeof media.modifiedDate === 'string' && media.modifiedDate.length > 0 \n                      ? media.modifiedDate \n                      : new Date().toISOString(),\n      metadata: media.metadata?.v_thumbnail ? {\n        ...(media.metadata || {}),\n        v_thumbnail: `${media.metadata.v_thumbnail}${media.metadata.v_thumbnail.includes('?') ? '&' : '?'}mediaId=${media._id || media.id || ''}`\n      } : (media.metadata || {}),\n    };\n    return processedMedia;\n  });\n};\n\ninterface DeleteMediaResponse {\n  message: string;\n  deletedId: string;\n  // Include other fields if your backend sends more\n}\n\nexport const deleteMediaItem = async ({ mediaId, options }: { mediaId: string, options?: { silent?: boolean } }): Promise<DeleteMediaResponse> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    // Avoid direct toast here if we want full control via options.silent\n    // The onError in useMutation is a better place for user-facing errors.\n    throw new Error('Authentication token missing'); \n  }\n  try {\n    const response = await axios.delete<DeleteMediaResponse>(`${env.BASE_URL}/api/media/delete/${mediaId}`, {\n    headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    // Only show toast if not silent\n    if (!options?.silent) {\n      toast.success(response.data.message || `Media item ${mediaId} deleted successfully.`);\n    }\n    return response.data;\n  } catch (error: any) {\n    console.error('Error deleting media item:', error);\n    // Only show toast if not silent, or always show errors?\n    // For now, let's assume errors should always be shown unless explicitly silenced for errors too.\n    // If a silent option should also suppress error toasts, that logic would be added here.\n    if (!options?.silent) { // Optional: make error toasts also respect silent flag\n      toast.error(`Error deleting media ${mediaId}: ${error.response?.data?.message || error.message}`);\n    }\n    throw error;\n  }\n};\n\n// -- Media Types --\nexport const fetchMediaTypes = async (): Promise<MediaType[]> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const response = await axios.get<MediaType[]>(`${env.BASE_URL}/api/media-types`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  \n  // Log in development only\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`Fetched ${response.data.length} media types`);\n  }\n  \n  return response.data;\n};\n\n// New function to fetch media types with usage counts\nexport const fetchMediaTypesWithUsageCounts = async (): Promise<MediaType[]> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  // Add timestamp to prevent caching\n  const timestamp = new Date().getTime();\n  const response = await axios.get<MediaType[]>(\n    `${env.BASE_URL}/api/media-types/with-usage-counts?_t=${timestamp}`,\n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      }\n    }\n  );\n  \n  if (process.env.NODE_ENV === 'development') {\n    console.log(`Fetched ${response.data.length} media types with usage counts`);\n  }\n  \n  // Process the response data to ensure consistent structure\n  return response.data.map(mediaType => ({\n    ...mediaType,\n    usageCount: mediaType.usageCount || 0,\n    status: mediaType.status || 'active',\n    replacedBy: mediaType.replacedBy || null,\n    isDeleting: mediaType.isDeleting || false\n  }));\n};\n\n// Function to check a specific media type's usage\nexport const checkMediaTypeUsage = async (id: string): Promise<{ id: string, count: number }> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  // Add timestamp to URL to force fresh response\n  const timestamp = new Date().getTime();\n  const response = await axios.get<{ count: number }>(\n    `${env.BASE_URL}/api/media-types/${id}/usage?_t=${timestamp}`,\n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      }\n    }\n  );\n  \n  return { id, count: response.data.count };\n};\n\n// Function to create a new media type\nexport const createMediaType = async (mediaTypeData: Partial<MediaType>): Promise<MediaType> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const response = await axios.post<MediaType>(\n    `${env.BASE_URL}/api/media-types`,\n    mediaTypeData,\n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    }\n  );\n  \n  return response.data;\n};\n\n// Function to update a media type\nexport const updateMediaType = async ({ id, updates }: { id: string, updates: Partial<MediaType> }): Promise<MediaType> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const response = await axios.put<MediaType>(\n    `${env.BASE_URL}/api/media-types/${id}`,\n    updates,\n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    }\n  );\n  \n  return response.data;\n};\n\n// Function to delete a media type\nexport const deleteMediaType = async (id: string): Promise<string> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  await axios.delete(`${env.BASE_URL}/api/media-types/${id}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  \n  return id;\n};\n\n// Function to archive a media type\nexport const archiveMediaType = async (id: string): Promise<MediaType> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const response = await axios.put<MediaType>(\n    `${env.BASE_URL}/api/media-types/${id}/archive`,\n    {},\n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    }\n  );\n  \n  return response.data;\n};\n\n// Function to deprecate a media type\nexport const deprecateMediaType = async (id: string): Promise<MediaType> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const response = await axios.put<MediaType>(\n    `${env.BASE_URL}/api/media-types/${id}/deprecate`,\n    {},\n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    }\n  );\n  \n  return response.data;\n};\n\n// -- Media Detail --\nexport const fetchMediaBySlug = async (slug: string | undefined): Promise<MediaFile> => {\n  if (!slug) throw new Error('Slug is undefined, cannot fetch media by slug.');\n\n  const token = localStorage.getItem('authToken');\n  // No token check here, assuming public accessibility for direct slug links or specific auth handling elsewhere\n\n  try {\n    const response = await axios.get<MediaFile>(`${env.BASE_URL}/api/media/slug/${slug}`);\n    \n    // Log in development only\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`Fetched media details for slug: ${slug}`);\n    }\n    \n    return response.data;\n  } catch (error: any) {\n    // If we get a 404 for the slug, try to extract a potential ID from the slug\n    if (error.response && error.response.status === 404) {\n      // First try the old endpoint pattern as fallback\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`Slug endpoint failed. Trying original format: ${env.BASE_URL}/media/${slug}`);\n      }\n      \n      try {\n        const oldFormatResponse = await axios.get<MediaFile>(`${env.BASE_URL}/media/${slug}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        \n        if (process.env.NODE_ENV === 'development') {\n          console.log(`Successfully fetched media with original format endpoint`);\n        }\n        \n        return oldFormatResponse.data;\n      } catch (oldFormatError: any) {\n        // Continue to ID extraction if old format also fails\n        if (process.env.NODE_ENV === 'development') {\n          console.log(`Original format endpoint also failed. Trying ID extraction.`);\n        }\n      }\n      \n      // Try to extract ID pattern (UUID format) from the slug\n      const idMatch = slug.match(/([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})/i);\n      \n      if (idMatch && idMatch[1]) {\n        const extractedId = idMatch[1];\n        \n        if (process.env.NODE_ENV === 'development') {\n          console.log(`Slug not found. Trying with extracted ID: ${extractedId}`);\n        }\n        \n        try {\n          // Try fetching by ID instead - try different API paths\n          // First try the API endpoint pattern\n          const apiEndpoints = [\n            `${env.BASE_URL}/api/media/id/${extractedId}`, \n            `${env.BASE_URL}/media/id/${extractedId}`,\n            `${env.BASE_URL}/api/media/${extractedId}`,\n            `${env.BASE_URL}/media/by-id/${extractedId}`,\n            `${env.BASE_URL}/media/${extractedId}`\n          ];\n          \n          let idResponse = null;\n          let successEndpoint = '';\n          \n          // Try each endpoint until one works\n          for (const endpoint of apiEndpoints) {\n            try {\n              if (process.env.NODE_ENV === 'development') {\n                console.log(`Trying endpoint: ${endpoint}`);\n              }\n              \n              idResponse = await axios.get<MediaFile>(endpoint, {\n                headers: {\n                  Authorization: `Bearer ${token}`\n                }\n              });\n              \n              successEndpoint = endpoint;\n              break; // Exit the loop if successful\n            } catch (endpointError: any) {\n              // Log the failed endpoint attempt with status code if available\n              if (process.env.NODE_ENV === 'development') {\n                const status = endpointError.response?.status;\n                console.log(`Endpoint ${endpoint} failed: ${status ? `Status ${status}` : endpointError.message}`);\n              }\n              // Continue to next endpoint\n            }\n          }\n          \n          if (idResponse) {\n            if (process.env.NODE_ENV === 'development') {\n              console.log(`Successfully fetched media using ID fallback: ${extractedId} with endpoint ${successEndpoint}`);\n            }\n            \n            return idResponse.data;\n          } else {\n            // Log that all endpoints were tried and failed\n            if (process.env.NODE_ENV === 'development') {\n              console.error(`All ID fallback endpoints failed for ID: ${extractedId}`);\n            }\n            throw new Error(`Media not found: The file with ID \"${extractedId}\" could not be found on the server.`);\n          }\n        } catch (idError: any) {\n          // Handle errors from the ID-based request\n          if (idError.response) {\n            const { status } = idError.response;\n            \n            if (status === 500) {\n              console.error('Server error fetching media by ID:', idError.response.data);\n              throw new Error(`Server error: The media file could not be loaded. The server may be having issues with this specific media.`);\n            } else if (status === 404) {\n              throw new Error(`Media not found: The file with ID \"${extractedId}\" does not exist or has been deleted.`);\n            } else if (status === 403) {\n              throw new Error('Access denied: You do not have permission to view this media.');\n            }\n          }\n          \n          // If no specific error was handled, throw a more detailed error\n          throw new Error(`Failed to fetch media with ID ${extractedId}: ${idError.message}`);\n        }\n      } else {\n        // No UUID pattern found in the slug, so we can't try the ID fallback\n        throw new Error(`Media not found: The file with slug \"${slug}\" does not exist or has been deleted.`);\n      }\n    }\n    \n    // Handle specific status codes from the original slug request\n    if (error.response) {\n      const { status } = error.response;\n      \n      if (status === 500) {\n        console.error('Server error fetching media:', error.response.data);\n        throw new Error(`Server error: The media file could not be loaded. The server may be having issues with this specific media.`);\n      } else if (status === 404) {\n        throw new Error(`Media not found: The file with slug \"${slug}\" does not exist or has been deleted.`);\n      } else if (status === 403) {\n        throw new Error('Access denied: You do not have permission to view this media.');\n      }\n    }\n    \n    // Re-throw the original error if not handled above\n    throw error;\n  }\n};\n\nexport const updateMediaItem = async (mediaData: Partial<MediaFile> & { changedFields?: string[] }): Promise<MediaFile> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const mediaId = mediaData._id || '';\n  const mediaSlug = mediaData.slug || '';\n  \n  if (!mediaId && !mediaSlug) {\n    throw new Error('Missing media ID or slug');\n  }\n  \n  // Prepare the update payload - only include what's necessary\n  const updatePayload: {\n    title?: string;\n    metadata?: Record<string, any>;\n    changedFields?: string[];\n  } = {};\n  \n  // Only include title if it's in changedFields\n  if (mediaData.changedFields?.includes('title') && mediaData.title !== undefined) {\n    updatePayload.title = mediaData.title;\n  }\n  \n  // If metadata changed, pass the fully constructed metadata object from mediaData\n  // (which was prepared by MediaDetail.tsx's handleSave)\n  if (mediaData.metadata && mediaData.changedFields?.some(f => f.startsWith('metadata.'))) {\n    updatePayload.metadata = mediaData.metadata;\n  }\n  \n  // Include changed fields if provided - this is needed for the server to know what changed\n  if (mediaData.changedFields && mediaData.changedFields.length > 0) {\n    updatePayload.changedFields = mediaData.changedFields;\n    \n    // Log what we're about to send\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Sending update with changed fields:', updatePayload.changedFields);\n      console.log('Update payload:', JSON.stringify(updatePayload, null, 2));\n    }\n  }\n  \n  let response;\n  \n  // Try the ID endpoint first\n  try {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Trying to update media using ID endpoint for:', mediaId);\n    }\n    response = await axios.put<MediaFile>(\n      `${env.BASE_URL}/api/media/update-by-id/${mediaId}`,\n      updatePayload,\n      { \n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n  } catch (error: any) {\n    // If ID endpoint fails with 404, try the slug endpoint\n    if (error.response && error.response.status === 404 && mediaSlug) {\n      if (process.env.NODE_ENV === 'development') {\n        console.log('ID endpoint failed, trying slug endpoint for:', mediaSlug);\n      }\n      response = await axios.put<MediaFile>(\n        `${env.BASE_URL}/api/media/update/${mediaSlug}`,\n        updatePayload,\n        { \n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n    } else {\n      // Re-throw the error if it's not a 404 or we don't have a slug\n      throw error;\n    }\n  }\n  \n  return response.data;\n};\n\n// API Health Check\nexport const checkApiHealth = async (): Promise<{ status: string }> => {\n  try {\n    // Try using the media-types endpoint which is more likely to exist\n    await axios.get<any>(`${env.BASE_URL}/api/media-types`, {\n      timeout: 5000, // 5 second timeout for health check\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('authToken') || ''}`\n      }\n    });\n    \n    // If we got a response, the API is working\n    return { status: 'online' };\n  } catch (error: any) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      \n      // If we get a 401/403, the API is working but we're not authorized\n      if (error.response.status === 401 || error.response.status === 403) {\n        return { status: 'online (auth required)' };\n      }\n      \n      throw new Error(`API responded with status: ${error.response.status}`);\n    } else if (error.request) {\n      // The request was made but no response was received\n      throw new Error('API server is not responding');\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      throw new Error(`API request setup error: ${error.message}`);\n    }\n  }\n};\n\n// API function to add/upload a new media item - REMOVED as MediaUploader handles the upload directly.\n// export const addMediaFile = async (mediaData: FormData): Promise<MediaFile> => { ... };\n\n// ======================\n// === React Query Hooks ===\n// ======================\n\n// Define a custom options type that includes onSuccess\ntype CustomQueryOptions<TData, TError> = Omit<UseQueryOptions<TData, TError, TData, any>, 'queryKey' | 'queryFn'> & {\n  onSuccess?: (data: TData) => void;\n};\n\n// Extended MediaFile type for useTransformedMedia output\nexport type TransformedMediaFile = MediaFile & {\n  displayTitle: string;\n  thumbnailUrl?: string;\n  // id field is added for DataGrid compatibility if not present\n  id: string; \n};\n\n// -- Media --\nexport const useMedia = (options?: CustomQueryOptions<MediaFile[], Error>) => {\n  const queryClient = useQueryClient();\n  \n  // Use custom onSuccess callback outside the options\n  const onSuccessCallback = (data: MediaFile[]) => {\n    // Cache individual media items for faster detail page loading\n    data.forEach((media: MediaFile) => {\n      queryClient.setQueryData(\n        QueryKeys.mediaById(media._id),\n        media\n      );\n      if (media.slug) {\n        queryClient.setQueryData(\n          QueryKeys.mediaBySlug(media.slug),\n          media\n        );\n      }\n    });\n    \n    // Call original onSuccess if it exists\n    if (options?.onSuccess) {\n      options.onSuccess(data);\n    }\n  };\n  \n  // Create a new options object with our custom callbacks\n  const queryOptions = {\n    queryKey: QueryKeys.allMedia,\n    queryFn: fetchMedia,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    refetchOnWindowFocus: false,\n    ...options,\n    onSuccess: onSuccessCallback\n  };\n  \n  return useQuery<MediaFile[], Error, MediaFile[]>(queryOptions as any); // Cast to any to avoid linter error\n};\n\nexport const useDeleteMedia = () => {\n  const queryClient = useQueryClient();\n  // Variables type for the mutation is now { mediaId: string, options?: { silent?: boolean } }\n  return useMutation<DeleteMediaResponse, Error, { mediaId: string, options?: { silent?: boolean } }> ({\n    mutationFn: deleteMediaItem, // deleteMediaItem now expects an object\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch media queries\n      queryClient.invalidateQueries({ queryKey: QueryKeys.allMedia });\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.media, 'type'] });\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.media, 'pendingReview']});\n      // Use variables.mediaId for invalidation\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.media, 'user', variables.mediaId]}); \n      \n      queryClient.removeQueries({ queryKey: QueryKeys.mediaById(variables.mediaId) });\n      queryClient.removeQueries({ queryKey: QueryKeys.mediaBySlug(variables.mediaId) });\n\n      // Only show toast if not silent\n      if (!variables.options?.silent) {\n        toast.success(data.message || `Media item ${variables.mediaId} deleted successfully.`);\n      }\n    },\n    onError: (error: Error, variables) => {\n      // Only show toast if not silent, or always show errors?\n      // For now, let's assume errors should always be shown unless explicitly silenced for errors too.\n      // If a silent option should also suppress error toasts, that logic would be added here.\n      if (!variables.options?.silent) { // Optional: make error toasts also respect silent flag\n        toast.error(`Error deleting media ${variables.mediaId}: ${error.message}`);\n      }\n    },\n  });\n};\n\n// -- Media Types --\nexport const useMediaTypes = () => {\n  return useQuery({\n    queryKey: [QueryKeys.mediaTypes],\n    queryFn: fetchMediaTypes,\n    staleTime: 10 * 60 * 1000, // 10 minutes\n  });\n};\n\n// New hook to get media types with usage counts\nexport const useMediaTypesWithUsageCounts = (userProfile: User | null | undefined) => {\n  return useQuery({\n    queryKey: [QueryKeys.mediaTypes, 'withUsageCounts'],\n    queryFn: fetchMediaTypesWithUsageCounts,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    enabled: !!userProfile && (userProfile.role === 'admin' || userProfile.role === 'superAdmin')\n  });\n};\n\n// Hook to check a specific media type's usage\nexport const useCheckMediaTypeUsage = (id: string) => {\n  return useQuery({\n    queryKey: [QueryKeys.mediaTypeUsage, id],\n    queryFn: () => checkMediaTypeUsage(id),\n    staleTime: 1 * 60 * 1000, // 1 minute\n    enabled: !!id // Only run if id is provided\n  });\n};\n\n// Hook to create a new media type\nexport const useCreateMediaType = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: createMediaType,\n    onSuccess: () => {\n      // Invalidate all media types queries to trigger refetch\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.mediaTypes] });\n      toast.success('Media type created successfully');\n    },\n    onError: (error: any) => {\n      const message = error.response?.data?.message || 'Error creating media type';\n      toast.error(message);\n    }\n  });\n};\n\n// Hook to update a media type\nexport const useUpdateMediaType = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: updateMediaType,\n    onSuccess: (updatedMediaType) => {\n      // Invalidate all media types queries to trigger refetch\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.mediaTypes] });\n      \n      // Optionally update the cache directly\n      queryClient.setQueryData<MediaType[]>([QueryKeys.mediaTypes], (oldData) => {\n        if (!oldData) return [];\n        return oldData.map(item => item._id === updatedMediaType._id ? updatedMediaType : item);\n      });\n      \n      toast.success('Media type updated successfully');\n    },\n    onError: (error: any) => {\n      const message = error.response?.data?.message || 'Error updating media type';\n      toast.error(message);\n    }\n  });\n};\n\n// Hook to delete a media type\nexport const useDeleteMediaType = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: deleteMediaType,\n    onSuccess: (id) => {\n      // Invalidate all media types queries to trigger refetch\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.mediaTypes] });\n      \n      // Optionally update the cache directly\n      queryClient.setQueryData<MediaType[]>([QueryKeys.mediaTypes], (oldData) => {\n        if (!oldData) return [];\n        return oldData.filter(item => item._id !== id);\n      });\n      \n      toast.success('Media type deleted successfully');\n    },\n    onError: (error: any) => {\n      const message = error.response?.data?.message || 'Error deleting media type';\n      toast.error(message);\n    }\n  });\n};\n\n// Hook to archive a media type\nexport const useArchiveMediaType = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: archiveMediaType,\n    onSuccess: (updatedMediaType) => {\n      // Invalidate all media types queries to trigger refetch\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.mediaTypes] });\n      \n      // Optionally update the cache directly\n      queryClient.setQueryData<MediaType[]>([QueryKeys.mediaTypes], (oldData) => {\n        if (!oldData) return [];\n        return oldData.map(item => item._id === updatedMediaType._id ? updatedMediaType : item);\n      });\n      \n      toast.success('Media type archived successfully');\n    },\n    onError: (error: any) => {\n      const message = error.response?.data?.message || 'Error archiving media type';\n      toast.error(message);\n    }\n  });\n};\n\n// Hook to deprecate a media type\nexport const useDeprecateMediaType = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: deprecateMediaType,\n    onSuccess: (updatedMediaType) => {\n      // Invalidate all media types queries to trigger refetch\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.mediaTypes] });\n      \n      // Optionally update the cache directly\n      queryClient.setQueryData<MediaType[]>([QueryKeys.mediaTypes], (oldData) => {\n        if (!oldData) return [];\n        return oldData.map(item => item._id === updatedMediaType._id ? updatedMediaType : item);\n      });\n      \n      toast.success('Media type deprecated successfully');\n    },\n    onError: (error: any) => {\n      const message = error.response?.data?.message || 'Error deprecating media type';\n      toast.error(message);\n    }\n  });\n};\n\n// -- Media Detail --\nexport const useMediaDetail = (userProfile: User | null | undefined, slug: string | undefined) => {\n  return useQuery<MediaFile>({\n    queryKey: slug ? (slug.includes('-') ? QueryKeys.mediaBySlug(slug) : QueryKeys.mediaById(slug)) : ['media', 'unknown'],\n    queryFn: () => fetchMediaBySlug(slug),\n    enabled: !!userProfile && !!slug, // Check for userProfile and slug\n    staleTime: 1000 * 60 * 10, // 10 minutes\n    retry: (failureCount, error: any) => {\n      // Don't retry if we get a 404 (not found)\n      if (error.response?.status === 404) return false;\n      // Only retry other errors a limited number of times\n      return failureCount < 2;\n    }\n  });\n};\n\nexport const useUpdateMedia = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: updateMediaItem,\n    onMutate: async (updatedMedia) => {\n      const mediaId = updatedMedia._id;\n      if (!mediaId) return { previousMedia: null };\n      \n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: QueryKeys.mediaById(mediaId) });\n      \n      // Snapshot the previous media\n      const previousMedia = queryClient.getQueryData<MediaFile>(QueryKeys.mediaById(mediaId));\n      \n      // Optimistically update the cache\n      queryClient.setQueryData<MediaFile>(QueryKeys.mediaById(mediaId), old => {\n        if (!old) return updatedMedia as MediaFile;\n        \n        // Create a merged version with old and new data\n        return {\n          ...old,\n          ...updatedMedia,\n          // For nested metadata, merge properly\n          metadata: {\n            ...old.metadata,\n            ...(updatedMedia.metadata || {})\n          }\n        };\n      });\n      \n      // If we have the media in the all media list, update it there too\n      queryClient.setQueryData<MediaFile[]>(QueryKeys.allMedia, old => {\n        if (!old) return [];\n        \n        // Make sure we're returning a properly typed array\n        return old.map(item => {\n          if (item._id === mediaId) {\n            const updated = {\n              ...item,\n              ...updatedMedia,\n              metadata: {\n                ...item.metadata,\n                ...(updatedMedia.metadata || {})\n              }\n            };\n            // Ensure the item is properly typed as MediaFile\n            return updated as MediaFile;\n          }\n          return item;\n        });\n      });\n      \n      return { previousMedia };\n    },\n    onError: (_err, variables, context) => {\n      // If the mutation fails, revert the optimistic update\n      if (context?.previousMedia && variables._id) {\n        queryClient.setQueryData(QueryKeys.mediaById(variables._id), context.previousMedia);\n        \n        // Also revert in the all media list\n        queryClient.setQueryData<MediaFile[]>(QueryKeys.allMedia, old => {\n          if (!old) return [];\n          \n          // Ensure we're returning a properly typed array\n          return old.map(item => {\n            if (item._id === variables._id && context.previousMedia) {\n              return context.previousMedia as MediaFile;\n            }\n            return item;\n          });\n        });\n      }\n      \n      toast.error('Failed to update media');\n    },\n    onSuccess: (data) => {\n      // Update all relevant queries\n      queryClient.setQueryData(QueryKeys.mediaById(data._id), data);\n      if (data.slug) {\n        queryClient.setQueryData(QueryKeys.mediaBySlug(data.slug), data);\n      }\n      \n      // Invalidate affected queries to ensure consistency\n      queryClient.invalidateQueries({ queryKey: QueryKeys.allMedia });\n      queryClient.invalidateQueries({ queryKey: QueryKeys.mediaByType(data.mediaType || '') });\n      \n      // Log the data received after update, specifically the thumbnail\n      if (process.env.NODE_ENV === 'development') {\n        console.log('DEBUG: useUpdateMedia onSuccess - Data from server:', JSON.stringify(data, null, 2));\n        console.log('DEBUG: useUpdateMedia onSuccess - Thumbnail from server data:', data.metadata?.v_thumbnail);\n      }\n\n      toast.success('Media updated successfully');\n    }\n  });\n};\n\nexport const useApiHealth = () => {\n  return useQuery({\n    queryKey: ['apiHealth'],\n    queryFn: checkApiHealth,\n    retry: 2,\n    staleTime: 60 * 1000, // 1 minute\n    refetchOnWindowFocus: false\n  });\n};\n\n// =====================\n// === Admin Functions ===\n// =====================\n\n// -- Activity Logs --\nexport const fetchActivityLogs = async (limit = 20): Promise<any[]> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const response = await axios.get<{data: any[], success: boolean}>(`${env.BASE_URL}/api/admin/activity-logs`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    params: {\n      limit\n    }\n  });\n  \n  if (process.env.NODE_ENV === 'development') {\n    console.log(`Fetched ${response.data.data.length} activity logs`);\n  }\n  \n  return response.data.data;\n};\n\n// -- User Activities --\nexport const fetchUserActivities = async (page = 1, limit = 10): Promise<{data: any[], total: number}> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const response = await axios.get<{data: any[], total: number, success: boolean}>(`${env.BASE_URL}/api/admin/user-activities`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    params: {\n      page,\n      limit\n    }\n  });\n  \n  if (process.env.NODE_ENV === 'development') {\n    console.log(`Fetched ${response.data.data.length} user activities`);\n  }\n  \n  return {\n    data: response.data.data,\n    total: response.data.total || response.data.data.length\n  };\n};\n\n// -- Database Stats --\nexport const fetchDatabaseStats = async (): Promise<any> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const response = await axios.get<{data: any, success: boolean}>(`${env.BASE_URL}/api/admin/database-stats`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  \n  if (process.env.NODE_ENV === 'development') {\n    console.log(`Fetched database stats`);\n  }\n  \n  return response.data.data;\n};\n\n// =====================\n// === Admin Query Hooks ===\n// =====================\n\n// -- Activity Logs --\nexport const useActivityLogs = (userProfile: User | null | undefined, limit = 20) => {\n  return useQuery({\n    queryKey: [QueryKeys.activityLogs, limit],\n    queryFn: () => fetchActivityLogs(limit),\n    staleTime: 60 * 1000, // 1 minute\n    retry: 1,\n    enabled: !!userProfile && (userProfile.role === 'admin' || userProfile.role === 'superAdmin')\n  });\n};\n\n// -- User Activities --\nexport const useUserActivities = (userProfile: User | null | undefined, page = 1, limit = 10) => {\n  return useQuery({\n    queryKey: [QueryKeys.userActivities, page, limit],\n    queryFn: () => fetchUserActivities(page, limit),\n    staleTime: 60 * 1000, // 1 minute\n    placeholderData: (prev) => prev,\n    enabled: !!userProfile && (userProfile.role === 'admin' || userProfile.role === 'superAdmin')\n  });\n};\n\n// -- Database Stats --\nexport const useDatabaseStats = (userProfile: User | null | undefined) => {\n  return useQuery({\n    queryKey: [QueryKeys.databaseStats],\n    queryFn: fetchDatabaseStats,\n    staleTime: 2 * 60 * 1000, // 2 minutes\n    retry: 1,\n    enabled: !!userProfile && (userProfile.role === 'admin' || userProfile.role === 'superAdmin')\n  });\n};\n\n// =====================\n// === Notification Settings API Functions ===\n// =====================\n\n// Fetch notification settings\nexport const fetchNotificationSettings = async (): Promise<any> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n\n  const response = await axios.get<{success: boolean, data: any}>(`${env.BASE_URL}/api/admin/notification-settings`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  \n  if (process.env.NODE_ENV === 'development') {\n    console.log('Fetched notification settings:', response.data);\n  }\n  \n  return response.data.data;\n};\n\n// Update notification settings\nexport const updateNotificationSettings = async (settings: any): Promise<any> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const response = await axios.put<{success: boolean, data: any}>(`${env.BASE_URL}/api/admin/notification-settings`, settings, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n  \n  return response.data.data;\n};\n\n// Add a new notification rule\nexport const addNotificationRule = async (rule: any): Promise<any> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const response = await axios.post<{success: boolean, data: any}>(`${env.BASE_URL}/api/admin/notification-settings/rules`, rule, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n  \n  return response.data.data;\n};\n\n// Update a notification rule\nexport const updateNotificationRule = async ({ ruleId, updates }: { ruleId: string, updates: any }): Promise<any> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const response = await axios.put<{success: boolean, data: any}>(`${env.BASE_URL}/api/admin/notification-settings/rules/${ruleId}`, updates, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n  \n  return response.data.data;\n};\n\n// Delete a notification rule\nexport const deleteNotificationRule = async (ruleId: string): Promise<void> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  await axios.delete(`${env.BASE_URL}/api/admin/notification-settings/rules/${ruleId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n};\n\n// Get eligible recipients for notifications\nexport const fetchEligibleRecipients = async (): Promise<any[]> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  const response = await axios.get<{success: boolean, data: any[]}>(`${env.BASE_URL}/api/admin/notification-settings/eligible-recipients`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  \n  return response.data.data;\n};\n\n// Send a test notification\nexport const sendTestNotification = async (recipients?: string[]): Promise<void> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  \n  await axios.post(`${env.BASE_URL}/api/admin/notification-settings/test`, \n    { recipients },\n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    }\n  );\n};\n\n// =====================\n// === Notification Settings Query Hooks ===\n// =====================\n\n// Hook to fetch notification settings\nexport const useNotificationSettings = (userProfile: User | null | undefined) => {\n  return useQuery({\n    queryKey: [QueryKeys.notificationSettings],\n    queryFn: fetchNotificationSettings,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    enabled: !!userProfile && (userProfile.role === 'admin' || userProfile.role === 'superAdmin')\n  });\n};\n\n// Hook to update notification settings\nexport const useUpdateNotificationSettings = (_userProfile: User | null | undefined) => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: updateNotificationSettings,\n    onSuccess: (_data) => {\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.notificationSettings] });\n      toast.success('Notification settings updated successfully');\n    },\n    onError: (error: any) => {\n      toast.error(`Failed to update notification settings: ${error.message}`);\n    }\n  });\n};\n\n// Hook to add a notification rule\nexport const useAddNotificationRule = (_userProfile: User | null | undefined) => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: addNotificationRule,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.notificationSettings] });\n      toast.success('Notification rule added successfully');\n    },\n    onError: (error: any) => {\n      toast.error(`Failed to add notification rule: ${error.message}`);\n    }\n  });\n};\n\n// Hook to update a notification rule\nexport const useUpdateNotificationRule = (_userProfile: User | null | undefined) => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: updateNotificationRule,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.notificationSettings] });\n      toast.success('Notification rule updated successfully');\n    },\n    onError: (error: any) => {\n      toast.error(`Failed to update notification rule: ${error.message}`);\n    }\n  });\n};\n\n// Hook to delete a notification rule\nexport const useDeleteNotificationRule = (_userProfile: User | null | undefined) => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: deleteNotificationRule,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.notificationSettings] });\n      toast.success('Notification rule deleted successfully');\n    },\n    onError: (error: any) => {\n      toast.error(`Failed to delete notification rule: ${error.message}`);\n    }\n  });\n};\n\n// Hook to fetch eligible recipients\nexport const useEligibleRecipients = (_userProfile: User | null | undefined) => {\n  return useQuery({\n    queryKey: [QueryKeys.eligibleRecipients],\n    queryFn: fetchEligibleRecipients,\n    staleTime: 10 * 60 * 1000, // 10 minutes\n    enabled: !!_userProfile && (_userProfile.role === 'admin' || _userProfile.role === 'superAdmin')\n  });\n};\n\n// Hook to send a test notification\nexport const useSendTestNotification = (_userProfile: User | null | undefined) => {\n  return useMutation({\n    mutationFn: sendTestNotification,\n    onSuccess: () => {\n      toast.success('Test notification sent successfully');\n    },\n    onError: (error: any) => {\n      toast.error(`Failed to send test notification: ${error.message}`);\n    }\n  });\n};\n\n// ======================\n// === User Query Hooks ===\n// ======================\n\n// Drastically simplified useUserProfile: No options, internal handlers only for now.\nexport const useUserProfile = () => {\n  const queryClient = useQueryClient(); // Get query client\n  const hasToken = !!localStorage.getItem('authToken');\n\n  const queryResult = useQuery<User, Error, User>({\n    queryKey: QueryKeys.userProfile,\n    queryFn: fetchUserProfile, // fetchUserProfile will throw if token is missing now\n    staleTime: 1000 * 60 * 15, \n    enabled: hasToken,\n    retry: (failureCount: number, error: Error) => {\n      // If it's an auth error (401/403), clear the query cache for userProfile\n      if (error && typeof error === 'object' && 'response' in error && \n          (error as any).response && typeof (error as any).response.status === 'number') {\n        const status = (error as any).response.status;\n        if (status === 401 || status === 403) {\n          if (process.env.NODE_ENV === 'development') {\n            console.warn('Auth error in useUserProfile (401/403). Clearing userProfile cache.');\n          }\n          queryClient.removeQueries({ queryKey: QueryKeys.userProfile }); // Proactive clear\n          return false; // Don't retry auth errors that will clear cache\n        }\n      }\n      return failureCount < 2;\n    },\n  });\n\n  if (!hasToken) {\n    // If no token, ensure data is undefined and isSuccess is false.\n    // Also, if the query cache somehow still has data for userProfile, remove it.\n    // This can happen if the token was just deleted and RQ hasn't fully processed the disabled query.\n    if (queryClient.getQueryData(QueryKeys.userProfile)) {\n        if (process.env.NODE_ENV === 'development') {\n            console.log('[useUserProfile] No token, but cached data found. Removing userProfile from cache.');\n        }\n        queryClient.removeQueries({ queryKey: QueryKeys.userProfile });\n    }\n    return {\n      data: undefined,\n      isLoading: false,\n      isSuccess: false,\n      isError: false, // Explicitly false, as it's not an API error but lack of token\n      error: null,    // Explicitly null\n      refetch: queryResult.refetch, // Keep refetch available\n      status: 'idle' as const,\n      // Include other relevant fields from QueryObserverResult if needed, with default/empty states\n      fetchStatus: 'idle' as const,\n      isFetching: false,\n      isInitialLoading: false,\n    };\n  }\n\n  return queryResult;\n};\n\nexport const useAllUsers = (options?: Omit<UseQueryOptions<User[], Error, User[], QueryKey>, 'queryKey' | 'queryFn'>) => {\n  return useQuery<User[], Error, User[], QueryKey>({\n    queryKey: QueryKeys.allUsers,\n    queryFn: fetchAllUsers,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    ...options,\n  });\n};\n\nexport const useUpdateUserProfile = () => {\n  const queryClient = useQueryClient();\n  return useMutation<User, Error, Partial<User> & { _id: string }>({\n    mutationFn: updateUserProfile,\n    onSuccess: (updatedUser) => {\n      queryClient.invalidateQueries({ queryKey: QueryKeys.userProfile });\n      queryClient.setQueryData<User[]>(QueryKeys.allUsers, (oldData) => {\n        if (!oldData) return [];\n        return oldData.map(user => user._id === updatedUser._id ? updatedUser : user);\n      });\n      toast.success('Profile updated successfully!');\n    },\n    onError: (error: any) => {\n      const message = error.response?.data?.message || error.message || 'Failed to update profile.';\n      toast.error(message);\n    },\n  });\n};\n\n// -- User API Functions --\nexport const fetchUserProfile = async (): Promise<User> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    // This will be caught by React Query and set the query to an error state if enabled:true but no token\n    // Or, if enabled:false, the queryFn just won't run.\n    // If this is called directly when hasToken is false (which it shouldn't be by useUserProfile), it's an issue.\n    console.error('[fetchUserProfile] Attempted to fetch profile without a token.');\n    throw new Error('Authentication token missing'); \n  }\n  const response = await axios.get<User>(`${env.BASE_URL}/api/user/profile`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  // The response might be directly the user object, or nested under 'data' or 'user'\n  // Adjust based on your actual API response structure\n  // For now, assuming the response.data is the User object\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Fetched user profile:', response.data);\n  }\n  return response.data;\n};\n\nexport const fetchAllUsers = async (): Promise<User[]> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  const response = await axios.get<User[]>(`${env.BASE_URL}/api/users`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`Fetched ${response.data.length} users`);\n  }\n  return response.data;\n};\n\nexport const updateUserProfile = async (userData: Partial<User> & { _id: string }): Promise<User> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  const { _id, ...updateData } = userData;\n  const response = await axios.put<User>(`${env.BASE_URL}/api/users/${_id}`, updateData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n  });\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Updated user profile:', response.data);\n  }\n  return response.data;\n};\n\n// === Auth API Functions ===\n\nexport const loginUser = async (credentials: UserLoginCredentials): Promise<AuthResponse> => {\n  console.log(\"Logging in with:\", credentials.email);\n  const response = await axios.post<AuthResponse>(`${env.BASE_URL}/api/auth/login`, credentials);\n  \n  // Type assertion for response data\n  const authData = response.data;\n  \n  // Store tokens in localStorage\n  localStorage.setItem(\"authToken\", authData.token);\n  localStorage.setItem(\"refreshToken\", authData.refreshToken);\n  \n  if (process.env.NODE_ENV === 'development') {\n    console.log('Login successful, tokens stored. User data:', authData.user);\n  }\n  return authData;\n};\n\nexport const registerUser = async (userData: UserRegistrationData): Promise<RegistrationResponse> => {\n  console.log(\"Sending registration data:\", userData);\n  // Assuming the register endpoint returns a message, not full AuthResponse for immediate login\n  // Based on authSlice, it expects { message: string }\n  const response = await axios.post<RegistrationResponse>(`${env.BASE_URL}/api/auth/register`, userData);\n  \n  if (process.env.NODE_ENV === 'development') {\n    console.log('Registration response:', response.data);\n  }\n  // If your API returns user and tokens on register and you want to auto-login:\n  // 1. Change RegistrationResponse to AuthResponse\n  // 2. Store tokens: localStorage.setItem(\"authToken\", response.data.token); etc.\n  // 3. The useRegister hook's onSuccess could then populate userProfile query\n  return response.data; \n};\n\n// === Auth Query Hooks ===\n\nexport const useLogin = () => {\n  const queryClient = useQueryClient();\n  return useMutation<AuthResponse, Error, UserLoginCredentials>({\n    mutationFn: loginUser,\n    onSuccess: (data) => {\n      // Set the user profile data in the cache\n      queryClient.setQueryData(QueryKeys.userProfile, data.user);\n      // queryClient.invalidateQueries({ queryKey: QueryKeys.userProfile }); // Let's comment this out to test\n\n      // Prefetch related data if user is admin/superAdmin\n      if (data.user && (data.user.role === 'admin' || data.user.role === 'superAdmin')) {\n        queryClient.prefetchQuery({ queryKey: QueryKeys.allUsers, queryFn: fetchAllUsers, staleTime: 1000 * 60 * 5 });\n      }\n      toast.success(data.message || 'Login successful!');\n    },\n    onError: (error: any) => {\n      const message = error.response?.data?.message || error.message || 'Login failed. Please check your credentials.';\n      toast.error(message);\n      // Optionally, clear user profile on certain auth errors if not handled by useUserProfile's own onError\n      // For example, if a 401/403 still gets through here:\n      // if (error.response?.status === 401 || error.response?.status === 403) {\n      //   queryClient.removeQueries({ queryKey: QueryKeys.userProfile });\n      // }\n    },\n  });\n};\n\nexport const useRegister = () => {\n  // const queryClient = useQueryClient(); // Not typically needed for register if not auto-logging in\n  return useMutation<RegistrationResponse, Error, UserRegistrationData>({\n    mutationFn: registerUser,\n    onSuccess: (data) => {\n      toast.success(data.message || 'Registration successful! Please check your email or try logging in.');\n      // If registration immediately logs the user in (API returns user/token and loginUser stores it):\n      // queryClient.setQueryData(QueryKeys.userProfile, data.user);\n      // queryClient.invalidateQueries({ queryKey: QueryKeys.userProfile });\n    },\n    onError: (error: any) => {\n      const message = error.response?.data?.message || error.message || 'Registration failed. Please try again.';\n      toast.error(message);\n    },\n  });\n};\n\n// New hook for transformed media data\nexport const useTransformedMedia = (userProfile: User | null | undefined, mediaTypeId: string = 'All') => {\n  const queryFn = mediaTypeId === 'All' || !mediaTypeId\n    ? fetchMedia\n    : () => fetchMediaByType(mediaTypeId);\n\n  const queryKey = mediaTypeId === 'All' || !mediaTypeId\n    ? QueryKeys.allMedia\n    : QueryKeys.mediaByType(mediaTypeId);\n  \n  // Ensure that the query key is always an array, even if QueryKeys.allMedia is already an array.\n  const finalQueryKey = Array.isArray(queryKey) ? queryKey : [queryKey];\n\n  return useQuery<MediaFile[], Error, TransformedMediaFile[]>({\n    queryKey: finalQueryKey,\n    queryFn: queryFn,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    refetchOnWindowFocus: false,\n    enabled: !!userProfile, // Only enable if userProfile exists\n    select: (data: MediaFile[]): TransformedMediaFile[] => {\n      // Filter for approved media first\n      const approvedMedia = data.filter(media => media.approvalStatus === 'approved');\n      \n      // Then map to TransformedMediaFile\n      return approvedMedia.map(media => ({\n        ...media,\n        id: media.id || media._id, // Ensure id for DataGrid\n        displayTitle: media.title || media.metadata?.fileName || 'Untitled',\n        thumbnailUrl: media.metadata?.v_thumbnail || media.location,\n        fileSize: typeof media.fileSize === 'number' ? media.fileSize : 0,\n        modifiedDate: typeof media.modifiedDate === 'string' && media.modifiedDate.length > 0\n                        ? media.modifiedDate\n                        : new Date().toISOString(),\n        // approvalStatus will be 'approved' due to the filter, but keep it if needed downstream\n        // approvalFeedback is unlikely to be relevant for approved items in public view\n      }));\n    },\n  });\n};\n\nexport const useAddMedia = () => {\n  const queryClient = useQueryClient();\n  // The mutation function now expects the already uploaded media data (MediaFile).\n  // It doesn't perform an API call itself, as MediaUploader handles that.\n  // Its main job is to update the client-side cache and provide feedback.\n  return useMutation<MediaFile, Error, MediaFile>({\n    mutationFn: async (newlyUploadedMedia: MediaFile) => {\n      // This function is now primarily for cache updates and side effects.\n      // The actual upload happened in MediaUploader.\n      // We just return the data to be used in onSuccess.\n      if (process.env.NODE_ENV === 'development') {\n        console.log('useAddMedia mutationFn called with:', newlyUploadedMedia);\n      }\n      return newlyUploadedMedia;\n    },\n    onSuccess: (data: MediaFile) => {\n      const toastId = `media-upload-success-${data._id || Date.now()}`; // Unique toastId\n      toast.success(`Media \"${data.title || data.metadata?.fileName || 'New Media'}\" processed successfully!`, {\n        toastId: toastId\n      });\n      \n      // Invalidate queries to refetch media lists\n      queryClient.invalidateQueries({ queryKey: QueryKeys.allMedia });\n      if (data.mediaType) { // Assuming mediaType field holds the ID\n        queryClient.invalidateQueries({ queryKey: QueryKeys.mediaByType(data.mediaType) });\n      }\n      // Also invalidate media types with usage counts as a new media item might change these counts\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.mediaTypes, 'withUsageCounts'] });\n\n      // Optional: Optimistically update or directly set data in the cache\n      // This can make the UI feel faster. Example for useTransformedMedia cache:\n      const transformedNewItem: TransformedMediaFile = {\n        ...data,\n        id: data.id || data._id,\n        displayTitle: data.title || data.metadata?.fileName || 'Untitled',\n        thumbnailUrl: data.metadata?.v_thumbnail || data.location,\n        // Ensure other fields for TransformedMediaFile are present if not directly on MediaFile\n        fileSize: typeof data.fileSize === 'number' ? data.fileSize : 0,\n        modifiedDate: typeof data.modifiedDate === 'string' && data.modifiedDate.length > 0\n                        ? data.modifiedDate\n                        : new Date().toISOString(),\n      };\n\n      // Update cache for useTransformedMedia (all media)\n      queryClient.setQueryData<TransformedMediaFile[]>(QueryKeys.allMedia, (oldData) => {\n        if (!oldData) return [transformedNewItem];\n        // Add to start, or filter out if it somehow was already there (e.g. from another source)\n        const filteredOldData = oldData.filter(item => item._id !== transformedNewItem._id);\n        return [transformedNewItem, ...filteredOldData];\n      });\n\n      // Update cache for useTransformedMedia (specific media type)\n      if (data.mediaType) {\n        queryClient.setQueryData<TransformedMediaFile[]>(QueryKeys.mediaByType(data.mediaType), (oldData) => {\n          if (!oldData) return [transformedNewItem];\n          const filteredOldData = oldData.filter(item => item._id !== transformedNewItem._id);\n          return [transformedNewItem, ...filteredOldData];\n        });\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        console.log('useAddMedia onSuccess: Cache updated for QueryKeys.allMedia and specific mediaType if available.');\n      }\n    },\n    onError: (error: any) => {\n      // This error is now less likely to be an API error from this mutation\n      // but could be an error in the mutationFn logic or optimistic updates.\n      const message = error.message || 'An error occurred while processing the new media.';\n      toast.error(message);\n      if (process.env.NODE_ENV === 'development') {\n        console.error(\"Error in useAddMedia:\", error);\n      }\n    },\n  });\n};\n\n// ... existing useTransformedMedia, prefetchMediaDetail, useMediaByType, migrateMediaFiles, useMigrateMediaFiles ...\n\n// ... User Query Hooks ...\n\n// -- Tags and Tag Categories API Functions --\nexport const fetchTagCategories = async (): Promise<TagCategory[]> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  const response = await axios.get<TagCategory[]>(`${env.BASE_URL}/api/tag-categories`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`Fetched ${response.data.length} tag categories`);\n  }\n  return response.data;\n};\n\n// Placeholder for fetchTags - THIS SECTION SHOULD BE REPLACED\n// export const fetchTags = async (): Promise<Tag[]> => { ... };\n\n// New fetchTags function - REPLACING THE PLACEHOLDER ABOVE\nexport const fetchTags = async (): Promise<Tag[]> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  const response = await axios.get<Tag[]>(`${env.BASE_URL}/api/tags`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`Fetched ${response.data.length} tags`);\n  }\n  return response.data;\n};\n\n// New createTag function - ADDED HERE\nexport const createTag = async (tagName: string): Promise<Tag> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  const response = await axios.post<Tag>(\n    `${env.BASE_URL}/api/tags`,\n    { name: tagName }, // Send name in the request body\n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Created tag:', response.data);\n  }\n  return response.data;\n};\n\n// -- Tags and Tag Categories Hooks --\nexport const useTagCategories = (userProfile: User | null | undefined) => {\n  return useQuery<TagCategory[], Error>({\n    queryKey: [QueryKeys.tagCategories],\n    queryFn: fetchTagCategories,\n    staleTime: 1000 * 60 * 10, // 10 minutes\n    enabled: !!userProfile,\n  });\n};\n\n// useTags hook - ENSURING THIS IS CORRECTLY PLACED\nexport const useTags = (userProfile: User | null | undefined) => {\n  return useQuery<Tag[], Error>({\n    queryKey: [QueryKeys.tags],\n    queryFn: fetchTags, // Uses the fetchTags function defined above\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    enabled: !!userProfile, // Only fetch if userProfile exists\n  });\n};\n\n// useCreateTag hook - ENSURING THIS IS CORRECTLY PLACED\nexport const useCreateTag = () => {\n  const queryClient = useQueryClient();\n  return useMutation<Tag, Error, string>({\n    mutationFn: createTag, // Uses the createTag function defined above\n    onSuccess: (newTag) => {\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.tags] });\n      queryClient.setQueryData<Tag[]>([QueryKeys.tags], (oldTags = []) => [\n        ...oldTags,\n        newTag,\n      ]);\n      // toast.success(`Tag \"${newTag.name}\" created successfully!`); // Removed this line\n    },\n    onError: (error: any) => {\n      const message =\n        error.response?.data?.message ||\n        error.message ||\n        'Failed to create tag. Please try again.';\n      toast.error(message);\n    },\n  });\n};\n\n// ... existing useTransformedMedia, prefetchMediaDetail, useMediaByType, migrateMediaFiles, useMigrateMediaFiles ...\n\n// ... User Query Hooks ...\n\n// --- New: Fetch User by ID ---\nexport const fetchUserById = async (userId: string): Promise<User | null> => {\n  if (!userId) {\n    // Or throw an error, or return a specific object indicating no ID was provided\n    console.warn('fetchUserById called without a userId');\n    return null;\n  }\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    // Depending on whether this is a public or private route,\n    // you might allow this or throw an error.\n    // For now, let's assume it might be used for public profiles,\n    // but usually, an API would handle auth internally.\n    // Consider if a token is always required for /api/users/:userId\n    // For consistency with other user fetches, let's require a token for now.\n    // If a public version is needed, a separate endpoint/logic might be better.\n    // throw new Error('Authentication token missing for fetchUserById');\n  }\n  try {\n    // Expecting the API to return the User object directly\n    const response = await axios.get<User>(`${env.BASE_URL}/api/users/${userId}`, {\n      headers: {\n        // Conditionally add Authorization header if token exists\n        ...(token && { Authorization: `Bearer ${token}` }),\n      },\n    });\n    return response.data;\n  } catch (error: any) {\n    console.error(`Error fetching user by ID (${userId}):`, error.response?.data?.message || error.message);\n    // It's good practice to throw the error so React Query can handle it (e.g., set isError state)\n    throw error;\n  }\n};\n\n// React Query hook to get user by ID\nexport const useUserById = (userId?: string) => {\n  return useQuery<User | null, Error>({ // Allow User | null\n    queryKey: [QueryKeys.userById, userId],\n    queryFn: () => fetchUserById(userId!), \n    enabled: !!userId,        \n    staleTime: 1000 * 60 * 5, \n  });\n};\n\n// New custom hook to get user avatar\nexport const useUserAvatar = (userId?: string): { avatar?: string; isLoading: boolean; isError: boolean; error: Error | null } => {\n  const { data: user, isLoading, isError, error } = useUserById(userId); // user can be User | null | undefined\n\n  return {\n    avatar: user?.avatar, // Correctly handles user being null or undefined\n    isLoading,\n    isError,\n    error,\n  };\n};\n\n// For fetching the current user's profile\n// ... existing code ...\n\n// ... existing code ...\n\n// API function to create a tag category\nexport const createTagCategory = async (data: NewTagCategoryData): Promise<TagCategory> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing');\n  }\n  const response = await axios.post<TagCategory>(\n    `${env.BASE_URL}/api/tag-categories`,\n    data,\n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Created tag category:', response.data);\n  }\n  return response.data;\n};\n\n// Hook to create a tag category\nexport const useCreateTagCategory = () => {\n  const queryClient = useQueryClient();\n  return useMutation<TagCategory, Error, NewTagCategoryData>({\n    mutationFn: createTagCategory,\n    onSuccess: (newCategory) => {\n      queryClient.invalidateQueries({ queryKey: [QueryKeys.tagCategories] });\n      // Optionally, update cache directly\n      queryClient.setQueryData<TagCategory[]>([QueryKeys.tagCategories], (oldCategories = []) => [\n        ...oldCategories,\n        newCategory,\n      ]);\n      toast.success(`Tag category \"${newCategory.name}\" created successfully!`);\n    },\n    onError: (error: any) => {\n      const message =\n        error.response?.data?.message ||\n        error.message ||\n        'Failed to create tag category.';\n      toast.error(message);\n    },\n  });\n};\n\n// ... existing useTransformedMedia, prefetchMediaDetail, useMediaByType, migrateMediaFiles, useMigrateMediaFiles ...\n\n// ... User Query Hooks ...\n\n// ... existing code ...\n\n// API function to send an invitation\nexport const sendInvitation = async (invitationData: InvitationData): Promise<InvitationResponse> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication token missing. You must be logged in to send invitations.');\n  }\n  const response = await axios.post<InvitationResponse>(\n    `${env.BASE_URL}/api/invitations`,\n    invitationData,\n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Invitation sent successfully:', response.data);\n  }\n  return response.data;\n};\n\n// Hook to send an invitation\nexport const useSendInvitation = () => {\n  return useMutation<InvitationResponse, Error, InvitationData>({\n    mutationFn: sendInvitation,\n    onSuccess: (data) => {\n      toast.success(data.message || 'Invitation sent successfully!');\n    },\n    onError: (error: any) => {\n      const message =\n        error.response?.data?.message ||\n        error.message ||\n        'Failed to send invitation. Please try again.';\n      toast.error(message);\n    },\n  });\n};\n\n// ... existing useTransformedMedia, prefetchMediaDetail, useMediaByType, migrateMediaFiles, useMigrateMediaFiles ...\n\n// ... User Query Hooks ...\n\n// ... existing code ... \n\nexport const fetchMediaByUserId = async (userId: string): Promise<MediaFile[]> => {\n  const token = localStorage.getItem('authToken');\n  // No token, no fetching user-specific media that might require permission checks\n  if (!token) {\n    // Or, if public profiles can show some approved media, this logic might change.\n    // For now, assume token is required to know who is asking.\n    console.warn('Auth token needed to fetch media by user ID.');\n    return []; \n  }\n\n  try {\n    const response = await axios.get<MediaFile[]>(`${env.BASE_URL}/api/media/user/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    // Assuming the backend already filters by approvalStatus based on the requester's role\n    // and ownership. The frontend just gets the list it's allowed to see.\n    // We will still process it to ensure consistency, similar to fetchMedia.\n    return response.data.map(media => {\n      const processedMedia: MediaFile = {\n        ...media,\n        _id: media._id,\n        fileSize: typeof media.fileSize === 'number' ? media.fileSize : 0,\n        modifiedDate: typeof media.modifiedDate === 'string' && media.modifiedDate.length > 0\n                        ? media.modifiedDate\n                        : new Date().toISOString(),\n        metadata: media.metadata || {},\n        // Explicitly include approvalStatus and approvalFeedback from the API response\n        approvalStatus: media.approvalStatus,\n        approvalFeedback: media.approvalFeedback,\n      };\n      \n      if (processedMedia.metadata?.v_thumbnail) {\n        const uniqueId = processedMedia._id || processedMedia.id || '';\n        const separator = processedMedia.metadata.v_thumbnail.includes('?') ? '&' : '?';\n        processedMedia.metadata.v_thumbnail = `${processedMedia.metadata.v_thumbnail}${separator}mediaId=${uniqueId}`;\n      }\n      return processedMedia;\n    });\n  } catch (error) {\n    console.error('Error fetching media by user ID:', error);\n    toast.error('Could not load media for this user.');\n    return []; // Return empty array on error\n  }\n};\n\n// Make sure this is placed before the first 'export const use...' hook if it's a new hook.\n// Or, group it with other user-related hooks.\n\nexport const useMediaByUserId = (userId: string | undefined) => {\n  return useQuery<MediaFile[], Error>({\n    queryKey: QueryKeys.mediaByUserId(userId!),\n    queryFn: () => fetchMediaByUserId(userId!),\n    enabled: !!userId, // Only run if userId is provided\n    staleTime: 5 * 60 * 1000, // 5 minutes, adjust as needed\n    // Add other options like cacheTime if necessary\n  });\n};\n\n// ... existing code ...\n// Example existing hook:\n// export const useUserById = (userId: string | undefined) => {\n// ... existing code ...\n\nexport const fetchPendingMediaReviews = async (): Promise<MediaFile[]> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    toast.error('Authentication required to fetch pending media reviews.');\n    return [];\n  }\n\n  try {\n    // This endpoint needs to be created on the backend.\n    // It should return media files with status 'pending' or 'needs_revision'.\n    const response = await axios.get<MediaFile[]>(`${env.BASE_URL}/api/media/admin/pending-review`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`Fetched ${response.data.length} media items pending review`);\n    }\n\n    // Process the data to ensure consistent formatting\n    return response.data.map(media => ({\n      ...media,\n      _id: media._id,\n      fileSize: typeof media.fileSize === 'number' ? media.fileSize : 0,\n      modifiedDate: typeof media.modifiedDate === 'string' && media.modifiedDate.length > 0\n                      ? media.modifiedDate\n                      : new Date().toISOString(),\n      metadata: media.metadata || {},\n      approvalStatus: media.approvalStatus, // Essential for this hook\n      approvalFeedback: media.approvalFeedback, // Also important\n    }));\n  } catch (error: any) {\n    console.error('Error fetching pending media reviews:', error);\n    toast.error(error.response?.data?.message || 'Could not load media pending review.');\n    return []; // Return empty array on error\n  }\n};\n\n// Hook for admins to get media pending review\nexport const usePendingMediaReviews = (userProfile: User | null | undefined) => {\n  return useQuery<MediaFile[], Error>({\n    queryKey: QueryKeys.pendingMediaReviews,\n    queryFn: fetchPendingMediaReviews,\n    enabled: !!userProfile && (userProfile.role === 'admin' || userProfile.role === 'superAdmin'),\n    staleTime: 2 * 60 * 1000, // 2 minutes, admins might want fresher data for this queue\n  });\n};\n\n// API function to Approve a Media Item\nexport const approveMediaItem = async (mediaId: string): Promise<MediaFile> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) throw new Error('Authentication required.');\n  const response = await axios.post<MediaFile>(\n    `${env.BASE_URL}/api/media/admin/${mediaId}/approve`,\n    {},\n    { headers: { Authorization: `Bearer ${token}` } }\n  );\n  return response.data;\n};\n\n// API function to Reject a Media Item\nexport const rejectMediaItem = async ({ mediaId, feedback }: { mediaId: string; feedback: string }): Promise<MediaFile> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) throw new Error('Authentication required.');\n  const response = await axios.post<MediaFile>(\n    `${env.BASE_URL}/api/media/admin/${mediaId}/reject`,\n    { feedback },\n    { headers: { Authorization: `Bearer ${token}` } }\n  );\n  return response.data;\n};\n\n// API function to Request Revision for a Media Item\nexport const requestRevisionMediaItem = async ({ mediaId, feedback }: { mediaId: string; feedback: string }): Promise<MediaFile> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) throw new Error('Authentication required.');\n  const response = await axios.post<MediaFile>(\n    `${env.BASE_URL}/api/media/admin/${mediaId}/request-revision`,\n    { feedback },\n    { headers: { Authorization: `Bearer ${token}` } }\n  );\n  return response.data;\n};\n\n// Hook to Approve Media\nexport const useApproveMedia = () => {\n  const queryClient = useQueryClient();\n  return useMutation<MediaFile, Error, string>({\n    mutationFn: approveMediaItem,\n    onSuccess: (data) => {\n      toast.success(`Media \"${data.title || data.metadata?.fileName}\" approved successfully.`);\n      queryClient.invalidateQueries({ queryKey: QueryKeys.pendingMediaReviews });\n      // Potentially invalidate other queries if this media now appears in other lists\n      queryClient.invalidateQueries({ queryKey: QueryKeys.allMedia });\n      if (data.mediaType) {\n        queryClient.invalidateQueries({ queryKey: QueryKeys.mediaByType(data.mediaType) });\n      }\n      if (data.uploadedBy) {\n        queryClient.invalidateQueries({ queryKey: QueryKeys.mediaByUserId(data.uploadedBy) });\n      }\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || 'Failed to approve media.');\n    },\n  });\n};\n\n// Hook to Reject Media\nexport const useRejectMedia = () => {\n  const queryClient = useQueryClient();\n  return useMutation<MediaFile, Error, { mediaId: string; feedback: string }>({\n    mutationFn: rejectMediaItem,\n    onSuccess: (data) => {\n      toast.success(`Media \"${data.title || data.metadata?.fileName}\" rejected.`);\n      queryClient.invalidateQueries({ queryKey: QueryKeys.pendingMediaReviews });\n      if (data.uploadedBy) { // Media might still be visible to uploader with rejected status\n        queryClient.invalidateQueries({ queryKey: QueryKeys.mediaByUserId(data.uploadedBy) });\n      }\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || 'Failed to reject media.');\n    },\n  });\n};\n\n// Hook to Request Revision for Media\nexport const useRequestRevisionMedia = () => {\n  const queryClient = useQueryClient();\n  return useMutation<MediaFile, Error, { mediaId: string; feedback: string }>({\n    mutationFn: requestRevisionMediaItem,\n    onSuccess: (data) => {\n      toast.success(`Revision requested for media \"${data.title || data.metadata?.fileName}\".`);\n      queryClient.invalidateQueries({ queryKey: QueryKeys.pendingMediaReviews });\n      if (data.uploadedBy) {\n        queryClient.invalidateQueries({ queryKey: QueryKeys.mediaByUserId(data.uploadedBy) });\n      }\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || 'Failed to request revision for media.');\n    },\n  });\n};\n\nexport const fetchRejectedMedia = async (): Promise<MediaFile[]> => {\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    toast.error('Authentication required to fetch rejected media.');\n    return [];\n  }\n\n  try {\n    // This endpoint needs to be created on the backend.\n    // It should return media files with status 'rejected'.\n    const response = await axios.get<MediaFile[]>(`${env.BASE_URL}/api/media/admin/rejected`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`Fetched ${response.data.length} rejected media items`);\n    }\n\n    // Process the data to ensure consistent formatting\n    return response.data.map(media => ({\n      ...media,\n      _id: media._id,\n      fileSize: typeof media.fileSize === 'number' ? media.fileSize : 0,\n      modifiedDate: typeof media.modifiedDate === 'string' && media.modifiedDate.length > 0\n                      ? media.modifiedDate\n                      : new Date().toISOString(),\n      metadata: media.metadata || {},\n      approvalStatus: media.approvalStatus, // Essential for this hook\n      approvalFeedback: media.approvalFeedback, // Also important\n    }));\n  } catch (error: any) {\n    console.error('Error fetching rejected media:', error);\n    toast.error(error.response?.data?.message || 'Could not load rejected media.');\n    return []; // Return empty array on error\n  }\n};\n\n// Hook for admins to get rejected media\nexport const useRejectedMedia = (userProfile: User | null | undefined) => {\n  return useQuery<MediaFile[], Error>({\n    queryKey: ['media', 'rejectedReview'], // New QueryKey\n    queryFn: fetchRejectedMedia,\n    enabled: !!userProfile && (userProfile.role === 'admin' || userProfile.role === 'superAdmin'),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/hooks/useAuthHandler.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[48,51],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[48,51],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export declare const useAuthHandler: (formData: any, isSignUp: boolean) => (e: React.FormEvent<HTMLFormElement>) => Promise<void>;\n","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/hooks/useAuthHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[288,291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[288,291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'queryClient' is assigned a value but never used.","line":10,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1072,1075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1072,1075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1614,1617],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1614,1617],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useNavigate } from 'react-router-dom';\nimport { useLogin, useRegister, UserLoginCredentials, UserRegistrationData } from './query-hooks';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { QueryKeys } from './query-hooks';\n\nexport const useAuthHandler = (formData: any, isSignUp: boolean) => {\n  const navigate = useNavigate();\n  const { mutate: loginUser, isPending: isLoggingIn, error: loginError } = useLogin();\n  const { mutate: registerUser, isPending: isRegistering, error: registerError } = useRegister();\n  const queryClient = useQueryClient();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (isSignUp) {\n      const registrationData: UserRegistrationData = {\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        email: formData.email,\n        username: formData.username || formData.email,\n        password: formData.password,\n      };\n      registerUser(registrationData, {\n        onSuccess: () => {\n          navigate('/login');\n        },\n        onError: (error: any) => {\n          console.error('Registration failed from useAuthHandler:', error);\n        }\n      });\n    } else {\n      const loginCredentials: UserLoginCredentials = {\n        email: formData.email,\n        password: formData.password,\n      };\n      loginUser(loginCredentials, {\n        onSuccess: (_data) => {\n          if (_data.user?.role === 'admin' || _data.user?.role === 'superAdmin') {\n            navigate('/admin-dashboard');\n          } else {\n            navigate('/home');\n          }\n        },\n        onError: (error: any) => {\n          console.error('Login failed from useAuthHandler:', error);\n        }\n      });\n    }\n  };\n\n  return { \n    handleSubmit, \n    isLoading: isLoggingIn || isRegistering, \n    error: loginError || registerError \n  };\n};\n\nexport const useLogoutHandler = () => {\n  const queryClient = useQueryClient();\n  queryClient.invalidateQueries({ queryKey: [QueryKeys.userProfile] });\n  queryClient.removeQueries();\n\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Logout successful');\n  }\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/hooks/useFileHandler.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/hooks/useFileHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/hooks/useFileUpload.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/hooks/useFileUpload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/hooks/useMediaLibrary.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toast' is defined but never used.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3031,3034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3031,3034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3844,3847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3844,3847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo } from 'react';\n// import { useSelector, useDispatch } from 'react-redux'; // Removed\n// import { \n//   initializeMedia, \n//   deleteMedia as reduxDelete, \n//   addMedia as reduxAdd,\n//   deleteMediaThunk \n// } from '../store/slices/mediaSlice'; // Removed\n// import { RootState, AppDispatch } from '../store/store'; // Removed\n// import { BaseMediaFile } from '../interfaces/MediaFile'; // Replaced by TransformedMediaFile if appropriate\n\nimport { \n  useUserProfile, \n  useTransformedMedia, \n  useDeleteMedia, \n  useAddMedia,\n  TransformedMediaFile // Ensure this type is what useAddMedia and useDeleteMedia expect or can work with\n} from './query-hooks';\nimport { toast } from 'react-toastify';\n\n/**\n * useMediaLibrary - encapsulates media fetching, filtering, and deletion using TanStack Query\n */\nexport function useMediaLibrary() {\n  // const dispatch = useDispatch<AppDispatch>(); // Removed\n  // const { allMedia, status, error } = useSelector((state: RootState) => state.media); // Replaced\n\n  // Filtering state\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedMediaType, setSelectedMediaType] = useState<string>('All'); // Default to 'All'\n\n  // --- TanStack Query Hooks ---\n  const { data: userProfile } = useUserProfile();\n  const {\n    data: allMedia = [], // Default to empty array if undefined\n    isLoading,\n    isError,\n    error: queryError, // Renamed to avoid conflict if we return a generic error\n    refetch // To allow manual refetching if needed\n  } = useTransformedMedia(userProfile, selectedMediaType); // Pass selectedMediaType\n\n  const { mutate: deleteMediaMutation, isPending: isDeleting } = useDeleteMedia();\n  const { mutate: addMediaMutation, isPending: isAdding } = useAddMedia();\n\n  // No explicit initial fetch needed with useQuery, it fetches on mount/dependency change.\n  // useEffect(() => {\n  //   if (status === 'idle') {\n  //     dispatch(initializeMedia());\n  //   }\n  // }, [dispatch, status]);\n\n  // Filtered list based on search and type\n  const filteredMedia = useMemo(() => {\n    if (!allMedia) return [];\n    return allMedia.filter(file => {\n      // mediaType in TransformedMediaFile might be an ID, ensure comparison is correct.\n      // Assuming selectedMediaType is also an ID, or 'All'.\n      const matchesType = selectedMediaType === 'All' || file.mediaType === selectedMediaType;\n      const fileName = file.metadata?.fileName ?? file.title ?? ''; // Include title as fallback\n      const matchesSearch = fileName.toLowerCase().includes(searchQuery.toLowerCase());\n      return matchesType && matchesSearch;\n    });\n  }, [allMedia, selectedMediaType, searchQuery]);\n\n  // Expose handlers\n  const deleteMediaItem = async (id: string): Promise<boolean> => {\n    return new Promise((resolve) => {\n      deleteMediaMutation({ mediaId: id }, {\n        onSuccess: () => {\n          // toast.success('Media deleted successfully'); // Handled by useDeleteMedia hook\n          resolve(true);\n        },\n        onError: (error: any) => {\n          // toast.error(error.message || 'Error deleting media'); // Handled by useDeleteMedia hook\n          console.error('Error deleting media from useMediaLibrary:', error);\n          resolve(false);\n        }\n      });\n    });\n  };\n  \n  // The addMedia function now expects the fully formed MediaFile object \n  // (or TransformedMediaFile, depending on useAddMedia hook's expectation)\n  // that has ALREADY been uploaded (e.g., by MediaUploaderComponent).\n  // Its main role here is to trigger the cache update via useAddMedia mutation.\n  const addMediaItem = (newlyUploadedMedia: TransformedMediaFile) => {\n    addMediaMutation(newlyUploadedMedia, {\n      onSuccess: () => {\n        // toast.success('Media added to library cache'); // Handled by useAddMedia hook\n      },\n      onError: (error: any) => {\n        // toast.error(error.message || 'Error adding media to cache'); // Handled by useAddMedia hook\n        console.error('Error adding media from useMediaLibrary:', error);\n      }\n    });\n  };\n\n  return {\n    // Status and error from useTransformedMedia\n    isLoading,\n    isError,\n    error: queryError,\n    refetchMedia: refetch, // Expose refetch\n\n    allMedia: allMedia || [], // Ensure it's always an array\n    filteredMedia,\n    searchQuery,\n    setSearchQuery,\n    selectedMediaType,\n    setSelectedMediaType,\n    deleteMediaItem, // Renamed to avoid conflict with original deleteMedia\n    addMediaItem,    // Renamed to avoid conflict\n    isDeleting,      // Expose loading state for delete\n    isAdding,        // Expose loading state for add (if useAddMedia provides it)\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/hooks/useUsername.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/interfaces/MediaFile.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[457,460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[457,460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":23,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterface","endLine":23,"endColumn":35,"suggestions":[{"messageId":"replaceEmptyInterface","data":{"replacement":"object"},"fix":{"range":[478,509],"text":"type BaseMediaMetadata = object"},"desc":"Replace empty interface with `object`."},{"messageId":"replaceEmptyInterface","data":{"replacement":"unknown"},"fix":{"range":[478,509],"text":"type BaseMediaMetadata = unknown"},"desc":"Replace empty interface with `unknown`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface MediaFile {\n    _id: string;\n    id: string;\n    title: string;\n    location: string;\n    slug: string;\n    fileSize: number;\n    fileExtension: string;\n    modifiedDate: Date;\n    uploadedBy: string;\n    modifiedBy: string;\n    __t: string;\n    metadata: {\n        fileName: string;\n        tags: string[];\n        visibility: string;\n        altText: string;\n        description: string;\n        mediaType: string;\n        [key: string]: any;\n    };\n}\nexport interface BaseMediaMetadata {\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/interfaces/MediaFile.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[818,821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[818,821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RelatedMedia } from \"../components/MediaUploader/types\";\n\nexport interface BaseMediaFile {\n  _id?: string; // MongoDB's ObjectId\n  id?: string; // Custom UUID\n  title?: string;\n  location: string; // Keep required as it's essential for displaying media\n  slug: string; // Keep required as it's used for routing\n  fileSize?: number;\n  fileExtension?: string;\n  modifiedDate: string; // Changed from Date to string\n  uploadedBy?: string;\n  modifiedBy?: string;\n  mediaType?: string;\n  __t?: string;\n  relatedMedia?: RelatedMedia[];\n  approvalStatus?: 'pending' | 'approved' | 'rejected' | 'needs_revision';\n  approvalFeedback?: string;\n  metadata?: {\n    fileName?: string;\n    tags?: string[];\n    visibility?: string;\n    altText?: string;\n    description?: string;\n    mediaType?: string;\n    [key: string]: any; // Allow additional fields\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/interfaces/ProductImageMetadata.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/interfaces/ProductImageMetadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/interfaces/User.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/interfaces/User.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/main.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/AcceptInvitation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2340,2343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2340,2343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4250,4253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4250,4253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n  Typography,\n  TextField,\n  Button,\n  Paper,\n  CircularProgress,\n  Alert,\n  Stepper,\n  Step,\n  StepLabel,\n  InputAdornment,\n  IconButton,\n  Zoom\n} from '@mui/material';\nimport {\n  Visibility as VisibilityIcon,\n  VisibilityOff as VisibilityOffIcon,\n  CheckCircle as CheckCircleIcon\n} from '@mui/icons-material';\nimport axios from 'axios';\nimport { API_BASE_URL } from '../config/config';\nimport '../components/UserInvitation/AcceptInvitations.scss';\n\ninterface InvitationData {\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  expiresAt: string;\n}\n\nconst AcceptInvitation: React.FC = () => {\n  const { token } = useParams<{ token: string }>();\n  const navigate = useNavigate();\n  \n  // States\n  const [validating, setValidating] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [invitation, setInvitation] = useState<InvitationData | null>(null);\n  const [password, setPassword] = useState<string>('');\n  const [confirmPassword, setConfirmPassword] = useState<string>('');\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n  const [passwordError, setPasswordError] = useState<string | null>(null);\n  const [submitting, setSubmitting] = useState<boolean>(false);\n  const [activeStep, setActiveStep] = useState<number>(0);\n  \n  // Steps\n  const steps = ['Validate Invitation', 'Create Password', 'Account Created'];\n  \n  // Validate invitation token on component mount\n  useEffect(() => {\n    const validateToken = async () => {\n      try {\n        setValidating(true);\n        setError(null);\n        \n        if (!token) {\n          setError('Invalid invitation link');\n          setValidating(false);\n          return;\n        }\n        \n        const response = await axios.get<{\n          valid: boolean;\n          invitation?: InvitationData;\n          message?: string;\n        }>(`${API_BASE_URL}/api/invitations/validate/${token}`);\n        \n        if (response.data.valid && response.data.invitation) {\n          setInvitation(response.data.invitation);\n          setActiveStep(1); // Move to password creation step\n        } else {\n          setError('This invitation is no longer valid');\n        }\n      } catch (err: any) {\n        console.error('Error validating invitation:', err);\n        \n        if (err.response?.data?.message) {\n          setError(err.response.data.message);\n        } else {\n          setError('This invitation is invalid or has expired');\n        }\n      } finally {\n        setValidating(false);\n      }\n    };\n    \n    validateToken();\n  }, [token]);\n  \n  // Password validation\n  const validatePasswords = (): boolean => {\n    // Reset error\n    setPasswordError(null);\n    \n    // Check if passwords match\n    if (password !== confirmPassword) {\n      setPasswordError('Passwords do not match');\n      return false;\n    }\n    \n    // Check password length\n    if (password.length < 8) {\n      setPasswordError('Password must be at least 8 characters long');\n      return false;\n    }\n    \n    return true;\n  };\n  \n  // Handle account creation\n  const handleCreateAccount = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate passwords\n    if (!validatePasswords()) {\n      return;\n    }\n    \n    try {\n      setSubmitting(true);\n      setError(null);\n      \n      // Send request to accept invitation with proper response type\n      const response = await axios.post<{\n        token: string;\n        message: string;\n        user: {\n          id: string;\n          firstName: string;\n          lastName: string;\n          email: string;\n          role: string;\n        }\n      }>(`${API_BASE_URL}/api/invitations/accept/${token}`, {\n        password\n      });\n      \n      // Handle successful response\n      if (response.data.token) {\n        // Store token in localStorage\n        localStorage.setItem('authToken', response.data.token);\n        \n        // Move to final step\n        setActiveStep(2);\n        \n        // Redirect to account page after a short delay\n        setTimeout(() => {\n          navigate('/account');\n        }, 3000);\n      }\n    } catch (err: any) {\n      console.error('Error accepting invitation:', err);\n      \n      if (err.response?.data?.message) {\n        setError(err.response.data.message);\n      } else {\n        setError('An error occurred while creating your account');\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  \n  // Toggle password visibility\n  const togglePasswordVisibility = () => {\n    setShowPassword(prev => !prev);\n  };\n  \n  // Handle navigating to login page\n  const handleGoToLogin = () => {\n    navigate('/login');\n  };\n  \n  // Render content based on current step\n  const renderStepContent = () => {\n    switch (activeStep) {\n      case 0: // Validating\n        return (\n          <div className=\"validation-container\">\n            {validating ? (\n              <>\n                <CircularProgress size={60} className=\"progress-indicator\" />\n                <Typography variant=\"h6\" className=\"validation-text\">\n                  Validating your invitation...\n                </Typography>\n              </>\n            ) : error ? (\n              <>\n                <Alert severity=\"error\" className=\"validation-alert\">\n                  {error}\n                </Alert>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleGoToLogin}\n                  className=\"login-button\"\n                >\n                  Go to Login\n                </Button>\n              </>\n            ) : null}\n          </div>\n        );\n        \n      case 1: // Password creation\n        return (\n          <div className=\"password-form-container\">\n            <Typography variant=\"h6\" className=\"form-title\">\n              Create your password\n            </Typography>\n            \n            <Alert severity=\"info\" className=\"invitation-info\">\n              You've been invited as a <strong>{invitation?.role}</strong>. Please create a password to complete your registration.\n            </Alert>\n            \n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type={showPassword ? 'text' : 'password'}\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              autoComplete=\"new-password\"\n              className=\"password-field\"\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={togglePasswordVisibility}\n                      edge=\"end\"\n                    >\n                      {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                    </IconButton>\n                  </InputAdornment>\n                )\n              }}\n            />\n            \n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"confirmPassword\"\n              label=\"Confirm Password\"\n              type={showPassword ? 'text' : 'password'}\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              autoComplete=\"new-password\"\n              className=\"password-field\"\n            />\n            \n            {passwordError && (\n              <Alert severity=\"error\" className=\"error-alert\">\n                {passwordError}\n              </Alert>\n            )}\n            \n            {error && (\n              <Alert severity=\"error\" className=\"error-alert\">\n                {error}\n              </Alert>\n            )}\n            \n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              className=\"submit-button\"\n              disabled={submitting}\n              onClick={handleCreateAccount}\n            >\n              {submitting ? <CircularProgress size={24} /> : 'Create Account'}\n            </Button>\n          </div>\n        );\n        \n      case 2: // Success\n        return (\n          <div className=\"success-container\">\n            <Zoom in>\n              <CheckCircleIcon color=\"success\" className=\"success-icon\" />\n            </Zoom>\n            <Typography variant=\"h5\" className=\"success-title\">\n              Account Created Successfully!\n            </Typography>\n            <Typography className=\"success-message\">\n              Welcome to Omni's Media Library. You're now being redirected to your account...\n            </Typography>\n          </div>\n        );\n        \n      default:\n        return null;\n    }\n  };\n  \n  return (\n    <div id=\"invitation-accept-page\">\n      <div className=\"invitation-container\">\n        <Paper elevation={3} className=\"invitation-paper\">\n          <Typography variant=\"h4\" className=\"page-title\">\n            Welcome to Omni\n          </Typography>\n          \n          <Stepper activeStep={activeStep} className=\"invitation-stepper\">\n            {steps.map((label) => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          \n          {renderStepContent()}\n        </Paper>\n      </div>\n    </div>\n  );\n};\n\nexport default AcceptInvitation; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/Account.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/Account.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ToastContainer' is defined but never used.","line":4,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3838,3841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3838,3841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4054,4057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4054,4057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4499,4502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4499,4502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4809,4812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4809,4812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useContext, useEffect } from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { \n  Box, \n  Button, \n  TextField, \n  Typography, \n  Avatar, \n  CircularProgress, \n  Paper, \n  Divider,\n  useMediaQuery,\n  useTheme,\n  Alert,\n  Container,\n  InputAdornment\n} from '@mui/material';\nimport { motion } from 'framer-motion';\nimport SaveIcon from '@mui/icons-material/Save';\nimport PersonIcon from '@mui/icons-material/Person';\nimport LockIcon from '@mui/icons-material/Lock';\nimport EmailIcon from '@mui/icons-material/Email';\nimport BrushIcon from '@mui/icons-material/Brush';\nimport ThemeToggle from '../components/ThemeToggle/ThemeToggle';\nimport { ThemeContext } from '../App';\nimport ViewModeToggle from '../components/ViewModeToggle/ViewModeToggle';\nimport { useUserProfile, useUpdateUserProfile, User as UserProfileType } from '../hooks/query-hooks';\nimport { Link as RouterLink } from 'react-router-dom';\n\n// Define a User interface for form values (can be slightly different from UserProfileType if needed, e.g. password)\ninterface UserFormValues {\n  email: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n  password?: string; // Password is optional for update\n  avatar?: string | null;\n}\n\nconst Account: React.FC = () => {\n  const [changesMade, setChangesMade] = useState<boolean>(false);\n  \n  const { data: currentUser, isLoading: isUserLoading, error: userError } = useUserProfile();\n  const { mutate: updateUser, isPending: isUpdatingUser } = useUpdateUserProfile();\n\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const { isDarkMode, toggleTheme } = useContext(ThemeContext);\n\n  // Initial values for Formik - will be updated by useEffect when currentUser loads\n  const [initialFormValues, setInitialFormValues] = useState<UserFormValues>({\n    email: '',\n    firstName: '',\n    lastName: '',\n    username: '',\n    password: '',\n    avatar: ''\n  });\n\n  useEffect(() => {\n    if (currentUser) {\n      setInitialFormValues({\n        email: currentUser.email || '',\n        firstName: currentUser.firstName || '',\n        lastName: currentUser.lastName || '',\n        username: currentUser.username || '',\n        password: '', // Password field should be empty initially for updates\n        avatar: currentUser.avatar || ''\n      });\n    }\n  }, [currentUser]);\n\n  const formik = useFormik<UserFormValues>({\n    initialValues: initialFormValues, // Use state for initialValues\n    enableReinitialize: true, // Important to reinitialize form when initialFormValues change\n    validationSchema: Yup.object({\n      email: Yup.string().email('Invalid email address').required('Email is required'),\n      firstName: Yup.string().required('First Name is required'),\n      lastName: Yup.string().required('Last Name is required'),\n      username: Yup.string().required('Username is required'),\n      password: Yup.string().min(6, 'Password must be at least 6 characters').nullable(), // Allow empty for no change\n    }),\n    onSubmit: async (values) => {\n      if (!currentUser?._id) {\n        toast.error('User ID is missing, cannot update profile.');\n        return;\n      }\n      try {\n        const updatedFields: Partial<UserProfileType> = {};\n        // Compare with initialFormValues loaded from currentUser, not formik.initialValues which might not be latest from API\n        Object.keys(values).forEach((keyStr) => {\n          const key = keyStr as keyof UserFormValues;\n          const value = values[key];\n          const initialValue = initialFormValues[key];\n\n          if (key === 'password') {\n            if (value) { // Only include password if a new one is entered\n              (updatedFields as any)[key] = value;\n            }\n          } else if (value !== initialValue) {\n            // Type assertion needed here if UserFormValues and UserProfileType keys differ significantly\n            (updatedFields as any)[key] = value;\n          }\n        });\n\n        if (Object.keys(updatedFields).length > 0) {\n          updateUser({ _id: currentUser._id, ...updatedFields }, {\n            onSuccess: () => {\n              toast.success('Profile updated successfully');\n              setChangesMade(false);\n              // initialFormValues will be updated by useEffect due to cache update by useUpdateUserProfile\n            },\n            onError: (error: any) => {\n              console.error('Error updating profile:', error);\n              toast.error(error.response?.data?.message || error.message || 'An error occurred while updating.');\n            }\n          });\n        } else {\n          toast.info('No changes to save.');\n        }\n\n      } catch (error: any) { // Catch general errors if any before calling mutate\n        console.error('Error preparing profile update:', error);\n        toast.error('An unexpected error occurred.');\n      }\n    },\n  });\n\n  // Track when form values change compared to initial values from currentUser\n  React.useEffect(() => {\n    if (!currentUser) return;\n    const hasChanged = \n      formik.values.email !== initialFormValues.email ||\n      formik.values.firstName !== initialFormValues.firstName ||\n      formik.values.lastName !== initialFormValues.lastName ||\n      formik.values.username !== initialFormValues.username ||\n      !!(formik.values.password && formik.values.password !== initialFormValues.password); // Only consider changed if new password entered\n    \n    setChangesMade(hasChanged);\n  }, [formik.values, initialFormValues, currentUser]);\n\n  // Generate initials for avatar if no image is available\n  const getInitials = () => {\n    if (!currentUser) return '';\n    const firstInitial = currentUser.firstName?.charAt(0) || '';\n    const lastInitial = currentUser.lastName?.charAt(0) || '';\n    return (firstInitial + lastInitial).toUpperCase();\n  };\n\n  // Add state for the view mode\n  const [preferredViewMode, setPreferredViewMode] = useState<'list' | 'card'>(() => {\n    return localStorage.getItem('mediaLibraryViewMode') as 'list' | 'card' || 'card';\n  });\n  \n  // Add a function to handle view mode changes\n  const handleViewModeChange = (newViewMode: 'list' | 'card') => {\n    setPreferredViewMode(newViewMode);\n    localStorage.setItem('mediaLibraryViewMode', newViewMode);\n    toast.success(`Default view mode set to ${newViewMode === 'list' ? 'List' : 'Card'}`);\n  };\n\n  if (isUserLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n        <CircularProgress />\n        <Typography sx={{ml: 2}}>Loading account details...</Typography>\n      </Box>\n    );\n  }\n\n  if (userError) {\n    return (\n      <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n        <Typography color=\"error\">Error loading user profile: {userError.message}</Typography>\n        <Button onClick={() => window.location.reload()} sx={{mt: 2}}>Try Reloading</Button>\n      </Box>\n    );\n  }\n  \n  if (!currentUser) {\n    return (\n        <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n            <Typography>User not found. You may need to log in.</Typography>\n            <Button component={RouterLink} to=\"/login\" variant=\"contained\" sx={{mt: 2}}>Go to Login</Button>\n        </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box\n        component={motion.div}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        sx={{\n          padding: 2,\n          width: '100%',\n          margin: 'auto',\n          maxWidth: '1200px'\n        }}\n      >\n        <Typography \n          variant={isMobile ? \"h3\" : \"h1\"} \n          gutterBottom\n          sx={{ \n            marginBottom: '1.5rem' \n          }}\n        >\n          Account Settings\n        </Typography>\n\n        <Paper \n          elevation={3}\n          sx={{ \n            padding: isMobile ? '1.5rem 1rem' : '2rem',\n            borderRadius: '12px',\n            backgroundColor: 'var(--bg-secondary)',\n            marginBottom: '2rem'\n          }}\n        >\n          <Box \n            sx={{ \n              display: 'flex', \n              flexDirection: isMobile ? 'column' : 'row',\n              alignItems: 'center',\n              justifyContent: isMobile ? 'center' : 'flex-start',\n              mb: 4,\n              gap: 3\n            }}\n          >\n            <Avatar\n              src={currentUser.avatar || undefined}\n              sx={{ \n                width: 75, \n                height: 75,\n                fontSize: '2.5rem',\n                bgcolor: 'var(--accent-color)',\n                border: '3px solid var(--primary-color)',\n                boxShadow: '0 4px 8px rgba(0,0,0,0.2)'\n              }}\n            >\n              {!currentUser.avatar && getInitials()}\n            </Avatar>\n            \n            <Box>\n              <Typography \n                variant=\"h4\" \n                sx={{ \n                  fontWeight: 500, \n                  marginBottom: '0.2rem',\n                  textAlign: isMobile ? 'center' : 'left'\n                }}\n              >\n                {`${currentUser.firstName} ${currentUser.lastName}`}\n              </Typography>\n              \n              <Typography \n                variant=\"body1\" \n                color=\"textSecondary\" \n                sx={{ \n                  marginBottom: '0.2rem',\n                  paddingLeft: '0.5rem',\n                  textAlign: isMobile ? 'center' : 'left'\n                }}\n              >\n                @{currentUser.username}\n              </Typography>\n              \n              <Typography \n                variant=\"body2\" \n                color=\"textSecondary\"\n                sx={{ \n                  textAlign: isMobile ? 'center' : 'left',\n                  paddingLeft: '0.5rem',\n                }}\n              >\n                Role: {currentUser.role || 'User'}\n              </Typography>\n            </Box>\n          </Box>\n\n          <Divider sx={{ marginBottom: 3 }} />\n\n          {changesMade && (\n            <Alert \n              severity=\"info\" \n              sx={{ mb: 3 }}\n            >\n              You have unsaved changes. Click Save Changes to update your profile.\n            </Alert>\n          )}\n\n          <form onSubmit={formik.handleSubmit}>\n            <Box sx={{ \n              display: 'grid', \n              gridTemplateColumns: isMobile ? '1fr' : 'repeat(2, 1fr)', \n              gap: isMobile ? 2 : 3,\n              marginBottom: 3\n            }}>\n              <TextField\n                fullWidth\n                id=\"firstName\"\n                name=\"firstName\"\n                label=\"First Name\"\n                value={formik.values.firstName}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.firstName && Boolean(formik.errors.firstName)}\n                helperText={formik.touched.firstName && formik.errors.firstName}\n                variant=\"outlined\"\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <PersonIcon />\n                    </InputAdornment>\n                  ),\n                }}\n              />\n              <TextField\n                fullWidth\n                id=\"lastName\"\n                name=\"lastName\"\n                label=\"Last Name\"\n                value={formik.values.lastName}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.lastName && Boolean(formik.errors.lastName)}\n                helperText={formik.touched.lastName && formik.errors.lastName}\n                variant=\"outlined\"\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <PersonIcon />\n                    </InputAdornment>\n                  ),\n                }}\n              />\n              <TextField\n                fullWidth\n                id=\"username\"\n                name=\"username\"\n                label=\"Username\"\n                value={formik.values.username}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.username && Boolean(formik.errors.username)}\n                helperText={formik.touched.username && formik.errors.username}\n                variant=\"outlined\"\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <PersonIcon />\n                    </InputAdornment>\n                  ),\n                }}\n              />\n              <TextField\n                fullWidth\n                id=\"email\"\n                name=\"email\"\n                label=\"Email\"\n                type=\"email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}\n                variant=\"outlined\"\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <EmailIcon />\n                    </InputAdornment>\n                  ),\n                }}\n              />\n              <TextField\n                fullWidth\n                id=\"password\"\n                name=\"password\"\n                label=\"New Password (leave blank to keep current)\"\n                type=\"password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.password && Boolean(formik.errors.password)}\n                helperText={formik.touched.password && formik.errors.password}\n                variant=\"outlined\"\n                autoComplete=\"new-password\"\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <LockIcon />\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </Box>\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n              <Button \n                type=\"submit\" \n                variant=\"contained\" \n                color=\"primary\" \n                disabled={isUpdatingUser || !changesMade}\n                startIcon={isUpdatingUser ? <CircularProgress size={20} color=\"inherit\" /> : <SaveIcon />}\n              >\n                {isUpdatingUser ? 'Saving...' : 'Save Changes'}\n              </Button>\n            </Box>\n          </form>\n          <Divider sx={{ mb: 6, mt: 6 }} />\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3, paddingLeft: '1rem' }}>\n          <Typography variant=\"h4\" sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n            <BrushIcon sx={{ mr: 1, color: 'var(--accent-color)' }} /> Appearance Settings\n          </Typography>\n          \n          <Box sx={{ display: 'flex', flexDirection: 'column', maxWidth: '300px', gap: 3 }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n              <Typography variant=\"body1\">Color Theme</Typography>\n              <ThemeToggle \n                theme={isDarkMode ? 'dark' : 'light'}\n                toggleTheme={(theme) => toggleTheme(theme)}\n              />\n            </Box>\n            \n            <Divider />\n            \n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n              <Typography variant=\"body1\">Default View Mode</Typography>\n              <ViewModeToggle \n                viewMode={preferredViewMode}\n                toggleViewMode={handleViewModeChange}\n              />\n            </Box>\n          </Box>\n          </Box>\n        </Paper>\n\n        {/* <ToastContainer position={isMobile ? \"bottom-center\" : \"top-right\"} autoClose={3000} /> */}\n      </Box>\n    </Container>\n  );\n};\n\nexport default Account; ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/AccountAdminDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/AccountMediaTypes.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":327,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8442,8445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8442,8445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":346,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8996,8999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8996,8999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":362,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9508,9511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9508,9511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { \n  Box, \n  Button, \n  Typography, \n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  AlertTitle,\n  CircularProgress\n} from '@mui/material';\nimport './accountMediaTypes.scss';\nimport { motion } from 'framer-motion';\nimport { toast } from 'react-toastify';\nimport MediaTypeUploader from '../components/MediaTypeUploader/MediaTypeUploader';\nimport { FaPlus, FaSync } from 'react-icons/fa';\nimport MediaTypeCard from '../components/MediaTypeUploader/components/MediaTypeCard';\nimport { \n  useMediaTypesWithUsageCounts,\n  useDeleteMediaType,\n  useArchiveMediaType,\n  useCheckMediaTypeUsage,\n  MediaType,\n  useUserProfile,\n} from '../hooks/query-hooks';\nimport { useQueryClient } from '@tanstack/react-query';\n\n// Separate Loading State Component\nconst LoadingState = () => (\n  <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\n    <CircularProgress />\n    <Typography variant=\"h6\" sx={{ ml: 2 }}>\n      Loading media types...\n    </Typography>\n  </Box>\n);\n\n// Empty State Component\nconst EmptyState = ({ onRefresh }: { onRefresh: () => void }) => (\n  <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '80vh' }}>\n    <Typography variant=\"h6\" gutterBottom>\n      No media types found\n    </Typography>\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      onClick={onRefresh}\n      startIcon={<FaSync />}\n      sx={{ mt: 2 }}\n    >\n      Reload Media Types\n    </Button>\n  </Box>\n);\n\n// Header Component\nconst Header = () => {\n  return (\n    <Typography variant=\"h1\" align=\"left\" sx={{ paddingBottom: \"2rem\" }}>\n      Account Media Types\n    </Typography>\n  );\n};\n\n// Action Bar Component\nconst ActionBar = ({ \n  mediaTypes,\n  userRole,\n  refreshCounts,\n  hardRefresh,\n  onCreateNew\n}: { \n  mediaTypes: MediaType[],\n  userRole: string | undefined,\n  refreshCounts: () => void,\n  hardRefresh: () => void,\n  onCreateNew: () => void\n}) => {\n  return (\n    <Box\n      className=\"header-component\"\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      padding=\"1rem\"\n      bgcolor=\"var(--secondary-color)\"\n      mb={2}\n    >\n      <div className=\"media-types-container\">\n        <Typography variant=\"h5\" align=\"left\">\n          Existing Media Types\n          {userRole === 'superAdmin' ? (\n            <Typography variant=\"caption\" color=\"primary\" sx={{ ml: 1 }}>\n              (Super Admin: Full control)\n            </Typography>\n          ) : (\n            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ ml: 1 }}>\n              (Admin: Limited editing)\n            </Typography>\n          )}\n        </Typography>\n        <Typography variant=\"caption\" display=\"block\" sx={{ mt: 0.5 }}>\n          Count: {mediaTypes.length}\n        </Typography>\n      </div>\n      \n      <div className=\"actions-container\" style={{ display: 'flex', gap: '8px', flexWrap: 'wrap', marginTop: '8px' }}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={onCreateNew}\n          startIcon={<FaPlus />}\n          disabled={userRole !== 'superAdmin'}\n        >\n          Create New Media Type\n        </Button>\n        \n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={refreshCounts}\n          startIcon={<FaSync />}\n        >\n          Refresh Counts\n        </Button>\n        \n        <Button\n          variant=\"contained\"\n          color=\"error\"\n          onClick={hardRefresh}\n        >\n          Hard Refresh\n        </Button>\n      </div>\n    </Box>\n  );\n};\n\n// Media Type Item Component\nconst MediaTypeItem = ({ \n  mediaType, \n  onEdit, \n  onDelete\n}: { \n  mediaType: MediaType, \n  onEdit: (id: string) => void, \n  onDelete: (id: string) => void\n}) => {\n  return (\n    <Box \n      sx={{ \n        borderRadius: 1,\n        padding: 2\n      }}\n    >\n      <MediaTypeCard \n        mediaType={mediaType}\n        onDelete={onDelete}\n        onEdit={onEdit}\n        onView={() => {}}\n      />\n    </Box>\n  );\n};\n\n// Media Type Grid Component\nconst MediaTypeGrid = ({\n  mediaTypes,\n  onEdit,\n  onDelete\n}: {\n  mediaTypes: MediaType[],\n  onEdit: (id: string) => void,\n  onDelete: (id: string) => void\n}) => {\n  return (\n    <Box \n      sx={{ \n        display: 'grid', \n        gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))', \n        gap: 2,\n        mt: 2\n      }}\n    >\n      {mediaTypes.map((mediaType) => (\n        <MediaTypeItem \n          key={mediaType._id}\n          mediaType={mediaType}\n          onEdit={onEdit}\n          onDelete={onDelete}\n        />\n      ))}\n    </Box>\n  );\n};\n\n// Delete Dialog Component\nconst DeleteDialog = ({ \n  open, \n  onClose, \n  onConfirm, \n  selectedId \n}: { \n  open: boolean, \n  onClose: () => void, \n  onConfirm: () => void, \n  selectedId: string | null \n}) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"delete-dialog-title\"\n    >\n      <DialogTitle id=\"delete-dialog-title\">\n        Media Type Management\n      </DialogTitle>\n      <DialogContent>\n        {selectedId && (\n          <>\n            <Alert severity=\"warning\" sx={{ mb: 2 }}>\n              <AlertTitle>Confirm Action</AlertTitle>\n              You are about to modify or delete a media type. This action cannot be undone.\n            </Alert>\n            <Typography variant=\"body1\">\n              Do you want to proceed with this action? Media files using this type will be preserved.\n            </Typography>\n          </>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button onClick={onConfirm} color=\"error\" variant=\"contained\">\n          Confirm\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// Main component with TanStack Query\nconst AccountMediaTypes = () => {\n  // State\n  const [open, setOpen] = useState(false);\n  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\n  const [editMediaTypeId, setEditMediaTypeId] = useState<string | null>(null);\n  const [selectedMediaTypeId, setSelectedMediaTypeId] = useState<string | null>(null);\n\n  const { data: userProfile, isLoading: isUserLoading, error: userError } = useUserProfile();\n\n  // REDUX: Get user role (replace with TanStack Query user profile)\n  // const userRole = useSelector((state: RootState) => state.user.currentUser.role);\n  const userRole = userProfile?.role;\n  \n  // TanStack Query Client\n  const queryClient = useQueryClient();\n\n  // Fetch media types with usage counts\n  const { \n    data: mediaTypes = [], \n    isLoading, \n    error, \n    refetch \n  } = useMediaTypesWithUsageCounts(userProfile);\n  \n  // Use the query for a specific media type usage (when needed)\n  const { \n    data: usageData, \n    refetch: refetchUsage \n  } = useCheckMediaTypeUsage(selectedMediaTypeId || '');\n  \n  // Mutation hooks\n  const { mutateAsync: deleteMediaTypeMutation } = useDeleteMediaType();\n  const { mutateAsync: archiveMediaTypeMutation } = useArchiveMediaType();\n  \n  // Handlers\n  const handleEditClick = (mediaTypeId: string) => {\n    setEditMediaTypeId(mediaTypeId);\n    setOpen(true);\n  };\n  \n  const handleClose = () => {\n    setOpen(false);\n    setEditMediaTypeId(null);\n  };\n\n  const handleDeleteClick = (mediaTypeId: string) => {\n    setSelectedMediaTypeId(mediaTypeId);\n    setConfirmDialogOpen(true);\n    \n    // Prefetch the usage count\n    if (mediaTypeId) {\n      refetchUsage();\n    }\n  };\n\n  const handleConfirmDelete = async () => {\n    if (!selectedMediaTypeId) return;\n    \n    try {\n      // Find selected media type\n      const mediaType = mediaTypes.find(type => type._id === selectedMediaTypeId);\n      if (!mediaType) return;\n      \n      // Get the usage count\n      const count = usageData?.count || mediaType.usageCount || 0;\n      \n      if (count > 0) {\n        // Archive if in use\n        await archiveMediaTypeMutation(selectedMediaTypeId);\n        toast.success(`Media type \"${mediaType.name}\" archived (${count} files using it)`);\n      } else {\n        // Delete if not in use\n        await deleteMediaTypeMutation(selectedMediaTypeId);\n        // Toast handled by the mutation hook\n      }\n      \n      // Reset dialog state\n      setConfirmDialogOpen(false);\n      setSelectedMediaTypeId(null);\n      \n      // Refresh all media types\n      refetch();\n    } catch (error: any) {\n      console.error('Error deleting/archiving media type:', error);\n      toast.error('Operation failed: ' + (error.message || 'Unknown error'));\n      setConfirmDialogOpen(false);\n    }\n  };\n\n  const handleCancelDelete = () => {\n    setConfirmDialogOpen(false);\n    setSelectedMediaTypeId(null);\n  };\n\n  // Handle manual refresh of counts\n  const handleRefreshCounts = async () => {\n    toast.info('Refreshing media type counts...');\n    \n    try {\n      await refetch();\n      toast.success('All media type counts updated');\n    } catch (error: any) {\n      console.error('Error refreshing counts:', error);\n      toast.error('Error updating counts: ' + (error.message || 'Unknown error'));\n    }\n  };\n  \n  // Handle hard refresh - clear cache and refetch\n  const handleHardRefresh = async () => {\n    try {\n      // Clear all media types from the query cache\n      queryClient.invalidateQueries({ queryKey: ['mediaTypes'] });\n      \n      // Refetch fresh data\n      await refetch();\n      \n      toast.success('Media types reloaded');\n    } catch (error: any) {\n      console.error('Error during hard refresh:', error);\n      toast.error('Failed to reload media types: ' + (error.message || 'Unknown error'));\n    }\n  };\n\n  // CHECK USER PROFILE LOADING AND ERROR FIRST\n  if (isUserLoading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\n        <CircularProgress />\n        <Typography variant=\"h6\" sx={{ ml: 2 }}>\n          Loading user data...\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (userError || !userProfile) {\n    return (\n      <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '80vh' }}>\n        <Typography variant=\"h5\" color=\"error\" gutterBottom>\n          Error Loading User Profile\n        </Typography>\n        <Typography>\n          {userError?.message || \"Could not load user profile. Please try logging in again.\"}\n        </Typography>\n        <Button component=\"a\" href=\"/login\" variant=\"contained\" sx={{ mt: 2 }}>\n          Go to Login\n        </Button>\n      </Box>\n    );\n  }\n  \n  // Handle media types loading state AFTER user profile is loaded\n  if (isLoading) {\n    return <LoadingState />;\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '80vh' }}>\n        <Typography variant=\"h6\" color=\"error\" gutterBottom>\n          Error loading media types\n        </Typography>\n        <Typography variant=\"body1\" sx={{ mb: 2 }}>\n          {error instanceof Error ? error.message : 'An unknown error occurred'}\n        </Typography>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => refetch()}\n          startIcon={<FaSync />}\n        >\n          Retry\n        </Button>\n      </Box>\n    );\n  }\n\n  // Render empty state\n  if (mediaTypes.length === 0) {\n    return <EmptyState onRefresh={handleHardRefresh} />;\n  }\n\n  // Main render\n  return (\n    <motion.div\n      id=\"account-media-types\"\n      initial={{ opacity: 0, y: 50 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -50 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Box className=\"account-media-types\" sx={{ width: \"100%\", overflow: \"hidden\" }}>\n        <Header />\n\n        {/* Media Type Uploader Dialog */}\n        <MediaTypeUploader \n          open={open} \n          onClose={handleClose} \n          editMediaTypeId={editMediaTypeId} \n        />\n      \n        {/* Main content */}\n        <ActionBar \n          mediaTypes={mediaTypes}\n          userRole={userRole}\n          refreshCounts={handleRefreshCounts}\n          hardRefresh={handleHardRefresh}\n          onCreateNew={() => handleEditClick('')}\n        />\n        \n        <MediaTypeGrid \n          mediaTypes={mediaTypes}\n          onEdit={handleEditClick}\n          onDelete={handleDeleteClick}\n        />\n      </Box>\n\n      {/* Delete/Archive Confirmation Dialog */}\n      <DeleteDialog\n        open={confirmDialogOpen}\n        onClose={handleCancelDelete}\n        onConfirm={handleConfirmDelete}\n        selectedId={selectedMediaTypeId}\n      />\n      \n      {/* <ToastContainer position=\"top-right\" /> */}\n    </motion.div>\n  );\n};\n\nexport default AccountMediaTypes;","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/AccountTags.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":11,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":11,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stack' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isTagsError' is assigned a value but never used.","line":60,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showLocalToasts' is assigned a value but never used.","line":80,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowLocalToasts' is assigned a value but never used.","line":80,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":45},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":113,"column":21,"nodeType":"Identifier","endLine":113,"endColumn":28},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":122,"column":25,"nodeType":"Identifier","endLine":122,"endColumn":32},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":125,"column":21,"nodeType":"Identifier","endLine":125,"endColumn":32},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":148,"column":26,"nodeType":"Identifier","endLine":148,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5126,5129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5126,5129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5144,5147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5144,5147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"React.useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":164,"column":3,"nodeType":"MemberExpression","endLine":164,"endColumn":18},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":188,"column":27,"nodeType":"Identifier","endLine":188,"endColumn":38},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":203,"column":26,"nodeType":"Identifier","endLine":203,"endColumn":37},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":210,"column":27,"nodeType":"Identifier","endLine":210,"endColumn":38},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":215,"column":27,"nodeType":"Identifier","endLine":215,"endColumn":38},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":221,"column":24,"nodeType":"Identifier","endLine":221,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":222,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7038,7041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7038,7041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":222,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7058,7061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7058,7061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":229,"column":25,"nodeType":"Identifier","endLine":229,"endColumn":32},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":234,"column":28,"nodeType":"Identifier","endLine":234,"endColumn":39},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":238,"column":27,"nodeType":"Identifier","endLine":238,"endColumn":38},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":243,"column":29,"nodeType":"Identifier","endLine":243,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":431,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":431,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15137,15140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15137,15140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":543,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":543,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19746,19749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19746,19749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from \"react\";\nimport TagCategoryManager from \"../components/TagCategoryManager/TagCategoryManager\";\nimport { toast } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport { \n  useTagCategories,\n  useUserProfile,\n  useTags,\n  useCreateTag\n} from \"../hooks/query-hooks\";\nimport type { User, Tag } from \"../hooks/query-hooks\";\n\nimport { \n  Box, \n  Button, \n  TextField, \n  IconButton, \n  Typography, \n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Paper,\n  InputAdornment,\n  useMediaQuery,\n  Theme,\n  Container,\n  Alert,\n  Tabs,\n  Tab,\n  Chip,\n  Pagination,\n  InputBase,\n  Card,\n  CardContent,\n  Stack,\n  CircularProgress,\n  alpha,\n  LinearProgress\n} from \"@mui/material\";\nimport { FaEdit, FaTrash, FaPlus, FaSearch, FaTimes, FaTag, FaRedo } from \"react-icons/fa\";\nimport { motion } from \"framer-motion\";\nimport { normalizeTag, normalizeTagForComparison, validateTag, areTagsEquivalent } from \"../utils/tagUtils\";\nimport \"./accountTags.scss\";\n\nconst TAGS_PER_PAGE = 30;\n\nconst AccountTags: React.FC = () => {\n  // --- User Profile ---\n  const { \n    data: userProfile, \n    isLoading: isLoadingUserProfile, \n    isError: isUserProfileError \n  } = useUserProfile();\n\n  // Replace Redux with TanStack Query\n  const { \n    data: tags = [], \n    isLoading: isTagsLoading,\n    isError: isTagsError, \n    refetch: refetchTags \n  } = useTags(userProfile);\n  \n  const {\n    data: tagCategories = [],\n    isLoading: isCategoriesLoading,\n    refetch: refetchCategories\n  } = useTagCategories(userProfile);\n  \n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [newTagName, setNewTagName] = useState(\"\");\n  const [editingTag, setEditingTag] = useState<{ id: string; name: string } | null>(null);\n  const [tagToDelete, setTagToDelete] = useState<string | null>(null);\n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('sm'));\n  const [tagError, setTagError] = useState<string | null>(null);\n  const [isResetting, setIsResetting] = useState(false);\n  const [activeTab, setActiveTab] = useState(0);\n  const [page, setPage] = useState(1);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [showLocalToasts, setShowLocalToasts] = useState(false);\n\n  // Get the mutation function from useCreateTag\n  const { mutate: createTagMutation, isPending: isCreatingTag } = useCreateTag();\n\n  // --- Top-level Loading and Auth Checks ---\n  if (isLoadingUserProfile) {\n    return (\n      <Container sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\n        <CircularProgress />\n        <Typography sx={{ ml: 2 }}>Loading user information...</Typography>\n      </Container>\n    );\n  }\n\n  if (isUserProfileError || !userProfile) {\n    return (\n      <Container sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', height: '80vh', textAlign: 'center' }}>\n        <Typography variant=\"h5\" color=\"textSecondary\" gutterBottom>\n          {isUserProfileError ? 'Error Loading Profile' : 'Access Denied'}\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\" sx={{ mb: 2 }}>\n          {isUserProfileError ? 'Could not load your profile. Please try again later.' : 'Please log in to manage tags.'}\n        </Typography>\n        <Button variant=\"contained\" onClick={() => window.location.href = '/login'}>\n          Go to Login\n        </Button>\n      </Container>\n    );\n  }\n  // --- End Top-level Loading and Auth Checks ---\n\n  // Combine loading states\n  const isLoading = useMemo(() => \n    isTagsLoading || \n    isCategoriesLoading || \n    isResetting || \n    isRefreshing ||\n    isCreatingTag,\n  [isTagsLoading, isCategoriesLoading, isResetting, isRefreshing, isCreatingTag]);\n\n  // Memoized value for total tag count\n  const totalTagCount = useMemo(() => tags.length, [tags]);\n\n  // Fetch data function to refresh both tags and categories\n  const fetchData = useCallback(async (force = false) => {\n    if (isLoading && !force) return;\n    \n    try {\n      setIsRefreshing(true);\n      // Only call refetchTags if it's a function (i.e., useTags is implemented)\n      // For now, we will only refetch categories as useTags is a placeholder.\n      await Promise.all([\n        typeof refetchTags === 'function' ? refetchTags() : Promise.resolve(),\n        refetchCategories()\n      ]);\n    } catch (error) {\n      console.error('Error fetching tag data:', error);\n      // Avoid showing toast if the error is due to refetchTags not being a function\n      if (!(error instanceof TypeError && error.message.includes('refetchTags is not a function'))) {\n        toast.error('Error refreshing data.');\n      }\n    } finally {\n      setIsRefreshing(false);\n    }\n  }, [isLoading, refetchTags, refetchCategories]); // Removed refetchTags from dependencies for now\n\n  // Tag validation logic\n  const validateNewTag = useCallback((tagName: string) => {\n    if (!tagName) return null;\n    \n    const validation = validateTag(tagName);\n    \n    // Check for duplicate tags (case-insensitive)\n    if (validation.valid && (tags as any[]).some((tag: any) => \n      areTagsEquivalent(tag.name, tagName)\n    )) {\n      return `Tag \"${tagName}\" already exists`;\n    } \n    \n    return validation.valid ? null : validation.message || null;\n  }, [tags]);\n\n  // Update tag error when tag name changes\n  React.useEffect(() => {\n    setTagError(validateNewTag(newTagName));\n  }, [newTagName, validateNewTag]);\n\n  // Reset tag data function\n  const handleResetData = async () => {\n    if (isResetting) return;\n    \n    try {\n      setIsResetting(true);\n      \n      // Refresh data with force flag\n      await fetchData(true);\n      \n      toast.success('Tag data refreshed successfully');\n    } catch (err) {\n      console.error('Failed to refresh data:', err);\n      toast.error('Failed to refresh tag data');\n    } finally {\n      setIsResetting(false);\n    }\n  };\n\n  // Create tag handler - using memoized validation\n  const handleCreateTag = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newTagName.trim() || !!tagError || isCreatingTag) {\n      if (tagError) {\n        toast.error(tagError);\n      }\n      return;\n    }\n    createTagMutation(normalizeTag(newTagName), {\n      onSuccess: () => {\n        setNewTagName(\"\");\n      },\n    });\n  }, [newTagName, tagError, isCreatingTag, createTagMutation]);\n\n  const handleKeyPress = useCallback((event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleCreateTag(event);\n    }\n  }, [handleCreateTag]);\n\n  const handleDeleteTag = useCallback(async () => {\n    toast.info(\"Tag deletion is temporarily disabled.\");\n    setTagToDelete(null);\n  }, []);\n\n  const handleUpdateTag = useCallback(async () => {\n    toast.info(\"Tag update is temporarily disabled.\");\n    setEditingTag(null);\n  }, []);\n\n  // Memoized filtered tags to prevent recalculation on each render\n  const filteredTags = useMemo(() => {\n    return (tags as any[]).filter((tag: any) =>\n      normalizeTagForComparison(tag.name).includes(normalizeTagForComparison(searchTerm))\n    );\n  }, [tags, searchTerm]);\n\n  // Pagination logic\n  const totalPages = Math.ceil(filteredTags.length / TAGS_PER_PAGE);\n  const paginatedTags = useMemo(() => {\n    const startIndex = (page - 1) * TAGS_PER_PAGE;\n    return filteredTags.slice(startIndex, startIndex + TAGS_PER_PAGE);\n  }, [filteredTags, page]);\n\n  const handleChangePage = useCallback((_event: React.ChangeEvent<unknown>, value: number) => {\n    setPage(value);\n  }, []);\n\n  const handleTabChange = useCallback((_event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  }, []);\n\n  // Clear search handler\n  const handleClearSearch = useCallback(() => {\n    setSearchTerm('');\n    setPage(1); // Reset to first page when search changes\n  }, []);\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0, transition: { duration: 0.3 } },\n    exit: { opacity: 0, y: 20, transition: { duration: 0.3 } },\n  };\n\n  return (\n    <motion.div\n      id=\"account-tags\"\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      exit=\"exit\"\n    >\n      <Container maxWidth=\"xl\" sx={{ py: 3 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Box>\n            <Typography variant=\"h1\" fontSize={{ xs: '2rem', md: '2.5rem' }}>Tag Management</Typography>\n          </Box>\n          <Button\n            variant=\"outlined\"\n            color=\"warning\"\n            startIcon={isResetting ? <CircularProgress size={16} color=\"inherit\" /> : <FaRedo />}\n            onClick={handleResetData}\n            disabled={isLoading}\n            size=\"small\"\n            sx={{ height: '36px' }}\n          >\n            {isResetting ? 'Refreshing...' : 'Refresh Tags'}\n          </Button>\n        </Box>\n        \n        {isLoading && (\n          <Box sx={{ width: '100%', mb: 3 }}>\n            <LinearProgress />\n          </Box>\n        )}\n\n        <Paper elevation={3} sx={{ borderRadius: '12px', bgcolor: 'background.paper', overflow: 'hidden' }}>\n          <Tabs \n            value={activeTab} \n            onChange={handleTabChange} \n            sx={{ \n              borderBottom: 1, \n              borderColor: 'divider',\n              bgcolor: theme => alpha(theme.palette.primary.main, 0.05)\n            }}\n            variant=\"fullWidth\"\n          >\n            <Tab label={`Tag Categories (${tagCategories.length})`} />\n            <Tab label={`Create & Manage Tags (${totalTagCount})`} />\n          </Tabs>\n\n          {/* Tag Categories Tab */}\n          <Box sx={{ display: activeTab === 0 ? 'block' : 'none', p: { xs: 2, md: 3 } }}>\n            <TagCategoryManager />\n          </Box>\n\n          {/* Create & Manage Tags Tab */}\n          <Box sx={{ display: activeTab === 1 ? 'block' : 'none', p: { xs: 2, md: 3 } }}>\n            {/* Create New Tag Section */}\n            <Card variant=\"outlined\" sx={{ mb: 4 }}>\n              <CardContent>\n                <Typography variant=\"h6\" sx={{ mb: 2 }}>Create New Tag</Typography>\n                <Box component=\"form\" onSubmit={handleCreateTag} sx={{ display: 'flex', flexDirection: { xs: 'column', sm: 'row' }, alignItems: 'flex-start', gap: 2 }}>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    label=\"New Tag Name\"\n                    value={newTagName}\n                    onChange={(e) => setNewTagName(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"Enter tag name\"\n                    size=\"small\"\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <FaTag size={16} />\n                        </InputAdornment>\n                      ),\n                    }}\n                    error={!!tagError}\n                    helperText={tagError || \" \"}\n                  />\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!newTagName.trim() || !!tagError || isLoading}\n                    sx={{ \n                      height: '40px', \n                      whiteSpace: 'nowrap',\n                      minWidth: { xs: '100%', sm: '130px' }\n                    }}\n                    startIcon={<FaPlus />}\n                  >\n                    Add Tag\n                  </Button>\n                </Box>\n              </CardContent>\n            </Card>\n            \n            {/* Manage Existing Tags Section */}\n            <Card variant=\"outlined\">\n              <CardContent>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n                  <Typography variant=\"h6\">Manage Existing Tags</Typography>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <Chip \n                      label={`${filteredTags.length} tags`} \n                      color=\"primary\" \n                      variant=\"outlined\" \n                      size=\"small\" \n                    />\n                    <IconButton \n                      onClick={() => fetchData(true)}\n                      size=\"small\"\n                      disabled={isLoading}\n                      title=\"Refresh tags\"\n                    >\n                      <FaRedo size={14} />\n                    </IconButton>\n                  </Box>\n                </Box>\n                \n                <Paper\n                  component=\"form\"\n                  sx={{ \n                    display: 'flex', \n                    alignItems: 'center', \n                    width: '100%', \n                    mb: 3,\n                    border: '1px solid',\n                    borderColor: 'divider',\n                    boxShadow: 'none',\n                    p: '2px 4px',\n                  }}\n                >\n                  <InputAdornment position=\"start\" sx={{ pl: 1 }}>\n                    <FaSearch size={16} color=\"action\" />\n                  </InputAdornment>\n                  <InputBase\n                    sx={{ ml: 1, flex: 1 }}\n                    placeholder=\"Search tags\"\n                    value={searchTerm}\n                    onChange={(e) => {\n                      setSearchTerm(e.target.value);\n                      if (page !== 1) setPage(1);  // Reset to first page on search\n                    }}\n                    inputProps={{ 'aria-label': 'search tags' }}\n                  />\n                  {searchTerm && (\n                    <IconButton onClick={handleClearSearch} size=\"small\" sx={{ color: 'text.secondary' }}>\n                      <FaTimes size={14} />\n                    </IconButton>\n                  )}\n                </Paper>\n                \n                {isLoading ? (\n                  <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n                    <CircularProgress size={40} />\n                  </Box>\n                ) : filteredTags.length === 0 ? (\n                  <Box sx={{ textAlign: 'center', p: 4 }}>\n                    <Typography variant=\"body1\" color=\"text.secondary\">\n                      {tags.length === 0 \n                        ? \"No tags found. Create your first tag to get started!\" \n                        : \"No tags match your search criteria.\"}\n                    </Typography>\n                  </Box>\n                ) : (\n                  <>\n                    <Box sx={{ \n                      display: 'grid',\n                      gridTemplateColumns: {\n                        xs: '1fr',\n                        sm: 'repeat(2, 1fr)',\n                        md: 'repeat(3, 1fr)',\n                        lg: 'repeat(4, 1fr)',\n                        xl: 'repeat(6, 1fr)'\n                      },\n                      gap: 1.5\n                    }}>\n                      {paginatedTags.map((tag: any) => (\n                        <motion.div\n                          key={tag._id}\n                          initial={{ opacity: 0, y: 5 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ duration: 0.2 }}\n                        >\n                          <Paper\n                            elevation={0}\n                            sx={{\n                              p: 1,\n                              display: 'flex',\n                              alignItems: 'center',\n                              justifyContent: 'space-between',\n                              borderRadius: '8px',\n                              border: '1px solid',\n                              borderColor: 'divider',\n                              transition: 'all 0.2s ease',\n                              height: '36px',\n                              '&:hover': {\n                                bgcolor: alpha('#000', 0.03),\n                                borderColor: 'primary.light',\n                              }\n                            }}\n                          >\n                            <Typography \n                              variant=\"body2\" \n                              sx={{ \n                                overflow: 'hidden',\n                                textOverflow: 'ellipsis',\n                                whiteSpace: 'nowrap',\n                                flex: 1,\n                                fontSize: '0.875rem',\n                                pl: 0.5\n                              }}\n                            >\n                              {tag.name}\n                            </Typography>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <IconButton \n                                size=\"small\" \n                                onClick={() => setEditingTag({ id: tag._id, name: tag.name })}\n                                sx={{ fontSize: '0.75rem' }}\n                              >\n                                <FaEdit size={14} />\n                              </IconButton>\n                              <IconButton \n                                size=\"small\" \n                                color=\"error\" \n                                onClick={() => setTagToDelete(tag._id)}\n                                sx={{ fontSize: '0.75rem' }}\n                              >\n                                <FaTrash size={14} />\n                              </IconButton>\n                            </Box>\n                          </Paper>\n                        </motion.div>\n                      ))}\n                    </Box>\n                    \n                    {totalPages > 1 && (\n                      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>\n                        <Pagination \n                          count={totalPages} \n                          page={page} \n                          onChange={handleChangePage} \n                          color=\"primary\" \n                          size={isMobile ? \"small\" : \"medium\"}\n                        />\n                      </Box>\n                    )}\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </Box>\n        </Paper>\n      </Container>\n      \n      {/* Edit Tag Dialog */}\n      <Dialog open={!!editingTag} onClose={() => setEditingTag(null)}>\n        <DialogTitle>Edit Tag</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Tag Name\"\n            type=\"text\"\n            fullWidth\n            variant=\"outlined\"\n            value={editingTag?.name || ''}\n            onChange={(e) => setEditingTag(prev => prev ? { ...prev, name: e.target.value } : null)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setEditingTag(null)}>Cancel</Button>\n          <Button onClick={handleUpdateTag} variant=\"contained\" color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      {/* Delete Confirmation Dialog */}\n      <Dialog open={!!tagToDelete} onClose={() => setTagToDelete(null)}>\n        <DialogTitle>Delete Tag</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete this tag?\n            This action cannot be undone.\n          </Typography>\n          {tagToDelete && (\n            <Typography variant=\"subtitle1\" sx={{ mt: 2, fontWeight: 'bold' }}>\n              {tags.find((tag: any) => tag._id === tagToDelete)?.name || 'Unknown Tag'}\n            </Typography>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setTagToDelete(null)}>Cancel</Button>\n          <Button onClick={handleDeleteTag} color=\"error\" variant=\"contained\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </motion.div>\n  );\n};\n\nexport default AccountTags;\n","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/AccountUsers.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4833,4836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4833,4836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5617,5620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5617,5620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { DataGrid, GridColDef, GridToolbar, GridRenderCellParams } from '@mui/x-data-grid';\nimport { \n  Avatar, \n  Box, \n  Button, \n  Chip,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  IconButton, \n  InputLabel,\n  MenuItem,\n  Select,\n  Tab,\n  Tabs,\n  TextField,\n  Tooltip, \n  Typography,\n  useMediaQuery,\n  Theme,\n  CircularProgress,\n  Alert,\n} from '@mui/material';\nimport { toast } from 'react-toastify';\nimport { FaTrash, FaEdit, FaEnvelope, FaTimes, FaUserPlus } from 'react-icons/fa';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { motion } from 'framer-motion';\nimport './accountUsers.scss';\nimport { SelectChangeEvent } from '@mui/material';\nimport InvitationForm from '../components/UserInvitation/InvitationForm';\nimport InvitationList from '../components/UserInvitation/InvitationList';\nimport { \n  useUserProfile, \n  useAllUsers, \n  useUpdateUserProfile,\n  User\n} from '../hooks/query-hooks';\n\n// Interface for tab panel props\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\n// Tab Panel component\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`user-management-tabpanel-${index}`}\n      aria-labelledby={`user-management-tab-${index}`}\n      className=\"tab-panel\"\n      {...other}\n    >\n      {value === index && (\n        <Box className=\"custom-tab-panel-content\">\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\n// Tab access props\nfunction a11yProps(index: number) {\n  return {\n    id: `user-management-tab-${index}`,\n    'aria-controls': `user-management-tabpanel-${index}`,\n  };\n}\n\nconst AccountUsers: React.FC = () => {\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [userToEdit, setUserToEdit] = useState<User | null>(null);\n  const [userIdToDelete, setUserIdToDelete] = useState<string | null>(null);\n  const [editFormData, setEditFormData] = useState<Partial<User>>({\n    firstName: '',\n    lastName: '',\n    email: '',\n    username: '',\n    role: 'user'\n  });\n  \n  const [tabValue, setTabValue] = useState(0);\n  const [newUserDialog, setNewUserDialog] = useState(false);\n  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);\n  \n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('sm'));\n\n  const { data: currentUserProfile, isLoading: isCurrentUserLoading, error: currentUserError } = useUserProfile();\n  const { \n    data: usersData = [], \n    isLoading: isLoadingUsers, \n    error: usersError\n  } = useAllUsers({\n    enabled: !!currentUserProfile && ((currentUserProfile as User).role === 'admin' || (currentUserProfile as User).role === 'superAdmin')\n  });\n  const { mutate: updateUserMutate, isPending: isUpdatingUser } = useUpdateUserProfile();\n\n  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n  \n  const handleInvitationSent = () => {\n    setNewUserDialog(false);\n    setRefreshTrigger(prev => prev + 1);\n  };\n\n  const handleEdit = (user: User) => {\n    setUserToEdit(user);\n    setEditFormData({\n      firstName: user.firstName || '',\n      lastName: user.lastName || '',\n      email: user.email || '',\n      username: user.username || '',\n      role: user.role || 'user'\n    });\n    setEditDialogOpen(true);\n  };\n\n  const handleEditSubmit = async () => {\n    if (!userToEdit || !userToEdit._id) {\n      toast.error(\"User data is incomplete for update.\");\n      return;\n    }\n\n    const payload: Partial<User> & { _id: string } = { _id: userToEdit._id };\n    let hasChanges = false;\n\n    if (editFormData.firstName !== undefined && editFormData.firstName !== userToEdit.firstName) {\n      payload.firstName = editFormData.firstName;\n      hasChanges = true;\n    }\n    if (editFormData.lastName !== undefined && editFormData.lastName !== userToEdit.lastName) {\n      payload.lastName = editFormData.lastName;\n      hasChanges = true;\n    }\n    if (editFormData.email !== undefined && editFormData.email !== userToEdit.email) {\n      payload.email = editFormData.email;\n      hasChanges = true;\n    }\n    if (editFormData.role !== undefined && editFormData.role !== userToEdit.role) {\n      payload.role = editFormData.role;\n      hasChanges = true;\n    }\n    \n    if (!hasChanges) {\n      toast.info(\"No changes were made.\");\n      setEditDialogOpen(false);\n      return;\n    }\n\n    updateUserMutate(payload, {\n      onSuccess: (updatedUser) => {\n        toast.success(`User ${updatedUser.username || 'profile'} updated successfully`);\n        setEditDialogOpen(false);\n        setUserToEdit(null);\n      },\n      onError: (error: any) => {\n        toast.error(`Failed to update user: ${error.message || 'Unknown error'}`);\n      }\n    });\n  };\n\n  const handleDeleteClick = (id: string) => {\n    setUserIdToDelete(id);\n    setDeleteDialogOpen(true);\n  };\n\n  const handleDeleteConfirm = () => {\n    console.log('Delete user action for ID:', userIdToDelete);\n    toast.warn(\"Delete functionality not fully implemented yet.\");\n    setDeleteDialogOpen(false);\n    setUserIdToDelete(null);\n  };\n\n  const handleFieldChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | SelectChangeEvent<string>\n  ) => {\n    const { name, value } = e.target;\n    setEditFormData(prev => ({\n      ...prev,\n      [name as string]: value\n    }));\n  };\n\n  const UserCell = ({ params }: { params: GridRenderCellParams<any, User> }) => {\n    const { value } = params;\n    const user = params.row;\n    \n    return (\n      <div className=\"user-cell\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'start', gap: '8px', height: '100%' }}>\n        <Avatar \n          sx={{ \n            width: 32, \n            height: 32,\n            bgcolor: `var(--${user.role === 'superAdmin' ? 'accent-color' : user.role === 'admin' ? 'primary-color' : 'secondary-color'})` \n          }} \n          src={user.avatar || undefined}\n        >\n          {(user.firstName?.[0] || user.username?.[0] || 'U').toUpperCase()}\n        </Avatar>\n        <RouterLink className=\"user-link\" to={`/user/${user._id}`} style={{ textDecoration: 'none', color: 'var(--text-secondary)' }}>\n          <Typography variant=\"body2\" sx={{ '&:hover': { textDecoration: 'underline' }}}>\n            {value?.toString()}\n          </Typography>\n        </RouterLink>\n      </div>\n    );\n  };\n\n  const columns: GridColDef<User>[] = [\n    { \n      field: 'username', \n      headerName: 'Username',\n      align: 'center',\n      flex: 1,\n      renderCell: (params) => <UserCell params={params} />\n    },\n    {\n      field: 'email',\n      headerName: 'Email',\n      flex: 1.5,\n      renderCell: (params) => (\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          <FaEnvelope style={{ marginRight: '8px', color: 'var(--text-secondary)' }} />\n          {params.value}\n        </Box>\n      )\n    },\n    {\n      field: 'role',\n      headerName: 'Role',\n      flex: 0.75,\n      renderCell: (params) => (\n        <Chip \n          label={params.value} \n          size=\"small\" \n          color={params.value === 'admin' || params.value === 'superAdmin' ? 'primary' : 'default'} \n          variant=\"outlined\"\n        />\n      )\n    },\n    {\n      field: 'actions',\n      headerName: 'Actions',\n      flex: 0.75,\n      sortable: false,\n      filterable: false,\n      renderCell: (params) => (\n        <Box>\n          <Tooltip title=\"Edit User\">\n            <IconButton \n              onClick={() => handleEdit(params.row)} \n              color=\"primary\" \n              size=\"small\"\n              disabled={isUpdatingUser || editDialogOpen}\n            >\n              <FaEdit />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Delete User (Not Implemented)\">\n            <IconButton \n              onClick={() => handleDeleteClick(params.row._id!)} \n              color=\"error\" \n              size=\"small\"\n              disabled={isUpdatingUser || editDialogOpen}\n            >\n              <FaTrash />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      )\n    }\n  ];\n  \n  if (!isMobile) {\n    columns.splice(1, 0, { field: 'firstName', headerName: 'First Name', flex: 1 });\n    columns.splice(2, 0, { field: 'lastName', headerName: 'Last Name', flex: 1 });\n  }\n\n  if (isCurrentUserLoading) {\n    return (\n      <Box className=\"loading-indicator-container\">\n        <CircularProgress />\n        <Typography className=\"loading-indicator-text\">Loading your permissions...</Typography>\n      </Box>\n    );\n  }\n\n  if (currentUserError) {\n    return <Alert severity=\"error\" className=\"error-alert-message\">Error loading your profile: {currentUserError?.message || 'An unknown error occurred.'}</Alert>;\n  }\n\n  if (!currentUserProfile || ((currentUserProfile as User).role !== 'admin' && (currentUserProfile as User).role !== 'superAdmin')) {\n    return (\n      <Box className=\"access-denied-container\">\n        <Typography variant=\"h4\" color=\"error\" gutterBottom>\n          Access Denied\n        </Typography>\n        <Typography variant=\"body1\">\n          You do not have permission to manage users.\n        </Typography>\n      </Box>\n    );\n  }\n  \n  return (\n    <motion.div \n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n      className=\"account-users-page-container\"\n    >\n      <Typography \n        variant={isMobile ? \"h4\" : \"h2\"} \n        gutterBottom \n        className=\"account-users-title\"\n      >\n        User Management\n      </Typography>\n      <Box className=\"account-users-tabs-container\">\n    \n          <Tabs \n            value={tabValue} \n            onChange={handleTabChange} \n            aria-label=\"user management tabs\" \n            variant={isMobile ? \"fullWidth\" : \"standard\"}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            sx={{ borderBottom: 1, borderColor: 'divider' }}\n          >\n            <Tab label=\"All Users\" {...a11yProps(0)} />\n            <Tab label=\"Invitations\" {...a11yProps(1)} />\n          </Tabs>\n          <Box className=\"account-users-invite-button-container\">\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              startIcon={<FaUserPlus />}\n              onClick={() => setNewUserDialog(true)}\n            >\n              Invite User\n            </Button>\n          </Box>\n      </Box>\n      \n\n      <TabPanel value={tabValue} index={0}>\n       \n          {isLoadingUsers && !usersData.length ? (\n            <Box className=\"loading-indicator-container\">\n              <CircularProgress />\n              <Typography className=\"loading-indicator-text\">Loading users list...</Typography>\n            </Box>\n          ) : usersError ? (\n            <Alert severity=\"error\" className=\"error-alert-message\">Error loading users: {usersError?.message || 'An unknown error occurred.'}</Alert>\n          ) : (\n            <DataGrid\n              className=\"users-data-grid\"\n              rows={usersData}\n              columns={columns}\n              getRowId={(row) => row._id!}\n              pageSizeOptions={[10, 25, 50]}\n              initialState={{\n                pagination: { paginationModel: { pageSize: 10 } },\n              }}\n              slots={{ toolbar: GridToolbar }}\n              slotProps={{\n                toolbar: {\n                  className: 'custom-data-grid-toolbar',\n                  showQuickFilter: false,\n                  printOptions: { disableToolbarButton: true },\n                  csvOptions: { disableToolbarButton: true },\n                }\n              }}\n              autoHeight\n              getRowClassName={(params) =>\n                params.indexRelativeToCurrentPage % 2 === 0 ? 'datagrid-row--even' : 'datagrid-row--odd'\n              }\n            />\n          )}\n      </TabPanel>\n      \n      <TabPanel value={tabValue} index={1}>\n        <InvitationList refreshTrigger={refreshTrigger} />\n      </TabPanel>\n\n      {/* Edit User Dialog */}\n      <Dialog open={editDialogOpen} onClose={() => setEditDialogOpen(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle sx={{ borderBottom: '1px solid var(--border-color)' }}>Edit User Profile</DialogTitle>\n        <DialogContent sx={{ paddingTop: '16px !important' }}>\n          {userToEdit && (\n            <Box component=\"form\" noValidate autoComplete=\"off\">\n              <TextField\n                margin=\"dense\"\n                label=\"First Name\"\n                type=\"text\"\n                fullWidth\n                variant=\"outlined\"\n                name=\"firstName\"\n                value={editFormData.firstName || ''}\n                onChange={handleFieldChange}\n                disabled={isUpdatingUser}\n              />\n              <TextField\n                margin=\"dense\"\n                label=\"Last Name\"\n                type=\"text\"\n                fullWidth\n                variant=\"outlined\"\n                name=\"lastName\"\n                value={editFormData.lastName || ''}\n                onChange={handleFieldChange}\n                disabled={isUpdatingUser}\n              />\n              <TextField\n                margin=\"dense\"\n                label=\"Email\"\n                type=\"email\"\n                fullWidth\n                variant=\"outlined\"\n                name=\"email\"\n                value={editFormData.email || ''}\n                onChange={handleFieldChange}\n                disabled={isUpdatingUser}\n              />\n              <TextField\n                margin=\"dense\"\n                label=\"Username (cannot be changed)\"\n                type=\"text\"\n                fullWidth\n                variant=\"outlined\"\n                name=\"username\"\n                value={editFormData.username || ''}\n                disabled\n              />\n              <FormControl fullWidth margin=\"dense\" variant=\"outlined\" disabled={isUpdatingUser}>\n                <InputLabel id=\"role-select-label\">Role</InputLabel>\n                <Select\n                  labelId=\"role-select-label\"\n                  label=\"Role\"\n                  name=\"role\"\n                  value={editFormData.role || 'user'}\n                  onChange={(e) => handleFieldChange(e as SelectChangeEvent<string>)}\n                >\n                  <MenuItem value=\"user\">User</MenuItem>\n                  <MenuItem value=\"distributor\">Distributor</MenuItem>\n                  <MenuItem value=\"admin\">Admin</MenuItem>\n                  <MenuItem value=\"superAdmin\">Super Admin</MenuItem>\n                </Select>\n              </FormControl>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions sx={{ borderTop: '1px solid var(--border-color)', padding: '16px 24px' }}>\n          <Button onClick={() => setEditDialogOpen(false)} color=\"inherit\" disabled={isUpdatingUser}>Cancel</Button>\n          <Button onClick={handleEditSubmit} color=\"primary\" variant=\"contained\" disabled={isUpdatingUser} startIcon={isUpdatingUser ? <CircularProgress size={16} /> : null}>\n            {isUpdatingUser ? 'Saving...' : 'Save Changes'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog - Placeholder */}\n      <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\n        <DialogTitle>Confirm Delete</DialogTitle>\n        <DialogContent>\n          <Typography>Are you sure you want to delete this user? This action cannot be undone.</Typography>\n          <Typography variant=\"caption\" color=\"error\">(Delete functionality not fully implemented)</Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteDialogOpen(false)} color=\"inherit\">Cancel</Button>\n          <Button onClick={handleDeleteConfirm} color=\"error\" variant=\"contained\">Delete</Button>\n        </DialogActions>\n      </Dialog>\n      \n      {/* Add New User / Send Invitation Dialog */}\n      <Dialog open={newUserDialog} onClose={() => setNewUserDialog(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          Add New User / Send Invitation\n          <IconButton onClick={() => setNewUserDialog(false)} size=\"small\">\n            <FaTimes />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <InvitationForm onInvitationSent={handleInvitationSent} />\n        </DialogContent>\n      </Dialog>\n\n    </motion.div>\n  );\n};\n\nexport default AccountUsers;","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/AuthPage.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/AuthPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":60,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentError' is assigned a value but never used.","line":74,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// cSpell:ignore Toastify\n\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Box, CircularProgress, Container, Alert, Grid, Link } from '@mui/material';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useLogin, useRegister } from '../hooks/query-hooks'; // Import TanStack Query hooks\n\nconst AuthPage: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [formData, setFormData] = useState({ firstName: '', lastName: '', email: '', password: '' });\n  const [showForm, setShowForm] = useState(true);\n  const [emailVerified, setEmailVerified] = useState(false);\n\n  // Instantiate mutation hooks\n  const { mutate: loginMutate, isPending: isPendingLogin, error: loginError } = useLogin();\n  const { mutate: registerMutate, isPending: isPendingRegister, error: registerError } = useRegister();\n\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const verified = params.get('emailVerified');\n    \n    if (verified === 'true') {\n      setEmailVerified(true);\n      setIsSignUp(false); \n      toast.success('Your email has been successfully verified!');\n    }\n  }, [location]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (isSignUp) {\n      registerMutate({\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        email: formData.email,\n        username: formData.email, // Assuming username is email as before\n        password: formData.password, // Use actual password for sign up now\n      }, {\n        onSuccess: () => {\n          setShowForm(false); // Keep this specific UI logic\n          // Toast for success is handled by useRegister hook\n        },\n        onError: () => {\n          // Toast for error is handled by useRegister hook\n        }\n      });\n    } else {\n      loginMutate({ \n        email: formData.email, \n        password: formData.password \n      }, {\n        onSuccess: (data) => {\n          // data here is AuthResponse. Token is stored by loginUser API function.\n          // User profile cache is updated by useLogin hook.\n          // Toast for success is handled by useLogin hook.\n          navigate('/media-library'); \n        },\n        onError: () => {\n          // Toast for error is handled by useLogin hook\n        }\n      });\n    }\n  };\n  \n  const overallIsLoading = isPendingLogin || isPendingRegister;\n  const currentError = isSignUp ? registerError : loginError;\n\n  return (\n    <Container \n      component=\"main\" \n      maxWidth=\"xs\" \n      sx={{ \n        display: 'flex', \n        flexDirection: 'column', \n        alignItems: 'center', \n        justifyContent: 'center',\n        minHeight: '100vh',\n        padding: 3\n      }}\n    >\n      <Box\n        sx={{\n          padding: 3,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          borderRadius: 2,\n          boxShadow: 3,\n          width: '100%',\n        }}\n      >\n        <Typography component=\"h1\" variant=\"h5\" sx={{ mb: 3 }}>\n          {isSignUp ? 'Create Account' : 'Sign In'}\n        </Typography>\n\n        {emailVerified && !isSignUp && (\n          <Alert severity=\"success\" sx={{ mb: 2, width: '100%' }}>\n            Email verified successfully! You can now sign in.\n          </Alert>\n        )}\n\n        {!showForm && isSignUp && (\n          <Box sx={{ mt: 2, width: '100%', textAlign: 'center' }}>\n            <Alert severity=\"info\" sx={{ mb: 2 }}>\n              Verification email sent! Please check your inbox to complete registration.\n            </Alert>\n            <Button\n              fullWidth\n              variant=\"outlined\"\n              onClick={() => {\n                setIsSignUp(false); // Switch to sign-in\n                setShowForm(true);\n              }}\n              sx={{ mt: 2 }}\n            >\n              Go to Sign In\n            </Button>\n          </Box>\n        )}\n\n        {showForm && (\n          <>\n            <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1, width: '100%' }}>\n              {isSignUp && (\n                <>\n                  <TextField\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    id=\"firstName\"\n                    label=\"First Name\"\n                    name=\"firstName\"\n                    autoComplete=\"given-name\"\n                    value={formData.firstName}\n                    onChange={handleChange}\n                  />\n                  <TextField\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    id=\"lastName\"\n                    label=\"Last Name\"\n                    name=\"lastName\"\n                    autoComplete=\"family-name\"\n                    value={formData.lastName}\n                    onChange={handleChange}\n                  />\n                </>\n              )}\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n              />\n              {/* Show password field for both sign-up and sign-in if isSignUp is true, or if it's sign-in mode*/}\n              {(isSignUp || !isSignUp) && (\n                <TextField\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  name=\"password\"\n                  label=\"Password\"\n                  type=\"password\"\n                  id=\"password\"\n                  autoComplete={isSignUp ? \"new-password\" : \"current-password\"}\n                  value={formData.password}\n                  onChange={handleChange}\n                />\n              )}\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n                disabled={overallIsLoading}\n              >\n                {overallIsLoading ? (\n                  <CircularProgress size={24} />\n                ) : isSignUp ? (\n                  'Sign Up'\n                ) : (\n                  'Sign In'\n                )}\n              </Button>\n              <Grid container justifyContent=\"center\">\n                <div style={{ display: 'grid', gridTemplateColumns: '1fr', justifyItems: 'center' }}>\n                  <Link \n                    component=\"button\" \n                    variant=\"body2\" \n                    onClick={() => {\n                      setIsSignUp(!isSignUp);\n                      setFormData({ firstName: '', lastName: '', email: '', password: '' });\n                    }}\n                  >\n                    {isSignUp\n                      ? 'Already have an account? Sign In'\n                      : \"Don't have an account? Sign Up\"}\n                  </Link>\n                </div>\n              </Grid>\n            </Box>\n          </>\n        )}\n\n        {/* Errors are handled by react-toastify via the hooks, so these general Alert components can be removed */}\n        {/* {currentError && (\n          <Alert severity=\"error\" sx={{ mt: 2, width: '100%' }}>\n            {currentError.message}\n          </Alert>\n        )} */}\n      </Box>\n    </Container>\n  );\n};\n\nexport default AuthPage;","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/Home.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/Home.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":67,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { toast } from \"react-toastify\"; // Import Toastify for success message\nimport \"react-toastify/dist/ReactToastify.css\"; // Import the CSS for Toast notifications\nimport { Box, Paper, Typography, Button } from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate\nimport axios from 'axios';\nimport { DataGrid, GridColDef } from '@mui/x-data-grid';\n\ninterface ContactProperties {\n  createdate: string;\n  email: string;\n  firstname: string;\n  hs_object_id: string;\n  lastmodifieddate: string;\n  lastname: string;\n}\n\ninterface Contact {\n  id: string;\n  properties: ContactProperties;\n  createdAt: string;\n  updatedAt: string;\n  archived: boolean;\n}\n\ninterface HubSpotResponse {\n  results: Contact[];\n  paging?: {\n    next?: {\n      after: string;\n      link: string;\n    };\n  };\n}\n\nconst HomePage: React.FC = () => {\n  const navigate = useNavigate();\n\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [nextPage, setNextPage] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const params = new URLSearchParams(window.location.search);\n      const emailVerified = params.get(\"emailVerified\");\n      if (emailVerified) {\n        // Show success message\n        toast.success(\"Your email has been successfully verified!\");\n        // Navigate to home page after showing the success message\n        navigate(\"/home\");\n      }\n    };\n\n    fetchData();\n  }, [navigate]); // Ensure this runs only after the component mounts\n\n  const fetchContacts = async (after?: string) => {\n    try {\n      const response = await axios.get<HubSpotResponse>('/api/hubspot/contacts', {\n        params: { after },\n      });\n      setContacts(prevContacts => [...prevContacts, ...response.data.results]);\n      setNextPage(response.data.paging?.next?.after || null);\n      setLoading(false);\n    } catch (err) {\n      setError('Failed to fetch contacts');\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n\n  const columns: GridColDef[] = [\n    { field: 'id', headerName: 'ID', width: 90 },\n    { field: 'firstname', headerName: 'First Name', width: 150 },\n    { field: 'lastname', headerName: 'Last Name', width: 150 },\n    { field: 'email', headerName: 'Email', width: 200 },\n    { field: 'createdate', headerName: 'Created Date', width: 180 },\n    { field: 'lastmodifieddate', headerName: 'Last Modified Date', width: 180 },\n  ];\n\n  const rows = contacts.map(contact => ({\n    id: contact.id,\n    firstname: contact.properties.firstname,\n    lastname: contact.properties.lastname,\n    email: contact.properties.email,\n    createdate: contact.properties.createdate,\n    lastmodifieddate: contact.properties.lastmodifieddate,\n  }));\n\n  return (\n    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"start\" height=\"100vh\">\n      <Paper elevation={3} sx={{ padding: '2rem', width: \"100%\", marginBlock: '2rem' }}>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          Contacts\n        </Typography>\n        {loading ? (\n          <Typography>Loading...</Typography>\n        ) : error ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : (\n          <>\n            <div style={{ height: 400, width: '100%' }}>\n              <DataGrid\n                rows={rows}\n                columns={columns}\n                paginationModel={{ pageSize: 5, page: 0 }}\n                pageSizeOptions={[5]}\n                pagination\n              />\n            </div>\n            {nextPage && (\n              <Button onClick={() => fetchContacts(nextPage)} variant=\"contained\" color=\"primary\">\n                Load More\n              </Button>\n            )}\n          </>\n        )}\n      </Paper>\n    </Box>\n  );\n};\n\nexport default HomePage;","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/Login.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/Login.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toast' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2050,2053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2050,2053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2996,2999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2996,2999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\n// import axios from 'axios'; // No longer directly needed for login API call\nimport { useNavigate } from 'react-router-dom';\n// import { useDispatch } from 'react-redux'; // Removed\n// import { AppDispatch } from '../store/store'; // Removed\n// import { API_BASE_URL } from '../config/config'; // API_BASE_URL is in env.ts now, managed by query-hooks\n// import { initializeUser, fetchAllUsers } from '../store/slices/userSlice'; // Removed\nimport { useLogin } from '../hooks/query-hooks'; // Added\nimport { toast } from 'react-toastify'; // For displaying errors from useLogin\n\n// interface LoginResponse { // No longer needed as useLogin handles response structure\n//   token: string;\n// }\n\nconst Login: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  // const [loginError, setLoginError] = useState(''); // Handled by useLogin onError\n  const navigate = useNavigate();\n  // const dispatch = useDispatch<AppDispatch>(); // Removed\n  const { mutate: loginUser, isPending: isLoggingIn, error: loginErrorHook } = useLogin(); // Added useLogin hook\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    // setLoginError(''); // Clear previous errors - not needed with hook's error state\n\n    loginUser({ email, password }, {\n      onSuccess: (data) => {\n        // navigate('/media-library'); // Original navigation\n        // The useLogin hook's onSuccess already shows a toast.\n        // It also populates the userProfile cache and stores tokens.\n        // Let's navigate to home or dashboard based on role, or just a default page.\n        // For now, keeping it simple and navigating to /home as a default logged-in page.\n        // The ProtectedRoute and App.tsx will handle further redirection if needed.\n        if (data.user?.role === 'admin' || data.user?.role === 'superAdmin') {\n          navigate('/admin-dashboard');\n        } else {\n          navigate('/home');\n        }\n      },\n      onError: (error: any) => {\n        // The useLogin hook's onError already shows a toast.\n        // We don't need to set local loginError state here.\n        // Error object from useLogin can be directly used if needed for UI, but toast might be enough.\n        console.error('Login failed from component:', error);\n        // Example: if (loginErrorHook) toast.error(loginErrorHook.message || 'Login failed.');\n      }\n    });\n  };\n\n  return (\n    <form className=\"login-form\" onSubmit={handleLogin}>\n      <div>\n        <label>Email</label>\n        <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} placeholder=\"Email\" disabled={isLoggingIn} />\n      </div>\n      <div>\n        <label>Password</label>\n        <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} placeholder=\"Password\" disabled={isLoggingIn} />\n      </div>\n      {loginErrorHook && <div className=\"error-message\">{(loginErrorHook as any).message || 'Login failed. Please check credentials.'}</div>}\n      <button type=\"submit\" disabled={isLoggingIn}>\n        {isLoggingIn ? 'Logging in...' : 'Login'}\n      </button>\n    </form>\n  );\n};\n\nexport default Login;","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/MediaLibraryPage.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/MediaLibraryPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'uploadCallTimeoutRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'uploadCallTimeoutRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":67,"column":43,"nodeType":"Identifier","endLine":67,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3176,3179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3176,3179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3588,3591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3588,3591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback, useMemo, lazy, Suspense } from 'react';\nimport { CircularProgress, Box, Typography, Button } from '@mui/material';\nimport '../components/MediaLibrary/MediaContainer.scss';\nimport { toast } from 'react-toastify';\n// Import React Query hooks\nimport { \n  useTransformedMedia, \n  useMediaTypes, \n  useDeleteMedia, \n  useAddMedia,\n  useUserProfile\n} from '../hooks/query-hooks';\n// Import the correct BaseMediaFile interface\n// We'll also use the MediaFile type from query-hooks to represent the enriched data from useTransformedMedia\nimport { BaseMediaFile } from '../interfaces/MediaFile'; \nimport type { MediaFile as QueryHooksMediaFile } from '../hooks/query-hooks';\n\n// Lazy load components\nconst MediaUploader = lazy(() => import('../components/MediaUploader/MediaUploader'));\nconst MediaLibrary = lazy(() => import('../components/MediaLibrary/MediaLibrary'));\n\n// Loading fallback component\nconst LoadingFallback = () => (\n  <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"500px\">\n    <CircularProgress />\n  </Box>\n);\n\nconst MediaContainer: React.FC = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedMediaType, setSelectedMediaType] = useState<string>('All');\n  \n  // Add refs to track upload completion\n  const processingUploadRef = useRef(false);\n  const uploadCallTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  // --- User Profile ---\n  const { \n    data: userProfile, \n    isLoading: isLoadingUserProfile, \n    isError: isUserProfileError \n  } = useUserProfile();\n\n  // Fetch ALL media initially. Filtering by selectedMediaType will happen client-side in filteredMediaFiles memo.\n  const { \n    data: allMediaData = [], // Renamed from mediaData to allMediaData\n    isLoading: isLoadingMedia, \n    isError: isMediaError,\n    error: mediaError\n  } = useTransformedMedia(userProfile); // Removed selectedMediaType from here\n  \n  const { \n    data: mediaTypes = [], \n    isLoading: isLoadingMediaTypes\n  } = useMediaTypes();\n\n  // Use enhanced mutation hooks\n  const { mutateAsync: deleteMediaMutation } = useDeleteMedia();\n  const { mutateAsync: addMediaMutation } = useAddMedia();\n\n  // Add effect to handle refresh after upload - with debounce\n  useEffect(() => {\n    return () => {\n      // Clear any pending timeouts on unmount\n      if (uploadCallTimeoutRef.current) {\n        clearTimeout(uploadCallTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Track meaningful state changes - logging only in development\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development' && allMediaData.length > 0) {\n      console.log('MediaLibraryPage - Ready (allMediaData):', {\n        items: allMediaData.length,\n        mediaTypes: mediaTypes.length\n      });\n    }\n  }, [allMediaData.length, mediaTypes.length]);\n\n  const handleOpen = useCallback(() => {\n    setIsModalOpen(true);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    setIsModalOpen(false);\n    // No need to force a refresh when modal closes\n  }, []);\n\n  const handleUploadComplete = useCallback((newFile: any | null) => {\n    if (newFile && !processingUploadRef.current) {\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Upload complete, new file added to state');\n      }\n      \n      // Set processing flag to prevent multiple refreshes\n      processingUploadRef.current = true;\n      \n      // Use React Query mutation instead of Redux action\n      addMediaMutation(newFile).catch((error: any) => {\n        console.error('Error adding media:', error);\n        toast.error('Failed to add media to the library');\n      });\n      \n      // Automatically reset the processing flag after a timeout\n      setTimeout(() => {\n        processingUploadRef.current = false;\n      }, 1000);\n    }\n    // Do not automatically close the modal - let the user choose when to close it\n  }, [addMediaMutation]);\n\n  const handleDeleteMedia = useCallback(async (id: string): Promise<boolean> => {\n    try {\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Deleting media with ID:', id);\n      }\n      \n      // Pass silent option to prevent the hook from showing a toast\n      await deleteMediaMutation({ mediaId: id, options: { silent: true } });\n      return true;\n    } catch (error) {\n      console.error('Error deleting media file:', error);\n      // MediaLibrary will show its own toast on error, so no toast here is needed\n      return false;\n    }\n  }, [deleteMediaMutation]);\n\n  const handleMediaTypeChange = useCallback((type: string) => {\n    setSelectedMediaType(type);\n  }, []);\n\n  // Memo for media files filtered ONLY by search query (for HeaderComponent's type buttons)\n  const searchFilteredMediaFiles = useMemo(() => {\n    return allMediaData\n      .filter((file: QueryHooksMediaFile) => {\n        const searchableText = [\n          file.displayTitle, \n          file.metadata?.fileName,\n          file.metadata?.description,\n          file.title,\n          ...(file.metadata?.tags?.map(tag => typeof tag === 'string' ? tag : tag.name) || []) \n        ].filter(Boolean).join(' ').toLowerCase();\n        return searchableText.includes(searchQuery.toLowerCase());\n      })\n      .map((file: QueryHooksMediaFile) => { \n        // Map to the structure expected by downstream components (e.g., BaseMediaFile)\n        // This mapping should be consistent with the one in filteredMediaFiles\n        const libraryEntry: BaseMediaFile & { fileSize: number; modifiedDate: string; thumbnailUrl?: string; displayTitle?: string; } = {\n          _id: file._id,\n          id: file.id || file._id, \n          title: file.displayTitle || file.title || 'Untitled', \n          location: file.thumbnailUrl || file.location || '', \n          slug: file.slug || `media-${file._id}`, \n          fileExtension: file.fileExtension,\n          mediaType: file.mediaType,\n          fileSize: file.fileSize, \n          modifiedDate: file.modifiedDate, \n          metadata: { \n            ...(file.metadata || {}), \n            fileName: file.metadata?.fileName || file.displayTitle || file.title || 'Untitled',\n          },\n          thumbnailUrl: file.thumbnailUrl,\n          displayTitle: file.displayTitle,\n        };\n        return libraryEntry;\n      });\n  }, [allMediaData, searchQuery]);\n\n  // Filter media files based on selectedMediaType and searchQuery (for actual display)\n  const filteredMediaFiles = useMemo(() => {\n    return allMediaData // Start with all media data\n      .filter((file: QueryHooksMediaFile) => { \n        // 1. Filter by selectedMediaType\n        if (selectedMediaType !== 'All' && file.mediaType !== selectedMediaType) {\n          return false;\n        }\n\n        // 2. Filter by search query\n        const searchableText = [\n          file.displayTitle, \n          file.metadata?.fileName,\n          file.metadata?.description,\n          file.title,\n          ...(file.metadata?.tags?.map(tag => typeof tag === 'string' ? tag : tag.name) || []) \n        ].filter(Boolean).join(' ').toLowerCase();\n        \n        return searchableText.includes(searchQuery.toLowerCase());\n      })\n      .map((file: QueryHooksMediaFile) => { \n        const libraryEntry: BaseMediaFile & { fileSize: number; modifiedDate: string; thumbnailUrl?: string; displayTitle?: string; } = {\n          _id: file._id,\n          id: file.id || file._id, \n          title: file.displayTitle || file.title || 'Untitled', \n          location: file.thumbnailUrl || file.location || '', \n          slug: file.slug || `media-${file._id}`, \n          fileExtension: file.fileExtension,\n          mediaType: file.mediaType,\n          fileSize: file.fileSize, \n          modifiedDate: file.modifiedDate, \n          metadata: { \n            ...(file.metadata || {}), \n            fileName: file.metadata?.fileName || file.displayTitle || file.title || 'Untitled',\n          },\n          thumbnailUrl: file.thumbnailUrl,\n          displayTitle: file.displayTitle,\n        };\n        return libraryEntry;\n      });\n  }, [allMediaData, selectedMediaType, searchQuery]);\n\n  // Only log in development and limit frequency\n  const prevFilterCountRef = useRef(0);\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development' && \n        Math.abs(prevFilterCountRef.current - filteredMediaFiles.length) > 10) {\n      console.log('MediaLibraryPage - Filter updated (filteredMediaFiles):', {\n        totalSource: allMediaData.length,\n        filteredResult: filteredMediaFiles.length,\n        currentSearchQuery: searchQuery,\n        currentMediaTypeFilter: selectedMediaType\n      });\n      prevFilterCountRef.current = filteredMediaFiles.length;\n    }\n  }, [filteredMediaFiles.length, allMediaData.length, searchQuery, selectedMediaType]);\n\n  // --- Updated Loading and Auth Checks ---\n  if (isLoadingUserProfile) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n        <CircularProgress />\n        <Typography sx={{ ml: 2 }}>Loading user information...</Typography>\n      </Box>\n    );\n  }\n\n  if (isUserProfileError || !userProfile) {\n    return (\n      <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n        <Typography variant=\"h5\" color=\"textSecondary\" gutterBottom>\n          {isUserProfileError ? 'Error Loading Profile' : 'Access Denied'}\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\" sx={{ mb: 2 }}>\n          {isUserProfileError ? 'Could not load your profile. Please try again later.' : 'Please log in to view the media library.'}\n        </Typography>\n        <Button variant=\"contained\" onClick={() => window.location.href = '/login'}>\n          Go to Login\n        </Button>\n      </Box>\n    );\n  }\n  // --- End Updated Loading and Auth Checks ---\n\n  // Show loading state if either media or media types are loading (after user profile is confirmed)\n  if (isLoadingMedia || isLoadingMediaTypes) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Show error state if there's an error loading media\n  if (isMediaError) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n        <Typography color=\"error\">Error loading media: {mediaError instanceof Error ? mediaError.message : 'Unknown error'}</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <div id=\"media-container\">\n      <Suspense fallback={<LoadingFallback />}>\n        <MediaLibrary\n          mediaFilesData={filteredMediaFiles}\n          dataSourceForFilters={searchFilteredMediaFiles}\n          setSearchQuery={setSearchQuery}\n          onAddMedia={handleOpen}\n          onDeleteMedia={handleDeleteMedia}\n          selectedMediaType={selectedMediaType}\n          handleMediaTypeChange={handleMediaTypeChange}\n        />\n      </Suspense>\n      \n      {/* Always render the MediaUploader component but control visibility with open prop */}\n      <Suspense fallback={<LoadingFallback />}>\n        <MediaUploader\n          open={isModalOpen}\n          onClose={handleClose}\n          onUploadComplete={handleUploadComplete}\n        />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MediaContainer;","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/PasswordSetup.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/PasswordSetup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/StyleGuidePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/User.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/VerifyEmailPage.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/VerifyEmailPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/services/UserService.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/services/UserService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/setupTests.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/theme.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/theme/extendedComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/theme/typography.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/types/interfaces/MediaFile.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[457,460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[457,460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":23,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterface","endLine":23,"endColumn":35,"suggestions":[{"messageId":"replaceEmptyInterface","data":{"replacement":"object"},"fix":{"range":[478,509],"text":"type BaseMediaMetadata = object"},"desc":"Replace empty interface with `object`."},{"messageId":"replaceEmptyInterface","data":{"replacement":"unknown"},"fix":{"range":[478,509],"text":"type BaseMediaMetadata = unknown"},"desc":"Replace empty interface with `unknown`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface MediaFile {\n    _id: string;\n    id: string;\n    title: string;\n    location: string;\n    slug: string;\n    fileSize: number;\n    fileExtension: string;\n    modifiedDate: Date;\n    uploadedBy: string;\n    modifiedBy: string;\n    __t: string;\n    metadata: {\n        fileName: string;\n        tags: string[];\n        visibility: string;\n        altText: string;\n        description: string;\n        mediaType: string;\n        [key: string]: any;\n    };\n}\nexport interface BaseMediaMetadata {\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/types/media.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[249,252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[249,252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[538,541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[538,541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface MediaFile {\n  id?: string;\n  _id?: string; // MongoDB document ID\n  title: string;\n  fileName: string;\n  visibility: 'public' | 'private';\n  altText?: string;\n  description?: string;\n  tags: string[];\n  customFields: Record<string, any>;\n  fileType?: string;\n  fileSize?: number;\n  uploadDate?: string;\n  lastModified?: string;\n  url?: string;\n  slug?: string; // URL slug\n}\n\nexport interface MediaTypeField {\n  name: string;\n  label?: string;\n  type: string;\n  required?: boolean;\n  options?: string[];\n  defaultValue?: any;\n}\n\nexport interface MediaType {\n  id: string;\n  name: string;\n  description?: string;\n  fields: MediaTypeField[];\n  acceptedFileTypes: string[];\n  defaultTags?: string[];\n  createdAt?: string;\n  updatedAt?: string;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/types/mediaCore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[238,241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[238,241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2308,2311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2308,2311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MediaType } from '../hooks/query-hooks';\n\n// Core interfaces\nexport interface MediaMetadata {\n  fileName: string;\n  altText?: string;\n  description?: string;\n  visibility: 'public' | 'private';\n  tags: string[];\n  [key: string]: any;\n}\n\nexport interface UploadState {\n  file: File | null;\n  mediaType: string;\n  metadata: MediaMetadata;\n  progress: number;\n  isProcessing: boolean;\n  previewUrl?: string;\n}\n\n// Type guards\nexport const isVideoFile = (file: File): boolean => \n  file.type.startsWith('video/');\n\nexport const isImageFile = (file: File): boolean => \n  file.type.startsWith('image/');\n\n// Logging utilities\nexport const mediaLogger = (component: string) => ({\n  state: (action: string, state: Partial<UploadState>) => {\n    console.log(`[${component}] ${action}:`, {\n      file: state.file ? {\n        name: state.file.name,\n        type: state.file.type,\n        size: state.file.size\n      } : null,\n      mediaType: state.mediaType,\n      metadata: state.metadata,\n      progress: state.progress,\n      isProcessing: state.isProcessing,\n      previewUrl: state.previewUrl\n    });\n  },\n  \n  mediaType: (action: string, mediaType: MediaType) => {\n    console.log(`[${component}] ${action}:`, {\n      id: mediaType._id,\n      name: mediaType.name,\n      acceptedTypes: mediaType.acceptedFileTypes,\n      fields: mediaType.fields ? mediaType.fields.map(f => ({\n        name: f.name,\n        type: f.type,\n        required: f.required\n      })) : []\n    });\n  },\n\n  file: (action: string, file: File) => {\n    console.log(`[${component}] ${action}:`, {\n      name: file.name,\n      type: file.type,\n      size: file.size,\n      lastModified: new Date(file.lastModified).toISOString()\n    });\n  },\n\n  metadata: (action: string, metadata: MediaMetadata) => {\n    console.log(`[${component}] ${action}:`, {\n      standardFields: {\n        fileName: metadata.fileName,\n        altText: metadata.altText,\n        description: metadata.description,\n        visibility: metadata.visibility,\n        tags: metadata.tags\n      },\n      customFields: Object.entries(metadata)\n        .filter(([key]) => !['fileName', 'altText', 'description', 'visibility', 'tags'].includes(key))\n        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})\n    });\n  },\n\n  error: (action: string, error: any) => {\n    console.error(`[${component}] Error in ${action}:`, {\n      message: error.message,\n      code: error.code,\n      details: error.response?.data\n    });\n  }\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/types/mediaTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1578,1581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1578,1581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2568,2571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2568,2571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":222,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5703,5706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5703,5706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Base interfaces for media data\nexport interface BaseMetadata {\n  fileName: string;\n  altText?: string;\n  description?: string;\n  visibility: 'public' | 'private';\n  tags: string[];\n}\n\n// Field type definitions\nexport type FieldType = 'Text' | 'TextArea' | 'Number' | 'Date' | 'Boolean' | 'Select' | 'MultiSelect';\nexport type NonSelectFieldType = Exclude<FieldType, 'Select' | 'MultiSelect'>;\nexport type SelectFieldType = Extract<FieldType, 'Select' | 'MultiSelect'>;\n\nexport interface BaseField {\n  name: string;\n  type: NonSelectFieldType;\n  required: boolean;\n  label?: string;\n}\n\nexport interface SelectField {\n  name: string;\n  type: SelectFieldType;\n  required: boolean;\n  label?: string;\n  options: string[];\n  useTagCategory?: boolean;\n  tagCategoryId?: string;\n}\n\nexport type MediaTypeField = BaseField | SelectField;\n\n// Media type configuration\nexport interface MediaTypeConfig {\n  name: string;\n  fields: MediaTypeField[];\n  baseType?: string;\n  includeBaseFields?: boolean;\n  acceptedFileTypes: string[];\n  status?: 'active' | 'deprecated' | 'archived';\n  catColor?: string;\n  defaultTags?: string[];\n  _id?: string;\n  settings?: {\n    allowRelatedMedia?: boolean;\n  };\n}\n\n// Store types\nexport interface MediaTypeState extends MediaTypeConfig {\n  _id: string;\n  usageCount: number;\n  replacedBy: string | null;\n  isDeleting: boolean;\n}\n\n// Form data interfaces\nexport interface MediaFormData {\n  title: string;\n  fileName: string;\n  altText?: string;\n  description?: string;\n  visibility: 'public' | 'private';\n  tags: string[];\n  customFields: Record<string, any>;\n}\n\n// API data interfaces\nexport interface ApiMediaTypeRequest {\n  name: string;\n  fields: MediaTypeField[];\n  baseType?: 'BaseImage' | 'BaseVideo' | 'BaseAudio' | 'BaseDocument' | 'Media';\n  includeBaseFields: boolean;\n  acceptedFileTypes: string[];\n  status: 'active' | 'deprecated' | 'archived';\n  defaultTags?: string[];\n  settings?: {\n    allowRelatedMedia?: boolean;\n  };\n}\n\nexport interface ApiMediaTypeResponse {\n  _id: string;\n  name: string;\n  fields: MediaTypeField[];\n  status: 'active' | 'deprecated' | 'archived';\n  acceptedFileTypes: string[];\n  baseType?: 'BaseImage' | 'BaseVideo' | 'BaseAudio' | 'BaseDocument' | 'Media';\n  includeBaseFields?: boolean;\n  catColor?: string;\n  defaultTags?: string[];\n  settings?: {\n    allowRelatedMedia?: boolean;\n  };\n}\n\nexport interface ApiMediaData {\n  title: string;\n  metadata: {\n    fileName: string;\n    altText?: string;\n    description?: string;\n    visibility: 'public' | 'private';\n    tags: string[];\n    [key: string]: any;\n  };\n}\n\n// Type guards\nexport const isSelectField = (field: MediaTypeField): field is SelectField => {\n  return field.type === 'Select' || field.type === 'MultiSelect';\n};\n\nexport const isSelectFieldType = (type: FieldType): type is SelectFieldType => {\n  return type === 'Select' || type === 'MultiSelect';\n};\n\n// Field update utilities\nexport const updateFieldType = (field: MediaTypeField, newType: FieldType): MediaTypeField => {\n  const baseField = {\n    name: field.name,\n    type: newType,\n    required: field.required,\n    label: field.label\n  };\n\n  if (isSelectFieldType(newType)) {\n    return {\n      ...baseField,\n      type: newType,\n      options: isSelectField(field) ? field.options : []\n    } as SelectField;\n  }\n\n  return baseField as BaseField;\n};\n\nexport const updateFieldName = (field: MediaTypeField, name: string): MediaTypeField => {\n  return { ...field, name };\n};\n\nexport const updateFieldRequired = (field: MediaTypeField, required: boolean): MediaTypeField => {\n  return { ...field, required };\n};\n\nexport const updateFieldOptions = (field: SelectField, options: string[], useTagCategory?: boolean, tagCategoryId?: string): SelectField => {\n  return { \n    ...field, \n    options,\n    ...(useTagCategory !== undefined && { useTagCategory }),\n    ...(tagCategoryId !== undefined && { tagCategoryId })\n  };\n};\n\n// Transform functions\nexport const transformFormToApiData = (formData: MediaFormData): ApiMediaData => {\n  return {\n    title: formData.title,\n    metadata: {\n      fileName: formData.fileName,\n      altText: formData.altText,\n      description: formData.description,\n      visibility: formData.visibility,\n      tags: formData.tags,\n      ...formData.customFields\n    }\n  };\n};\n\nexport const transformConfigToApiData = (config: MediaTypeConfig): ApiMediaTypeRequest => {\n  const { name, fields, baseType, includeBaseFields, acceptedFileTypes, status, defaultTags, settings } = config;\n  return {\n    name,\n    fields,\n    baseType: baseType as 'BaseImage' | 'BaseVideo' | 'BaseAudio' | 'BaseDocument' | 'Media' | undefined,\n    includeBaseFields: includeBaseFields ?? true,\n    acceptedFileTypes,\n    status: status ?? 'active',\n    defaultTags,\n    settings\n  };\n};\n\n// Utility functions\nexport const createField = (type: FieldType, name: string = '', required: boolean = false): MediaTypeField => {\n  if (isSelectFieldType(type)) {\n    return {\n      name,\n      type,\n      required,\n      options: []\n    };\n  }\n  return {\n    name,\n    type,\n    required\n  };\n};\n\n// Logging utilities\nexport const createLogger = (component: string) => ({\n  formData: (action: string, data: MediaFormData) => {\n    console.log(`[${component}] ${action}:`, {\n      standardFields: {\n        title: data.title,\n        fileName: data.fileName,\n        altText: data.altText,\n        description: data.description,\n        visibility: data.visibility,\n        tags: data.tags\n      },\n      customFields: data.customFields\n    });\n  },\n  \n  apiData: (action: string, data: ApiMediaTypeRequest | ApiMediaData) => {\n    console.log(`[${component}] ${action}:`, data);\n  },\n  \n  error: (action: string, error: any) => {\n    console.error(`[${component}] Error in ${action}:`, {\n      message: error.message,\n      code: error.code,\n      details: error.response?.data\n    });\n  }\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/types/userTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/utils/avatarUtils.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/utils/avatarUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/utils/fontUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/utils/formatFileSize.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/utils/formatFileSize.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/utils/helpers.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/utils/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/utils/mediaTypeUploaderUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/utils/mediaTypeUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/utils/migrationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/utils/tagUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/utils/videoUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/vite.config.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]