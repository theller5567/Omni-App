[{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/components/MediaUploader/MediaUploader.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useRef' is defined but never used.","line":1,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Box' is defined but never used.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LinearProgress' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Typography' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectChangeEvent' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stepper' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Step' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StepLabel' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CircularProgress' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CloseIcon' is defined but never used.","line":22,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircleIcon' is defined but never used.","line":23,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useDropzone' is defined but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaFileImage' is defined but never used.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaFileVideo' is defined but never used.","line":25,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaUpload' is defined but never used.","line":25,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaImage' is defined but never used.","line":25,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaVideo' is defined but never used.","line":25,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaFileAudio' is defined but never used.","line":25,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":75},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaFileWord' is defined but never used.","line":25,"column":77,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":87},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BaseMediaFile' is defined but never used.","line":28,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toast' is defined but never used.","line":29,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useTagCategories' is defined but never used.","line":31,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'motion' is defined but never used.","line":34,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AnimatePresence' is defined but never used.","line":34,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useForm' is defined but never used.","line":35,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Controller' is defined but never used.","line":35,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormProvider' is defined but never used.","line":35,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isVideoFile' is defined but never used.","line":36,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isImageFile' is defined but never used.","line":36,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isFileTypeValid' is defined but never used.","line":36,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatFileSize' is defined but never used.","line":36,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'normalizeTag' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'uploadMedia' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'prepareMetadataForUpload' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MediaTypeUploaderProps' is defined but never used.","line":46,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UploadThumbnailSelector' is defined but never used.","line":47,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MetadataForm' is defined but never used.","line":48,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1973,1976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1973,1976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2319,2322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2319,2322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'findInternalMediaType' is assigned a value but never used.","line":93,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onUploadComplete' is defined but never used.","line":125,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dialogMode' is assigned a value but never used.","line":126,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onCloseDialog' is defined but never used.","line":127,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":130,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userProfile' is assigned a value but never used.","line":131,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoadingMediaTypes' is assigned a value but never used.","line":137,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mediaTypes' is assigned a value but never used.","line":143,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'file' is assigned a value but never used.","line":148,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setFile' is assigned a value but never used.","line":148,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedMediaType' is assigned a value but never used.","line":149,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedMediaType' is assigned a value but never used.","line":149,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'metadata' is assigned a value but never used.","line":150,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":150,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fileLoadingProgress' is assigned a value but never used.","line":163,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isPreviewReady' is assigned a value but never used.","line":164,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":164,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleMetadataChange' is assigned a value but never used.","line":167,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":167,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleImagePreviewLoad' is assigned a value but never used.","line":175,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":31}],"suppressedMessages":[],"errorCount":68,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useRef, useMemo } from \"react\";\nimport {\n  Box,\n  Button,\n  LinearProgress,\n  Typography,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  SelectChangeEvent,\n  Stepper,\n  Step,\n  StepLabel,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  IconButton,\n  CircularProgress,\n} from \"@mui/material\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\nimport { useDropzone } from \"react-dropzone\";\nimport { FaFileImage, FaFileVideo, FaUpload, FaImage, FaVideo, FaFileAudio, FaFileWord } from \"react-icons/fa\";\nimport \"./MediaUploader.scss\";\nimport { useNavigate } from \"react-router-dom\";\nimport { BaseMediaFile } from \"../../interfaces/MediaFile\";\nimport { toast } from \"react-toastify\";\n// Import TanStack Query hooks and types\nimport { useMediaTypes, useTagCategories, useUserProfile, MediaType as HookMediaType, MediaFile } from \"../../hooks/query-hooks\";\n// Keep the import for Field and specific MediaType shape from Redux\n// import type { MediaType as ReduxMediaType } from \"../../store/slices/mediaTypeSlice\"; // Removed\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useForm, Controller, FormProvider } from 'react-hook-form';\nimport { isVideoFile, isImageFile, isFileTypeValid, formatFileSize } from \"./utils/fileUtils\";\n\n// Import our utilities\nimport {\n  normalizeTag,\n  uploadMedia,\n  prepareMetadataForUpload,\n} from './utils';\n\n// Import component types and subcomponents\nimport { MediaTypeUploaderProps, MetadataState } from \"./types\";\nimport UploadThumbnailSelector from '../VideoThumbnailSelector/UploadThumbnailSelector';\nimport MetadataForm from \"./components/MetadataForm\";\n\n// Define an internal MediaType interface based on the old ReduxMediaType structure\ninterface InternalMediaType {\n  _id: string;\n  name: string;\n  description?: string; // Make optional if not always present from API or used\n  fields: any[]; // Define more specific field type if possible\n  status: string;\n  usageCount?: number;\n  replacedBy?: string | null;\n  isDeleting?: boolean;\n  acceptedFileTypes: string[];\n  createdAt?: string;\n  updatedAt?: string;\n  baseType: string;\n  includeBaseFields: boolean;\n  catColor: string;\n  defaultTags: string[];\n  settings: Record<string, any>; // Or a more specific settings type\n}\n\n// Helper to adapt MediaType from TanStack Query to the shape expected by the MediaUploader\nconst adaptMediaType = (mediaType: HookMediaType): InternalMediaType => {\n  return {\n    _id: mediaType._id,\n    name: mediaType.name,\n    description: mediaType.description || '',\n    fields: mediaType.fields || [],\n    status: mediaType.status || 'active',\n    usageCount: mediaType.usageCount || 0,\n    replacedBy: mediaType.replacedBy || null,\n    isDeleting: mediaType.isDeleting || false,\n    acceptedFileTypes: mediaType.acceptedFileTypes || [],\n    createdAt: mediaType.createdAt,\n    updatedAt: mediaType.updatedAt,\n    baseType: mediaType.baseType as string, // Ensure baseType is string\n    includeBaseFields: mediaType.includeBaseFields || true,\n    catColor: mediaType.catColor || '#2196f3',\n    defaultTags: mediaType.defaultTags || [],\n    settings: mediaType.settings || {}\n  };\n};\n\n// Adapter for findMediaType to use InternalMediaType\nconst findInternalMediaType = (\n  mediaTypes: InternalMediaType[], // Use InternalMediaType\n  mediaTypeId: string | null\n): InternalMediaType | null => { // Return InternalMediaType\n  if (!mediaTypeId || !mediaTypes.length) return null;\n  \n  // First try to find by ID\n  let matchingType = mediaTypes.find(type => type._id === mediaTypeId);\n  \n  // If not found, try by name (for backward compatibility)\n  if (!matchingType) {\n    matchingType = mediaTypes.find(type => type.name === mediaTypeId);\n  }\n  \n  return matchingType || null;\n};\n\n// =============== TYPES ===============\n// ... InternalMediaType and other type definitions ...\n\n// =============== PROPS ===============\ninterface MediaUploaderProps {\n  // ... props ...\n  onUploadComplete?: (mediaFile: MediaFile) => void;\n  dialogMode?: boolean;\n  onCloseDialog?: () => void;\n  initialSelectedMediaType?: string | null;\n}\n\n// =============== COMPONENT ===============\nconst MediaUploader: React.FC<MediaUploaderProps> = ({\n  // ... props ...\n  onUploadComplete,\n  dialogMode = false,\n  onCloseDialog,\n  initialSelectedMediaType = null,\n}) => {\n  const navigate = useNavigate();\n  const { data: userProfile } = useUserProfile();\n  // queryClient and theme are NOT defined here\n\n  // Replace Redux selector with TanStack Query hook\n  const { \n    data: fetchedMediaTypes = [], \n    isLoading: isLoadingMediaTypes,\n    // isError: mediaTypesError, \n    // error: mediaTypesFetchError \n  } = useMediaTypes();\n\n  // Convert fetchedMediaTypes to InternalMediaType if necessary, or ensure types are compatible\n  const mediaTypes: InternalMediaType[] = useMemo(() => \n    fetchedMediaTypes.map(adaptMediaType), // Use the adapter function\n    [fetchedMediaTypes]);\n    \n  // State variables\n  const [file, setFile] = useState<File | null>(null);\n  const [selectedMediaType, setSelectedMediaType] = useState<string | null>(initialSelectedMediaType);\n  const [metadata, setMetadata] = useState<MetadataState>({\n    title: \"\",\n    fileName: \"\",\n    altText: \"\",\n    description: \"\",\n    tags: [],\n    visibility: \"private\",\n    customFields: {},\n    tagsInput: \"\",\n    recordedDate: \"\",\n    mediaTypeId: \"\",\n    mediaTypeName: \"\",\n  });\n  const [fileLoadingProgress, setFileLoadingProgress] = useState<number>(0);\n  const [isPreviewReady, setIsPreviewReady] = useState<boolean>(false);\n\n  // Local helper functions that were previously removed by mistake\n  const handleMetadataChange = (field: string, value: unknown) => {\n    const finalValue = value === '' ? undefined : value;\n    setMetadata((prev) => ({\n      ...prev,\n      [field]: finalValue,\n    }));\n  };\n\n  const handleImagePreviewLoad = (fileUrl: string) => {\n    const img = new Image();\n    img.onload = () => {\n      setMetadata((prev) => ({\n        ...prev,\n        imageWidth: img.width,\n        imageHeight: img.height,\n      }));\n      setFileLoadingProgress(100);\n      setIsPreviewReady(true);\n    };\n    img.onerror = () => {\n      console.error('Error loading image preview');\n      setFileLoadingProgress(100);\n      setIsPreviewReady(true);\n    };\n    img.src = fileUrl;\n  };\n  \n  // The imported formatFileSize and isFileTypeValid from ./utils/fileUtils will be used\n  // No need for local definitions of these\n\n  // =============== HOOKS ===============\n  // ... useEffects and other hooks ...\n\n  // =============== EVENT HANDLERS ===============\n  // ... onDrop, handleUpload, handleFileSelect, etc. ...\n  \n  // Inside onDrop or handleFileSelect, when using isFileTypeValid:\n  // const mediaTypeObject = mediaTypes.find(mt => mt._id === selectedMediaType);\n  // const acceptedTypes = mediaTypeObject?.acceptedFileTypes || [];\n  // if (!isFileTypeValid(selectedFile, acceptedTypes)) { ... }\n\n\n  // =============== RENDER LOGIC ===============\n  // ... JSX ...\n  // When rendering MetadataForm:\n  // <MetadataForm\n  //   ...\n  //   mediaTypes={mediaTypes.map(mt => ({...mt, description: mt.description || ''}))}\n  //   ...\n  // />\n  // ... rest of JSX ...\n};\n\nexport default MediaUploader;\n","usedDeprecatedRules":[]}]