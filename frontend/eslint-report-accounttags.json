[{"filePath":"/Users/travisheller/Sites/localhost/Omni-App/frontend/src/pages/AccountTags.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":483,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":483,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17434,17437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17434,17437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":595,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":595,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22043,22046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22043,22046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useCallback } from \"react\";\nimport TagCategoryManager from \"../components/TagCategoryManager/TagCategoryManager\";\nimport { toast } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport { \n  useTagCategories,\n  useUserProfile,\n  useTags,\n  useCreateTag\n} from \"../hooks/query-hooks\";\n\nimport { \n  Box, \n  Button, \n  TextField, \n  IconButton, \n  Typography, \n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Paper,\n  InputAdornment,\n  useMediaQuery,\n  Theme,\n  Container,\n  Tabs,\n  Tab,\n  Chip,\n  Pagination,\n  InputBase,\n  Card,\n  CardContent,\n  CircularProgress,\n  alpha,\n  LinearProgress\n} from \"@mui/material\";\nimport { FaEdit, FaTrash, FaPlus, FaSearch, FaTimes, FaTag, FaRedo } from \"react-icons/fa\";\nimport { motion } from \"framer-motion\";\nimport { normalizeTag, normalizeTagForComparison, validateTag, areTagsEquivalent } from \"../utils/tagUtils\";\nimport \"./accountTags.scss\";\n\nconst TAGS_PER_PAGE = 30;\n\nconst AccountTags: React.FC = () => {\n  // --- User Profile & Data Hooks (All hooks must be at the top) ---\n  const { \n    data: userProfile, \n    isLoading: isLoadingUserProfile, \n    isError: isUserProfileError \n  } = useUserProfile();\n\n  const { \n    data: rawTags = [], // Renamed to rawTags to avoid confusion with processed tags\n    isLoading: isTagsLoading,\n    refetch: refetchTags \n  } = useTags(userProfile);\n  \n  const {\n    data: rawTagCategories = [], // Renamed to rawTagCategories\n    isLoading: isCategoriesLoading,\n    refetch: refetchCategories\n  } = useTagCategories(userProfile);\n\n  const { mutate: createTagMutation, isPending: isCreatingTag } = useCreateTag();\n\n  // --- State Hooks ---\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [newTagName, setNewTagName] = useState(\"\");\n  const [editingTag, setEditingTag] = useState<{ id: string; name: string } | null>(null);\n  const [tagToDelete, setTagToDelete] = useState<string | null>(null);\n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('sm'));\n  const [tagError, setTagError] = useState<string | null>(null);\n  const [isResetting, setIsResetting] = useState(false);\n  const [activeTab, setActiveTab] = useState(0);\n  const [page, setPage] = useState(1);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  // --- Memoized Values & Callbacks (Defined after all hooks) ---\n  \n  // Cast rawTags and rawTagCategories to the correct type if necessary, or ensure useTags/useTagCategories return correctly typed arrays.\n  // For now, assuming they are Tag[] and TagCategory[] respectively.\n  const tags: Array<{ _id: string; name: string; }> = useMemo(() => rawTags.map(tag => ({ _id: tag._id, name: tag.name })), [rawTags]);\n  // const tagCategories = useMemo(() => rawTagCategories, [rawTagCategories]); // If no transformation is needed\n\n  const isLoading = useMemo(() => \n    isLoadingUserProfile || // Keep user profile loading in the main isLoading check\n    isTagsLoading || \n    isCategoriesLoading || \n    isResetting || \n    isRefreshing ||\n    isCreatingTag,\n  [isLoadingUserProfile, isTagsLoading, isCategoriesLoading, isResetting, isRefreshing, isCreatingTag]);\n\n  const totalTagCount = useMemo(() => tags.length, [tags]);\n\n  const fetchData = useCallback(async (force = false) => {\n    if (isLoading && !force) return;\n    \n    try {\n      setIsRefreshing(true);\n      await Promise.all([\n        typeof refetchTags === 'function' ? refetchTags() : Promise.resolve(),\n        typeof refetchCategories === 'function' ? refetchCategories() : Promise.resolve(),\n      ]);\n    } catch (error) {\n      console.error('Error fetching tag data:', error);\n      if (!(error instanceof TypeError && (error.message.includes('refetchTags is not a function') || error.message.includes('refetchCategories is not a function')))) {\n        toast.error('Error refreshing data.');\n      }\n    } finally {\n      setIsRefreshing(false);\n    }\n  }, [isLoading, refetchTags, refetchCategories]);\n\n  const validateNewTag = useCallback((tagName: string): string | null => {\n    if (!tagName) return null;\n    const validation = validateTag(tagName);\n    if (validation.valid && tags.some(tag => areTagsEquivalent(tag.name, tagName))) {\n      return `Tag \"${tagName}\" already exists`;\n    }\n    return validation.valid ? null : validation.message || null;\n  }, [tags]);\n\n  React.useEffect(() => {\n    setTagError(validateNewTag(newTagName));\n  }, [newTagName, validateNewTag]);\n\n  const handleCreateTag = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newTagName.trim() || !!tagError || isCreatingTag) {\n      if (tagError) {\n        toast.error(tagError);\n      }\n      return;\n    }\n    createTagMutation(normalizeTag(newTagName), {\n      onSuccess: () => {\n        setNewTagName(\"\");\n        // Optionally refetch tags here if createTagMutation doesn't invalidate QueryKeys.tags\n        // refetchTags(); \n      },\n    });\n  }, [newTagName, tagError, isCreatingTag, createTagMutation]);\n\n  const handleKeyPress = useCallback((event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleCreateTag(event as unknown as React.FormEvent); // Cast needed if FormEvent is stricter\n    }\n  }, [handleCreateTag]);\n\n  const handleDeleteTag = useCallback(async () => {\n    toast.info(\"Tag deletion is temporarily disabled.\");\n    setTagToDelete(null);\n  }, []);\n\n  const handleUpdateTag = useCallback(async () => {\n    toast.info(\"Tag update is temporarily disabled.\");\n    setEditingTag(null);\n  }, []);\n\n  const filteredTags = useMemo(() => {\n    return tags.filter(tag =>\n      normalizeTagForComparison(tag.name).includes(normalizeTagForComparison(searchTerm))\n    );\n  }, [tags, searchTerm]);\n\n  const totalPages = Math.ceil(filteredTags.length / TAGS_PER_PAGE);\n  const paginatedTags = useMemo(() => {\n    const startIndex = (page - 1) * TAGS_PER_PAGE;\n    return filteredTags.slice(startIndex, startIndex + TAGS_PER_PAGE);\n  }, [filteredTags, page]);\n\n  const handleChangePage = useCallback((_event: React.ChangeEvent<unknown>, value: number) => {\n    setPage(value);\n  }, []);\n\n  const handleTabChange = useCallback((_event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  }, []);\n\n  const handleClearSearch = useCallback(() => {\n    setSearchTerm('');\n    setPage(1);\n  }, []);\n  \n  // handleResetData was defined later, moving its useCallback wrapper here as well\n  const handleResetData = useCallback(async () => {\n    if (isResetting) return;\n    try {\n      setIsResetting(true);\n      await fetchData(true);\n      toast.success('Tag data refreshed successfully');\n    } catch (err) {\n      console.error('Failed to refresh data:', err);\n      toast.error('Failed to refresh tag data');\n    } finally {\n      setIsResetting(false);\n    }\n  }, [isResetting, fetchData]);\n\n\n  // --- Conditional Returns (Now after all hooks) ---\n  if (isLoadingUserProfile) {\n    return (\n      <Container sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\n        <CircularProgress />\n        <Typography sx={{ ml: 2 }}>Loading user information...</Typography>\n      </Container>\n    );\n  }\n\n  if (isUserProfileError || !userProfile) {\n    return (\n      <Container sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', height: '80vh', textAlign: 'center' }}>\n        <Typography variant=\"h5\" color=\"textSecondary\" gutterBottom>\n          {isUserProfileError ? 'Error Loading Profile' : 'Access Denied'}\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\" sx={{ mb: 2 }}>\n          {isUserProfileError ? 'Could not load your profile. Please try again later.' : 'Please log in to manage tags.'}\n        </Typography>\n        <Button variant=\"contained\" onClick={() => window.location.href = '/login'}>\n          Go to Login\n        </Button>\n      </Container>\n    );\n  }\n\n  // Combine loading states\n  // const isLoading = useMemo(() =>  // MOVED UP\n  //   isTagsLoading || \n  //   isCategoriesLoading || \n  //   isResetting || \n  //   isRefreshing ||\n  //   isCreatingTag,\n  // [isTagsLoading, isCategoriesLoading, isResetting, isRefreshing, isCreatingTag]);\n\n  // Memoized value for total tag count\n  // const totalTagCount = useMemo(() => tags.length, [tags]); // MOVED UP\n\n  // Fetch data function to refresh both tags and categories\n  // const fetchData = useCallback(async (force = false) => { // MOVED UP\n  // ...\n  // }, [isLoading, refetchTags, refetchCategories]);\n\n  // Tag validation logic\n  // const validateNewTag = useCallback((tagName: string) => { // MOVED UP\n  // ...\n  // }, [tags]);\n\n  // Update tag error when tag name changes\n  // React.useEffect(() => { // MOVED UP\n  //   setTagError(validateNewTag(newTagName));\n  // }, [newTagName, validateNewTag]);\n\n  // Reset tag data function\n  // const handleResetData = async () => { // MOVED UP and wrapped with useCallback\n  // ...\n  // };\n\n  // Create tag handler - using memoized validation\n  // const handleCreateTag = useCallback(async (e: React.FormEvent) => { // MOVED UP\n  // ...\n  // }, [newTagName, tagError, isCreatingTag, createTagMutation]);\n\n  // const handleKeyPress = useCallback((event: React.KeyboardEvent) => { // MOVED UP\n  // ...\n  // }, [handleCreateTag]);\n\n  // const handleDeleteTag = useCallback(async () => { // MOVED UP\n  // ...\n  // }, []);\n\n  // const handleUpdateTag = useCallback(async () => { // MOVED UP\n  // ...\n  // }, []);\n\n  // Memoized filtered tags to prevent recalculation on each render\n  // const filteredTags = useMemo(() => { // MOVED UP\n  // ...\n  // }, [tags, searchTerm]);\n\n  // Pagination logic\n  // const totalPages = Math.ceil(filteredTags.length / TAGS_PER_PAGE); // MOVED UP (Calculation based on memoized filteredTags)\n  // const paginatedTags = useMemo(() => { // MOVED UP\n  // ...\n  // }, [filteredTags, page]);\n\n  // const handleChangePage = useCallback((_event: React.ChangeEvent<unknown>, value: number) => { // MOVED UP\n  // ...\n  // }, []);\n\n  // const handleTabChange = useCallback((_event: React.SyntheticEvent, newValue: number) => { // MOVED UP\n  // ...\n  // }, []);\n\n  // Clear search handler\n  // const handleClearSearch = useCallback(() => { // MOVED UP\n  // ...\n  // }, []);\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0, transition: { duration: 0.3 } },\n    exit: { opacity: 0, y: 20, transition: { duration: 0.3 } },\n  };\n\n  return (\n    <motion.div\n      id=\"account-tags\"\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      exit=\"exit\"\n    >\n      <Container maxWidth=\"xl\" sx={{ py: 3 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Box>\n            <Typography variant=\"h1\" fontSize={{ xs: '2rem', md: '2.5rem' }}>Tag Management</Typography>\n          </Box>\n          <Button\n            variant=\"outlined\"\n            color=\"warning\"\n            startIcon={isResetting ? <CircularProgress size={16} color=\"inherit\" /> : <FaRedo />}\n            onClick={handleResetData}\n            disabled={isLoading}\n            size=\"small\"\n            sx={{ height: '36px' }}\n          >\n            {isResetting ? 'Refreshing...' : 'Refresh Tags'}\n          </Button>\n        </Box>\n        \n        {isLoading && (\n          <Box sx={{ width: '100%', mb: 3 }}>\n            <LinearProgress />\n          </Box>\n        )}\n\n        <Paper elevation={3} sx={{ borderRadius: '12px', bgcolor: 'background.paper', overflow: 'hidden' }}>\n          <Tabs \n            value={activeTab} \n            onChange={handleTabChange} \n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n          >\n            <Tab label={`Tag Categories (${rawTagCategories.length})`} />\n            <Tab label={`Create & Manage Tags (${totalTagCount})`} />\n          </Tabs>\n\n          {/* Tag Categories Tab */}\n          <Box sx={{ display: activeTab === 0 ? 'block' : 'none', p: { xs: 2, md: 3 } }}>\n            <TagCategoryManager />\n          </Box>\n\n          {/* Create & Manage Tags Tab */}\n          <Box sx={{ display: activeTab === 1 ? 'block' : 'none', p: { xs: 2, md: 3 } }}>\n            {/* Create New Tag Section */}\n            <Card variant=\"outlined\" sx={{ mb: 4 }}>\n              <CardContent>\n                <Typography variant=\"h6\" sx={{ mb: 2 }}>Create New Tag</Typography>\n                <Box component=\"form\" onSubmit={handleCreateTag} sx={{ display: 'flex', flexDirection: { xs: 'column', sm: 'row' }, alignItems: 'flex-start', gap: 2 }}>\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    label=\"New Tag Name\"\n                    value={newTagName}\n                    onChange={(e) => setNewTagName(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"Enter tag name\"\n                    size=\"small\"\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <FaTag size={16} />\n                        </InputAdornment>\n                      ),\n                    }}\n                    error={!!tagError}\n                    helperText={tagError || \" \"}\n                  />\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!newTagName.trim() || !!tagError || isLoading}\n                    sx={{ \n                      height: '40px', \n                      whiteSpace: 'nowrap',\n                      minWidth: { xs: '100%', sm: '130px' }\n                    }}\n                    startIcon={<FaPlus />}\n                  >\n                    Add Tag\n                  </Button>\n                </Box>\n              </CardContent>\n            </Card>\n            \n            {/* Manage Existing Tags Section */}\n            <Card variant=\"outlined\">\n              <CardContent>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n                  <Typography variant=\"h6\">Manage Existing Tags</Typography>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <Chip \n                      label={`${filteredTags.length} tags`} \n                      color=\"primary\" \n                      variant=\"outlined\" \n                      size=\"small\" \n                    />\n                    <IconButton \n                      onClick={() => fetchData(true)}\n                      size=\"small\"\n                      disabled={isLoading}\n                      title=\"Refresh tags\"\n                    >\n                      <FaRedo size={14} />\n                    </IconButton>\n                  </Box>\n                </Box>\n                \n                <Paper\n                  component=\"form\"\n                  sx={{ \n                    display: 'flex', \n                    alignItems: 'center', \n                    width: '100%', \n                    mb: 3,\n                    border: '1px solid',\n                    borderColor: 'divider',\n                    boxShadow: 'none',\n                    p: '2px 4px',\n                  }}\n                >\n                  <InputAdornment position=\"start\" sx={{ pl: 1 }}>\n                    <FaSearch size={16} color=\"action\" />\n                  </InputAdornment>\n                  <InputBase\n                    sx={{ ml: 1, flex: 1 }}\n                    placeholder=\"Search tags\"\n                    value={searchTerm}\n                    onChange={(e) => {\n                      setSearchTerm(e.target.value);\n                      if (page !== 1) setPage(1);  // Reset to first page on search\n                    }}\n                    inputProps={{ 'aria-label': 'search tags' }}\n                  />\n                  {searchTerm && (\n                    <IconButton onClick={handleClearSearch} size=\"small\" sx={{ color: 'text.secondary' }}>\n                      <FaTimes size={14} />\n                    </IconButton>\n                  )}\n                </Paper>\n                \n                {isLoading ? (\n                  <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n                    <CircularProgress size={40} />\n                  </Box>\n                ) : filteredTags.length === 0 ? (\n                  <Box sx={{ textAlign: 'center', p: 4 }}>\n                    <Typography variant=\"body1\" color=\"text.secondary\">\n                      {tags.length === 0 \n                        ? \"No tags found. Create your first tag to get started!\" \n                        : \"No tags match your search criteria.\"}\n                    </Typography>\n                  </Box>\n                ) : (\n                  <>\n                    <Box sx={{ \n                      display: 'grid',\n                      gridTemplateColumns: {\n                        xs: '1fr',\n                        sm: 'repeat(2, 1fr)',\n                        md: 'repeat(3, 1fr)',\n                        lg: 'repeat(4, 1fr)',\n                        xl: 'repeat(6, 1fr)'\n                      },\n                      gap: 1.5\n                    }}>\n                      {paginatedTags.map((tag: any) => (\n                        <motion.div\n                          key={tag._id}\n                          initial={{ opacity: 0, y: 5 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ duration: 0.2 }}\n                        >\n                          <Paper\n                            elevation={0}\n                            sx={{\n                              p: 1,\n                              display: 'flex',\n                              alignItems: 'center',\n                              justifyContent: 'space-between',\n                              borderRadius: '8px',\n                              border: '1px solid',\n                              borderColor: 'divider',\n                              transition: 'all 0.2s ease',\n                              height: '36px',\n                              '&:hover': {\n                                bgcolor: alpha('#000', 0.03),\n                                borderColor: 'primary.light',\n                              }\n                            }}\n                          >\n                            <Typography \n                              variant=\"body2\" \n                              sx={{ \n                                overflow: 'hidden',\n                                textOverflow: 'ellipsis',\n                                whiteSpace: 'nowrap',\n                                flex: 1,\n                                fontSize: '0.875rem',\n                                pl: 0.5\n                              }}\n                            >\n                              {tag.name}\n                            </Typography>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <IconButton \n                                size=\"small\" \n                                onClick={() => setEditingTag({ id: tag._id, name: tag.name })}\n                                sx={{ fontSize: '0.75rem' }}\n                              >\n                                <FaEdit size={14} />\n                              </IconButton>\n                              <IconButton \n                                size=\"small\" \n                                color=\"error\" \n                                onClick={() => setTagToDelete(tag._id)}\n                                sx={{ fontSize: '0.75rem' }}\n                              >\n                                <FaTrash size={14} />\n                              </IconButton>\n                            </Box>\n                          </Paper>\n                        </motion.div>\n                      ))}\n                    </Box>\n                    \n                    {totalPages > 1 && (\n                      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>\n                        <Pagination \n                          count={totalPages} \n                          page={page} \n                          onChange={handleChangePage} \n                          color=\"primary\" \n                          size={isMobile ? \"small\" : \"medium\"}\n                        />\n                      </Box>\n                    )}\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </Box>\n        </Paper>\n      </Container>\n      \n      {/* Edit Tag Dialog */}\n      <Dialog open={!!editingTag} onClose={() => setEditingTag(null)}>\n        <DialogTitle>Edit Tag</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Tag Name\"\n            type=\"text\"\n            fullWidth\n            variant=\"outlined\"\n            value={editingTag?.name || ''}\n            onChange={(e) => setEditingTag(prev => prev ? { ...prev, name: e.target.value } : null)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setEditingTag(null)}>Cancel</Button>\n          <Button onClick={handleUpdateTag} variant=\"contained\" color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      {/* Delete Confirmation Dialog */}\n      <Dialog open={!!tagToDelete} onClose={() => setTagToDelete(null)}>\n        <DialogTitle>Delete Tag</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete this tag?\n            This action cannot be undone.\n          </Typography>\n          {tagToDelete && (\n            <Typography variant=\"subtitle1\" sx={{ mt: 2, fontWeight: 'bold' }}>\n              {tags.find((tag: any) => tag._id === tagToDelete)?.name || 'Unknown Tag'}\n            </Typography>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setTagToDelete(null)}>Cancel</Button>\n          <Button onClick={handleDeleteTag} color=\"error\" variant=\"contained\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </motion.div>\n  );\n};\n\nexport default AccountTags;\n","usedDeprecatedRules":[]}]